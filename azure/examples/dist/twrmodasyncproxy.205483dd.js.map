{"mappings":"IgBUI,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,c,I,G,I,E,E,S,E,E,S,E,E,QdEE,OAAO,EACV,OAA6B,AAC7B,CAAA,OAAsB,AACtB,CAAA,QAAuB,AACvB,CAAA,KAA4B,AAIpB,CAAA,WAAW,CAAiC,CAA5C,CACL,MAAO,CACJ,GAAG,CAAO,CACV,sBAAsB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CACvD,CACJ,CAEA,MAAM,SAAS,CAAiB,CAAE,CAAiC,CAAnE,KACO,EASA,EARJ,GAAI,CAED,GAAI,CAAC,AADL,CAAA,EAAS,MAAM,MAAM,EAArB,EACc,EAAE,CAAE,MAAM,AAAI,MAAM,iCAAiC,EAAW,MAAM,EAAS,UAAU,CAC1G,CAAE,MAAM,EAAS,CAEd,MADA,QAAQ,GAAG,CAAC,+BAA+B,GACrC,CACT,CAGA,GAAI,CACD,IAAM,EAAY,MAAM,EAAS,WAAW,GAC5C,EAAW,MAAM,YAAY,WAAW,CAAC,EAAW,CAAC,IAAK,IAAI,CAAC,UAAU,CAAC,EAAQ,EACrF,CAAE,MAAM,EAAS,CAEd,MADA,QAAQ,GAAG,CAAC,2BAA6B,EAAO,CAAA,EAAI,KAAK,CAAG,KAAO,EAAI,KAAK,CAAG,EAAA,GACzE,CACT,CAEA,GAAI,IAAI,CAAC,OAAO,CAAE,MAAM,AAAI,MAAO,gDACnC,GAAI,CAAC,EAAS,QAAQ,CAAC,OAAO,CAAE,MAAM,AAAI,MAAM,gDAChD,CAAA,IAAI,CAAC,OAAO,CAAC,EAAS,QAAQ,CAAC,OAAO,CAEtC,IAAM,EAAO,IAAI,CAAC,OAAO,CAAC,MAA4B,CACtD,GAAI,CAAC,EAAQ,MAAM,AAAI,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","sources":["<anon>","../lib-js/twrwasmbase.js","../source/twr-ts/twrwasmbase.ts","../lib-js/twrwasmmem.js","../source/twr-ts/twrwasmmem.ts","../lib-js/twrliblocale.js","../source/twr-ts/twrliblocale.ts","../lib-js/twrlibrary.js","../source/twr-ts/twrlibrary.ts","../lib-js/twreventqueue.js","../source/twr-ts/twreventqueue.ts","../lib-js/twrcircular.js","../source/twr-ts/twrcircular.ts","../lib-js/twrwasmcall.js","../source/twr-ts/twrwasmcall.ts","../lib-js/twrmodasyncproxy.js","../source/twr-ts/twrmodasyncproxy.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire8dfc\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire8dfc\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"jxXdl\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmBase\", () => $e3af081ed3b5b25b$export$599419144fb0094a);\n\nvar $3tyux = parcelRequire(\"3tyux\");\n\nvar $7KBfz = parcelRequire(\"7KBfz\");\n\nvar $6QEzV = parcelRequire(\"6QEzV\");\nclass $e3af081ed3b5b25b$export$599419144fb0094a {\n    exports;\n    wasmMem;\n    wasmCall;\n    callC;\n    /*********************************************************************/ getImports(imports) {\n        return {\n            ...imports,\n            twr_register_callback: this.registerCallback.bind(this)\n        };\n    }\n    async loadWasm(pathToLoad, imports) {\n        let response;\n        try {\n            response = await fetch(pathToLoad);\n            if (!response.ok) throw new Error(\"Fetch response error on file '\" + pathToLoad + \"'\\n\" + response.statusText);\n        } catch (err) {\n            console.log(\"loadWasm() failed to fetch: \" + pathToLoad);\n            throw err;\n        }\n        let instance;\n        try {\n            const wasmBytes = await response.arrayBuffer();\n            instance = await WebAssembly.instantiate(wasmBytes, {\n                env: this.getImports(imports)\n            });\n        } catch (err) {\n            console.log(\"Wasm instantiate error: \" + err + (err.stack ? \"\\n\" + err.stack : \"\"));\n            throw err;\n        }\n        if (this.exports) throw new Error(\"Unexpected error -- this.exports already set\");\n        if (!instance.instance.exports) throw new Error(\"Unexpected error - undefined instance.exports\");\n        this.exports = instance.instance.exports;\n        const memory = this.exports.memory;\n        if (!memory) throw new Error(\"Unexpected error - undefined exports.memory\");\n        const malloc = this.exports.malloc;\n        const free = this.exports.free;\n        this.wasmMem = new (0, $3tyux.twrWasmMemory)(memory, free, malloc);\n        this.wasmCall = new (0, $7KBfz.twrWasmCall)(this.wasmMem, this.exports);\n        this.callC = this.wasmCall.callC.bind(this.wasmCall);\n    }\n    //see twrWasmModule.constructor - imports - twr_register_callback:this.registerCallback.bind(this), \n    registerCallback(funcNameIdx) {\n        const funcName = this.wasmMem.getString(funcNameIdx);\n        const onEventCallback = this.exports[funcName];\n        return (0, $6QEzV.twrEventQueueReceive).registerCallback(funcName, onEventCallback);\n    }\n}\n\n});\nparcelRegister(\"3tyux\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmMemory\", () => $287ed5d7d50ba8d6$export$d835cdc0f59e6ea8);\n$parcel$export(module.exports, \"twrWasmMemoryAsync\", () => $287ed5d7d50ba8d6$export$f59b88b16ecb0d13);\n\nvar $lVt1a = parcelRequire(\"lVt1a\");\nclass $287ed5d7d50ba8d6$export$ad21274072098225 {\n    memory;\n    mem8;\n    mem16;\n    mem32;\n    memF;\n    memD;\n    constructor(memory){\n        this.memory = memory;\n        this.mem8 = new Uint8Array(memory.buffer);\n        this.mem16 = new Uint16Array(memory.buffer);\n        this.mem32 = new Uint32Array(memory.buffer);\n        this.memF = new Float32Array(memory.buffer);\n        this.memD = new Float64Array(memory.buffer);\n    }\n    // convert a Javascript string into byte sequence that encodes the string using UTF8, or the requested codePage\n    stringToU8(sin, codePage = (0, $lVt1a.codePageUTF8)) {\n        let ru8;\n        if (codePage == (0, $lVt1a.codePageUTF8)) {\n            const encoder = new TextEncoder();\n            ru8 = encoder.encode(sin);\n        } else if (codePage == (0, $lVt1a.codePage1252)) {\n            ru8 = new Uint8Array(sin.length);\n            for(let i = 0; i < sin.length; i++)ru8[i] = (0, $lVt1a.to1252)(sin[i]);\n        } else if (codePage == (0, $lVt1a.codePageASCII)) {\n            ru8 = new Uint8Array(sin.length);\n            for(let i = 0; i < sin.length; i++){\n                const r = (0, $lVt1a.toASCII)(sin[i]);\n                ru8[i] = r;\n            }\n        } else throw new Error(\"unknown codePage: \" + codePage);\n        return ru8;\n    }\n    // copy a string into existing buffer in the webassembly module memory as utf8 (or specified codePage)\n    // result always null terminated\n    copyString(buffer, buffer_size, sin, codePage = (0, $lVt1a.codePageUTF8)) {\n        if (buffer_size < 1) throw new Error(\"copyString buffer_size must have length > 0 (room for terminating 0): \" + buffer_size);\n        const ru8 = this.stringToU8(sin, codePage);\n        let i;\n        for(i = 0; i < ru8.length && i < buffer_size - 1; i++)this.mem8[buffer + i] = ru8[i];\n        this.mem8[buffer + i] = 0;\n    }\n    getLong(idx) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx) throw new Error(\"getLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length) throw new Error(\"invalid index passed to getLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        const long = this.mem32[idx32];\n        return long;\n    }\n    setLong(idx, value) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx) throw new Error(\"setLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length - 1) throw new Error(\"invalid index passed to setLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        this.mem32[idx32] = value;\n    }\n    getDouble(idx) {\n        const idx64 = Math.floor(idx / 8);\n        if (idx64 * 8 != idx) throw new Error(\"getLong passed non Float64 aligned address\");\n        const long = this.memD[idx64];\n        return long;\n    }\n    setDouble(idx, value) {\n        const idx64 = Math.floor(idx / 8);\n        if (idx64 * 8 != idx) throw new Error(\"setDouble passed non Float64 aligned address\");\n        this.memD[idx64] = value;\n    }\n    getShort(idx) {\n        if (idx < 0 || idx >= this.mem8.length) throw new Error(\"invalid index passed to getShort: \" + idx);\n        const short = this.mem8[idx] + this.mem8[idx + 1] * 256;\n        return short;\n    }\n    // get a string out of module memory\n    // null terminated, up until max of (optional) len bytes\n    // len may be longer than the number of characters, if characters are utf-8 encoded\n    getString(strIndex, len, codePage = (0, $lVt1a.codePageUTF8)) {\n        if (strIndex < 0 || strIndex >= this.mem8.length) throw new Error(\"invalid strIndex passed to getString: \" + strIndex);\n        if (len) {\n            if (len < 0 || len + strIndex > this.mem8.length) throw new Error(\"invalid len  passed to getString: \" + len);\n        } else {\n            len = this.mem8.indexOf(0, strIndex);\n            if (len == -1) throw new Error(\"string is not null terminated\");\n            len = len - strIndex;\n        }\n        let encodeFormat;\n        if (codePage == (0, $lVt1a.codePageUTF8)) encodeFormat = \"utf-8\";\n        else if (codePage == (0, $lVt1a.codePage1252)) encodeFormat = \"windows-1252\";\n        else throw new Error(\"Unsupported codePage: \" + codePage);\n        const td = new TextDecoder(encodeFormat);\n        const u8todecode = new Uint8Array(this.mem8.buffer, strIndex, len);\n        // chrome throws exception when using TextDecoder on SharedArrayBuffer\n        // BUT, instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error, so don't check directly\n        if (this.mem8.buffer instanceof ArrayBuffer) {\n            const sout = td.decode(u8todecode);\n            return sout;\n        } else {\n            const regularArrayBuffer = new ArrayBuffer(len);\n            const regularUint8Array = new Uint8Array(regularArrayBuffer);\n            regularUint8Array.set(u8todecode);\n            const sout = td.decode(regularUint8Array);\n            return sout;\n        }\n    }\n    // get a byte array out of module memory when passed in index to [size, dataptr]\n    getU8Arr(idx) {\n        if (idx < 0 || idx >= this.mem8.length) throw new Error(\"invalid index passed to getU8: \" + idx);\n        const rv = new Uint32Array(this.mem8.slice(idx, idx + 8).buffer);\n        let size = rv[0];\n        let dataptr = rv[1];\n        if (dataptr < 0 || dataptr >= this.mem8.length) throw new Error(\"invalid idx.dataptr passed to getU8\");\n        if (size < 0 || size > this.mem8.length - dataptr) throw new Error(\"invalid idx.size passed to  getU8\");\n        const u8 = this.mem8.slice(dataptr, dataptr + size);\n        return u8;\n    }\n    // get a int32 array out of module memory when passed in index to [size, dataptr]\n    getU32Arr(idx) {\n        if (idx < 0 || idx >= this.mem8.length) throw new Error(\"invalid index passed to getU32: \" + idx);\n        const rv = new Uint32Array(this.mem8.slice(idx, idx + 8).buffer);\n        let size = rv[0];\n        let dataptr = rv[1];\n        if (dataptr < 0 || dataptr >= this.mem8.length) throw new Error(\"invalid idx.dataptr passed to getU32\");\n        if (size < 0 || size > this.mem8.length - dataptr) throw new Error(\"invalid idx.size passed to  getU32\");\n        if (size % 4 != 0) throw new Error(\"idx.size is not an integer number of 32 bit words\");\n        const u32 = new Uint32Array(this.mem8.slice(dataptr, dataptr + size).buffer);\n        return u32;\n    }\n}\nclass $287ed5d7d50ba8d6$export$d835cdc0f59e6ea8 extends $287ed5d7d50ba8d6$export$ad21274072098225 {\n    malloc;\n    free;\n    constructor(memory, free, malloc){\n        super(memory);\n        this.free = free;\n        this.malloc = malloc;\n    }\n    // allocate and copy a string into the webassembly module memory as utf8 (or the specified codePage)\n    putString(sin, codePage = (0, $lVt1a.codePageUTF8)) {\n        const ru8 = this.stringToU8(sin, codePage);\n        const strIndex = this.malloc(ru8.length + 1);\n        this.mem8.set(ru8, strIndex);\n        this.mem8[strIndex + ru8.length] = 0;\n        return strIndex;\n    }\n    // allocate and copy a Uint8Array into Wasm mod memory\n    putU8(u8a) {\n        let dest = this.malloc(u8a.length);\n        this.mem8.set(u8a, dest);\n        return dest;\n    }\n    putArrayBuffer(ab) {\n        const u8 = new Uint8Array(ab);\n        return this.putU8(u8);\n    }\n}\nclass $287ed5d7d50ba8d6$export$f59b88b16ecb0d13 extends $287ed5d7d50ba8d6$export$ad21274072098225 {\n    malloc;\n    free;\n    constructor(memory, mallocImpl, callCImpl){\n        super(memory);\n        this.free = (size)=>{\n            return callCImpl(\"free\", [\n                size\n            ]);\n        };\n        this.malloc = mallocImpl;\n    }\n    // allocate and copy a string into the webassembly module memory as utf8 (or the specified codePage)\n    async putString(sin, codePage = (0, $lVt1a.codePageUTF8)) {\n        const ru8 = this.stringToU8(sin, codePage);\n        const strIndex = await this.malloc(ru8.length + 1);\n        this.mem8.set(ru8, strIndex);\n        this.mem8[strIndex + ru8.length] = 0;\n        return strIndex;\n    }\n    // allocate and copy a Uint8Array into Wasm mod memory\n    async putU8(u8a) {\n        let dest = await this.malloc(u8a.length);\n        this.mem8.set(u8a, dest);\n        return dest;\n    }\n    async putArrayBuffer(ab) {\n        const u8 = new Uint8Array(ab);\n        return this.putU8(u8);\n    }\n}\n\n});\nparcelRegister(\"lVt1a\", function(module, exports) {\n\n$parcel$export(module.exports, \"codePageASCII\", () => $ff656e333be58c07$export$53f1026d7d1c23fb);\n$parcel$export(module.exports, \"codePage1252\", () => $ff656e333be58c07$export$29f202393adbf96);\n$parcel$export(module.exports, \"codePageUTF8\", () => $ff656e333be58c07$export$3d6ef5b62200d8d1);\n$parcel$export(module.exports, \"codePageUTF32\", () => $ff656e333be58c07$export$ddea6250b326d061);\n$parcel$export(module.exports, \"default\", () => $ff656e333be58c07$export$2e2bcd8739ae039);\n$parcel$export(module.exports, \"twrCodePageToUnicodeCodePoint\", () => $ff656e333be58c07$export$c7de3f2686797480);\n$parcel$export(module.exports, \"to1252\", () => $ff656e333be58c07$export$8644084c19ac418e);\n$parcel$export(module.exports, \"toASCII\", () => $ff656e333be58c07$export$69111c4ea6e0c4a0);\n\nvar $9lAov = parcelRequire(\"9lAov\");\nconst $ff656e333be58c07$export$53f1026d7d1c23fb = 0;\nconst $ff656e333be58c07$export$29f202393adbf96 = 1252;\nconst $ff656e333be58c07$export$3d6ef5b62200d8d1 = 65001;\nconst $ff656e333be58c07$export$ddea6250b326d061 = 12000;\nclass $ff656e333be58c07$export$2e2bcd8739ae039 extends (0, $9lAov.twrLibrary) {\n    id;\n    imports = {\n        twrUnicodeCodePointToCodePage: {\n            isCommonCode: true\n        },\n        twrCodePageToUnicodeCodePoint: {\n            isCommonCode: true\n        },\n        twrUserLanguage: {\n            isCommonCode: true\n        },\n        twrTimeTmLocal: {\n            isCommonCode: true\n        },\n        twrUserLconv: {\n            isCommonCode: true\n        },\n        twrRegExpTest1252: {\n            isCommonCode: true\n        },\n        twrToUpper1252: {\n            isCommonCode: true\n        },\n        twrToLower1252: {\n            isCommonCode: true\n        },\n        twrStrcoll: {\n            isCommonCode: true\n        },\n        twrGetDtnames: {\n            isCommonCode: true\n        }\n    };\n    libSourcePath = new URL(\"file:///../lib-js/twrliblocale.js\").pathname;\n    cpTranslate = new $ff656e333be58c07$export$c7de3f2686797480();\n    cpTranslate2 = new $ff656e333be58c07$export$c7de3f2686797480();\n    constructor(){\n        // all library constructors should start with these two lines\n        super();\n        this.id = (0, $9lAov.twrLibraryInstanceRegistry).register(this);\n    }\n    ///////////////////////////////////////////////////////////////////////////////////////\n    twrCodePageToUnicodeCodePoint(callingMod, c, codePage) {\n        return this.cpTranslate2.convert(c, codePage);\n    }\n    twrUnicodeCodePointToCodePage(callingMod, outstr, cp, codePage) {\n        const ru8 = callingMod.wasmMem.stringToU8(String.fromCodePoint(cp), codePage);\n        callingMod.wasmMem.mem8.set(ru8, outstr);\n        return ru8.length;\n    }\n    twrUserLanguage(callingMod) {\n        // navigator.language works in JS main thread and Worker thread\n        return callingMod.wasmMem.putString(navigator.language, $ff656e333be58c07$export$53f1026d7d1c23fb);\n    }\n    // checks if the character c, when converted to a string, is matched by the passed in regexp string \n    // utf-8 version not needed since this function is used for a single byte ('char'), \n    // and non-ascii range utf-8 single byte are not valid\n    twrRegExpTest1252(callingMod, regexpStrIdx, c) {\n        const regexpStr = callingMod.wasmMem.getString(regexpStrIdx);\n        const regexp = new RegExp(regexpStr, \"u\");\n        const cstr = this.cpTranslate.decoder1252.decode(new Uint8Array([\n            c\n        ]));\n        const r = regexp.test(cstr);\n        if (r) return 1;\n        else return 0;\n    }\n    // utf-8 version not needed since this function is used for a single byte ('char'), \n    // and non-ascii range utf-8 single byte are not valid\n    twrToLower1252(callingMod, c) {\n        const cstr = this.cpTranslate.decoder1252.decode(new Uint8Array([\n            c\n        ]));\n        const regexp = new RegExp(\"^\\\\p{Letter}$\", \"u\");\n        if (regexp.test(cstr)) {\n            const r = $ff656e333be58c07$export$8644084c19ac418e(cstr.toLocaleLowerCase());\n            //console.log(\"twrToLower1252Impl: isLetter\", c, cstr, cstr.codePointAt(0), cstr.toLocaleLowerCase(), cstr.toLocaleLowerCase().codePointAt(0), r);\n            return r;\n        } else //console.log(\"twrToLower1252Impl: isNOTLetter\", c, cstr, cstr.codePointAt(0));\n        return c;\n    }\n    //utf-8 version not needed since this function is used for a single byte ('char'), \n    // and non-ascii range utf-8 single byte are not valid\n    twrToUpper1252(callingMod, c) {\n        const cstr = this.cpTranslate.decoder1252.decode(new Uint8Array([\n            c\n        ]));\n        if (cstr.codePointAt(0) == 402) return c; // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is ƒ\n        if (cstr.codePointAt(0) == 181) return c; // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is µ\n        if (cstr.codePointAt(0) == 223) return c; // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is ß'\n        if (cstr == \"\\xb5\") return c; // upper case version doesn't fit in 1252\n        if (cstr == \"\\u0192\") return c; // upper case version doesn't fit in 1252\n        if (cstr == \"\\xdf\") return c; // toLocaleUpperCase() will convert beta to SS\n        const regexp = new RegExp(\"^\\\\p{Letter}$\", \"u\");\n        if (regexp.test(cstr)) return $ff656e333be58c07$export$8644084c19ac418e(cstr.toLocaleUpperCase());\n        else return c;\n    }\n    twrStrcoll(callingMod, lhs, rhs, codePage) {\n        const lhStr = callingMod.wasmMem.getString(lhs, undefined, codePage);\n        const rhStr = callingMod.wasmMem.getString(rhs, undefined, codePage);\n        // c strcmp(): A positive integer if str1 is greater than str2.\n        // 1 if string 1 (lh) comes after string 2 (rh)\n        const collator = new Intl.Collator();\n        const r = collator.compare(lhStr, rhStr);\n        return r;\n    }\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    //struct tm {\n    //\tint\ttm_sec;\t\t/* seconds after the minute [0-60] */\n    //\tint\ttm_min;\t\t/* minutes after the hour [0-59] */\n    //\tint\ttm_hour;\t\t/* hours since midnight [0-23] */\n    //\tint\ttm_mday;\t\t/* day of the month [1-31] */\n    //\tint\ttm_mon;\t\t/* months since January [0-11] */\n    //\tint\ttm_year;\t\t/* years since 1900 */\n    //\tint\ttm_wday;\t\t/* days since Sunday [0-6] */\n    //\tint\ttm_yday;\t\t/* days since January 1 [0-365] */\n    //\tint\ttm_isdst;\t/* Daylight Saving Time flag */\n    //\tlong\ttm_gmtoff;\t/* offset from UTC in seconds */\n    //\tchar\t*tm_zone;\t/* timezone abbreviation */\n    //};\n    // fill in struct tm\n    // epcohSecs as 32bit int will overflow January 19, 2038. \n    twrTimeTmLocal(callingMod, tmIdx, epochSecs) {\n        const d = new Date(epochSecs * 1000);\n        callingMod.wasmMem.setLong(tmIdx, d.getSeconds());\n        callingMod.wasmMem.setLong(tmIdx + 4, d.getMinutes());\n        callingMod.wasmMem.setLong(tmIdx + 8, d.getHours());\n        callingMod.wasmMem.setLong(tmIdx + 12, d.getDate());\n        callingMod.wasmMem.setLong(tmIdx + 16, d.getMonth());\n        callingMod.wasmMem.setLong(tmIdx + 20, d.getFullYear() - 1900);\n        callingMod.wasmMem.setLong(tmIdx + 24, d.getDay());\n        callingMod.wasmMem.setLong(tmIdx + 28, this.getDayOfYear(d));\n        callingMod.wasmMem.setLong(tmIdx + 32, this.isDst());\n        callingMod.wasmMem.setLong(tmIdx + 36, -d.getTimezoneOffset() * 60);\n        callingMod.wasmMem.setLong(tmIdx + 40, callingMod.wasmMem.putString(this.getTZ(d), $ff656e333be58c07$export$53f1026d7d1c23fb));\n    }\n    getDayOfYear(date) {\n        const start = new Date(date.getFullYear(), 0, 1);\n        const diff = date.getTime() - start.getTime(); // Difference in milliseconds\n        const oneDay = 86400000; // Number of milliseconds in one day\n        const day = Math.floor(diff / oneDay);\n        return day;\n    }\n    isDst() {\n        const timeString = new Date().toLocaleTimeString(\"en-US\", {\n            timeZoneName: \"long\"\n        });\n        if (timeString.includes(\"Daylight\")) return 1;\n        else return 0;\n    }\n    getTZ(date) {\n        const timeZone = date.toLocaleTimeString(\"en-US\", {\n            timeZoneName: \"short\"\n        }).split(\" \").pop();\n        return timeZone ? timeZone : \"UTC\";\n    }\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    setAndPutString(mem, idx, sin, codePage) {\n        const stridx = mem.putString(sin, codePage);\n        mem.setLong(idx, stridx);\n    }\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    //struct lconv {\n    //\tchar\t*decimal_point;   \t\t0\n    //\tchar\t*thousands_sep;\t\t\t4\n    //\tchar\t*grouping;\t\t\t\t\t8\n    //\tchar\t*int_curr_symbol;\t\t\t12\n    //\tchar\t*currency_symbol;\t\t\t16\n    //\tchar\t*mon_decimal_point;\t\t20\n    //\tchar\t*mon_thousands_sep;\t\t24\n    //\tchar\t*mon_grouping;\t\t\t\t28\n    //\tchar\t*positive_sign;\t\t\t32\n    //\tchar\t*negative_sign;\t\t\t36\n    //\tchar\tint_frac_digits;\t\t\t40\n    //\tchar\tfrac_digits;\t\t\t\t44\n    //\tchar\tp_cs_precedes;\t\t\t\t48\n    //\tchar\tp_sep_by_space;\t\t\t52\n    //\tchar\tn_cs_precedes;\t\t\t\t56\n    //\tchar\tn_sep_by_space;\t\t\t60\n    //\tchar\tp_sign_posn;\t\t\t\t64\n    //\tchar\tn_sign_posn;\t\t\t\t68\n    //};\n    twrUserLconv(callingMod, lconvIdx, codePage) {\n        const locDec = this.getLocaleDecimalPoint();\n        const locSep = this.getLocaleThousandsSeparator();\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 0, locDec, codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 4, locSep, codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 20, locDec, codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 24, locSep, codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 24, locSep, codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 24, locSep, codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 32, \"+\", codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 36, \"-\", codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 12, this.getLocalCurrencySymbol(), codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 16, this.getLocalCurrencySymbol(), codePage);\n    }\n    getLocaleDecimalPoint() {\n        const formatter = new Intl.NumberFormat();\n        //console.log(\"dec resolvedOptions\", formatter.resolvedOptions());\n        // Format a test number to find out the decimal point.\n        const formattedNumber = formatter.format(1.1);\n        //console.log(\"dec formattedNumber\", formattedNumber);\n        // Find the character between the numeric parts.\n        const decimalPoint = formattedNumber.replace(/[0-9]/g, \"\").charAt(0);\n        return decimalPoint;\n    }\n    getLocaleThousandsSeparator() {\n        const formatter = new Intl.NumberFormat(undefined, {\n            minimumFractionDigits: 0 // Ensure no decimal part interferes\n        });\n        // Format a test number to include a thousands separator.\n        const formattedNumber = formatter.format(1000);\n        //console.log(\"sep formattedNumber\", formattedNumber);\n        // Extract the thousands separator by removing numeric characters and possible decimal points.\n        // This may need adjustment depending on whether other characters are present.\n        let thousandsSeparator = formattedNumber.replace(/[0-9]/g, \"\").charAt(0); // Assumes separator is the first character.\n        //console.log(\"sep code\",  thousandsSeparator.codePointAt(0));\n        return thousandsSeparator;\n    }\n    // this doesn't work, localeCurrency is not correct\n    getLocaleCurrencyDecimalPoint() {\n        // Create an initial NumberFormat object to detect the locale's currency\n        const tempFormatter = new Intl.NumberFormat(undefined, {\n            style: \"currency\",\n            currency: \"USD\"\n        });\n        const localeCurrency = tempFormatter.resolvedOptions().currency;\n        const formatter = new Intl.NumberFormat(undefined, {\n            style: \"currency\",\n            currency: localeCurrency\n        });\n        // Format a test number to find out the decimal point.\n        const formattedNumber = formatter.format(1.1);\n        // Find the character between the numeric parts.\n        // char(0) is the currency symbol\n        const decimalPoint = formattedNumber.replace(/[0-9]/g, \"\").charAt(1);\n        return decimalPoint;\n    }\n    getLocalCurrencySymbol() {\n        switch(navigator.language){\n            case \"en-US\":\n            case \"en-CA\":\n            case \"fr-CA\":\n            case \"en-AU\":\n            case \"es-MX\":\n            case \"es-AR\":\n            case \"es-CL\":\n            case \"es-CO\":\n            case \"es-EC\":\n            case \"en-GY\":\n            case \"nl-SR\":\n            case \"es-UY\":\n            case \"en-BZ\":\n            case \"es-SV\":\n            case \"es-PA\":\n                return \"$\";\n            case \"es-BO\":\n            case \"es-VE\":\n                return \"Bs.\";\n            case \"es-PY\":\n                return \"\\u20B2\";\n            case \"es-PE\":\n                return \"S/\";\n            case \"es-CR\":\n                return \"\\u20A1\";\n            case \"es-GT\":\n                return \"Q\";\n            case \"es-HN\":\n                return \"L\";\n            case \"es-NI\":\n                return \"C$\";\n            case \"en-GB\":\n                return \"\\xa3\";\n            case \"en-IE\":\n            case \"de-DE\":\n            case \"fr-FR\":\n            case \"de-AT\":\n            case \"nl-BE\":\n            case \"fr-BE\":\n            case \"el-CY\":\n            case \"et-EE\":\n            case \"fi-FI\":\n            case \"sv-FI\":\n            case \"el-GR\":\n            case \"it-IT\":\n            case \"lv-LV\":\n            case \"lt-LT\":\n            case \"fr-LU\":\n            case \"de-LU\":\n            case \"lb-LU\":\n            case \"mt-MT\":\n            case \"nl-NL\":\n            case \"pt-PT\":\n            case \"sk-SK\":\n            case \"sl-SI\":\n            case \"es-ES\":\n                return \"\\u20AC\";\n            case \"ja-JP\":\n                return \"\\xa5\";\n            case \"zh-CN\":\n                return \"\\xa5\";\n            case \"de-CH\":\n            case \"fr-CH\":\n            case \"it-CH\":\n                return \"CHF\";\n            case \"sv-SE\":\n            case \"da-DK\":\n            case \"nb-NO\":\n                return \"kr\";\n            case \"ru-RU\":\n                return \"\\u20BD\";\n            case \"ko-KR\":\n                return \"\\u20A9\";\n            case \"en-IN\":\n                return \"\\u20B9\";\n            case \"pt-BR\":\n                return \"R$\";\n            case \"he-IL\":\n                return \"\\u20AA\";\n            case \"tr-TR\":\n                return \"\\u20BA\";\n            default:\n                return \"\";\n        }\n    }\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /*\n    struct locale_dtnames {\n       const char* day[7];\n       const char* abday[7];\n       const char* month[12];\n       const char* abmonth[12];\n       const char* ampm[2];\n    };\n    */ twrGetDtnames(callingMod, codePage) {\n        const malloc = callingMod.wasmMem.malloc;\n        const dtnamesStructIdx = malloc(160);\n        for(let i = 0; i < 7; i++)this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx + i * 4, this.getLocalizedDayName(i, \"long\"), codePage);\n        for(let i = 0; i < 7; i++)this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx + (i + 7) * 4, this.getLocalizedDayName(i, \"short\"), codePage);\n        for(let i = 0; i < 12; i++)this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx + (i + 14) * 4, this.getLocalizedMonthNames(i, \"long\"), codePage);\n        for(let i = 0; i < 12; i++)this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx + (i + 14 + 12) * 4, this.getLocalizedMonthNames(i, \"short\"), codePage);\n        this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx + 152, this.getLocalizedAM(), codePage);\n        this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx + 156, this.getLocalizedPM(), codePage);\n        return dtnamesStructIdx;\n    }\n    getLocalizedDayName(n, weekdayType) {\n        // Create a Date object for the desired day of the week\n        const date = new Date();\n        date.setDate(date.getDate() - date.getDay() + n);\n        // Create an Intl.DateTimeFormat object with the desired locale and options\n        const formatter = new Intl.DateTimeFormat(undefined, {\n            weekday: weekdayType\n        });\n        // Format the date to get the full day name\n        return formatter.format(date);\n    }\n    getLocalizedMonthNames(n, monthType) {\n        const formatter = new Intl.DateTimeFormat(undefined, {\n            month: monthType\n        });\n        const date = new Date(2000, n, 1);\n        return formatter.format(date);\n    }\n    getLocalizedAM() {\n        // Create a Date object for a time in the morning\n        const morningDate = new Date(2000, 0, 1, 9, 0, 0);\n        // Create an Intl.DateTimeFormat object with the desired locale and options\n        const formatter = new Intl.DateTimeFormat(undefined, {\n            hour: \"numeric\",\n            hour12: true\n        });\n        // Format the date and get the parts\n        const formattedParts = formatter.formatToParts(morningDate);\n        // Find the part of the formatted string that corresponds to the day period (AM/PM)\n        const dayPeriodPart = formattedParts.find((part)=>part.type === \"dayPeriod\");\n        return dayPeriodPart ? dayPeriodPart.value : \"\";\n    }\n    getLocalizedPM() {\n        // Create a Date object for a time in the afternoon\n        const afternoonDate = new Date(2000, 0, 1, 15, 0, 0);\n        // Create an Intl.DateTimeFormat object with the desired locale and options\n        const formatter = new Intl.DateTimeFormat(undefined, {\n            hour: \"numeric\",\n            hour12: true\n        });\n        // Format the date and get the parts\n        const formattedParts = formatter.formatToParts(afternoonDate);\n        // Find the part of the formatted string that corresponds to the day period (AM/PM)\n        const dayPeriodPart = formattedParts.find((part)=>part.type === \"dayPeriod\");\n        return dayPeriodPart ? dayPeriodPart.value : \"\";\n    }\n}\nfunction $ff656e333be58c07$export$8644084c19ac418e(instr) {\n    if (instr.codePointAt(0) == 8239) return 32; // turn narrow-no-break-space into space\n    // this first switch statment fixes what appears to be a bug in safari 15.6.1 (17613.3.9.1.16) (comparisons to the character string fail)\n    let cp = instr.codePointAt(0) || 0;\n    switch(cp){\n        case 338:\n            return 0x8C;\n        case 339:\n            return 0x9C;\n        case 352:\n            return 0x8A;\n        case 353:\n            return 0x9A;\n        case 376:\n            return 0x9F;\n        case 381:\n            return 0x8E;\n        case 382:\n            return 0x9E;\n        case 402:\n            return 0x83;\n        case 710:\n            return 0x88;\n    }\n    switch(instr.normalize()){\n        case \"\\u20AC\":\n            return 0x80;\n        case \"\\u201A\":\n            return 0x82;\n        case \"\\u0192\":\n            return 0x83;\n        case \"\\u201E\":\n            return 0x84;\n        case \"\\u2026\":\n            return 0x85;\n        case \"\\u2020\":\n            return 0x86;\n        case \"\\u2021\":\n            return 0x87;\n        case \"\\u02C6\":\n            return 0x88;\n        case \"\\u2030\":\n            return 0x89;\n        case \"\\u0160\":\n            return 0x8A;\n        case \"\\u2039\":\n            return 0x8B;\n        case \"\\u0152\":\n            return 0x8C;\n        case \"\\u017D\":\n            return 0x8E;\n        case \"\\u2018\":\n            return 0x91;\n        case \"\\u2019\":\n            return 0x92;\n        case \"\\u201C\":\n            return 0x93;\n        case \"\\u201D\":\n            return 0x94;\n        case \"\\u2022\":\n            return 0x95;\n        case \"\\u2013\":\n            return 0x96;\n        case \"\\u2014\":\n            return 0x97;\n        case \"\\u02DC\":\n            return 0x98;\n        case \"\\u2122\":\n            return 0x99;\n        case \"\\u0161\":\n            return 0x9A;\n        case \"\\u203A\":\n            return 0x9B;\n        case \"\\u0153\":\n            return 0x9C;\n        case \"\\u017E\":\n            return 0x9E;\n        case \"\\u0178\":\n            return 0x9F;\n    }\n    if (cp > 255) {\n        console.log(\"twr-wasm.to1252(): unable to convert: \", instr, cp);\n        cp = 0;\n    }\n    return cp;\n}\nfunction $ff656e333be58c07$export$69111c4ea6e0c4a0(instr) {\n    if (instr == \"\\u0192\") return 102; // lowercase 'f'\n    if (instr.codePointAt(0) == 8239) return 32; // turn narrow-no-break-space into space\n    let cp = instr.codePointAt(0) || 0;\n    if (cp > 127) return 63; // ASCII for \"?\"\n    return cp;\n}\nclass $ff656e333be58c07$export$c7de3f2686797480 {\n    decoderUTF8 = new TextDecoder(\"utf-8\");\n    decoder1252 = new TextDecoder(\"windows-1252\");\n    convert(c, codePage) {\n        let outstr;\n        if (codePage == $ff656e333be58c07$export$3d6ef5b62200d8d1) outstr = this.decoderUTF8.decode(new Uint8Array([\n            c\n        ]), {\n            stream: true\n        });\n        else if (codePage == $ff656e333be58c07$export$29f202393adbf96) outstr = this.decoder1252.decode(new Uint8Array([\n            c\n        ]));\n        else if (codePage == $ff656e333be58c07$export$53f1026d7d1c23fb) {\n            if (c > 127) outstr = \"\";\n            else outstr = String.fromCharCode(c);\n        } else if (codePage == $ff656e333be58c07$export$ddea6250b326d061) outstr = String.fromCodePoint(c);\n        else throw new Error(\"unsupported CodePage: \" + codePage);\n        return outstr.codePointAt(0) || 0;\n    }\n}\n\n});\nparcelRegister(\"9lAov\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrLibrary\", () => $6ce24e5be95ebe48$export$e0c9f0d281d749b5);\n$parcel$export(module.exports, \"twrLibraryInstanceRegistry\", () => $6ce24e5be95ebe48$export$67aa3c579b4a4587);\n$parcel$export(module.exports, \"twrLibraryProxy\", () => $6ce24e5be95ebe48$export$5ab2b60d8abc5018);\n$parcel$export(module.exports, \"twrLibraryInstanceProxyRegistry\", () => $6ce24e5be95ebe48$export$fdde87911cbb71ae);\n\nvar $6QEzV = parcelRequire(\"6QEzV\");\nclass $6ce24e5be95ebe48$export$e0c9f0d281d749b5 {\n    // set to unique name if multiple instances allowed (must all expose the same interface) (e.g. consoles).  \n    // When true, APIs will expect first arg to be library ID.\n    interfaceName;\n    constructor(){}\n    // the actual twrLibrary is created outside of a specific wasm module, so isn't paired to a specific module\n    // however, each call to getImports is paired to a specific wasm module\n    // getImports returns Wasm Module imports that will be added to this wasm module's WebAssembly.ModuleImports\n    // getImports expects that the derived class has created a \"this.import\" with a list of function names (as strings)\n    // getImports is called by twrWasmModule\n    getImports(callingMod) {\n        if (callingMod.isTwrWasmModuleAsync) throw new Error(\"unsupported module type (expecting twrWasmModule\");\n        let wasmImports = {};\n        const derivedInstanceThis = this;\n        if (this.imports === undefined) throw new Error(\"twrLibrary derived class is missing imports.\");\n        if (this.libSourcePath === undefined) throw new Error(\"twrLibrary derived class is missing libSourcePath.\");\n        for(let funcName in this.imports)if (this.imports[funcName].isModuleAsyncOnly) {\n            const nullFun = ()=>{\n                throw new Error(\"Invalid call to unimplemented twrLibrary 'import' function (isModuleAsyncOnly was used): \" + funcName);\n            };\n            wasmImports[funcName] = nullFun;\n        } else {\n            if (!derivedInstanceThis[funcName]) throw new Error(\"twrLibrary 'import' function is missing: \" + funcName);\n            if (this.interfaceName) {\n                // in this case, this particular instance represents the class\n                // but the actual instance needs to be retrieved at runtime using the libID & registry\n                // since only once set of WasmImports is created for each class\n                const libFunc = (funcName, mod, libID, ...params)=>{\n                    const lib = $6ce24e5be95ebe48$export$67aa3c579b4a4587.getLibraryInstance(libID);\n                    const derivedLib = lib;\n                    const f = derivedLib[funcName];\n                    if (!f) throw new Error(`Library function not found. id=${libID}, funcName=${funcName}`);\n                    return f.call(derivedLib, mod, ...params);\n                };\n                wasmImports[funcName] = libFunc.bind(null, funcName, callingMod); // rest of function args are also passed to libFunc when using bind\n            } else wasmImports[funcName] = derivedInstanceThis[funcName].bind(this, callingMod);\n        }\n        return wasmImports;\n    }\n    // this function is called by twrWasmModuleAsync, and sent to the corresponding twrWasmModuleAsyncProxy\n    getProxyParams() {\n        return [\n            \"twrLibraryProxy\",\n            this.id,\n            this.imports,\n            this.libSourcePath,\n            this.interfaceName\n        ];\n    }\n    // called by twrWasmModuleAsync\n    async processMessageFromProxy(msg, mod) {\n        const [msgClass, libID, funcName, doAwait, returnValueEventID, ...params] = msg;\n        if (this.interfaceName && $6ce24e5be95ebe48$export$67aa3c579b4a4587.getLibraryInstance(libID).libSourcePath != this.libSourcePath) throw new Error(\"internal error\"); // should never happen\n        else if (libID != this.id) throw new Error(\"internal error\"); // should never happen\n        if (!mod.isTwrWasmModuleAsync) throw new Error(\"internal error\");\n        const libThis = $6ce24e5be95ebe48$export$67aa3c579b4a4587.getLibraryInstance(libID);\n        const derivedInstance = libThis;\n        if (!derivedInstance[funcName]) throw new Error(\"twrLibrary derived class missing 'import' function: \" + funcName);\n        let retVal;\n        if (doAwait) retVal = await derivedInstance[funcName](mod, ...params);\n        else retVal = derivedInstance[funcName](mod, ...params);\n        if (returnValueEventID > -1) mod.eventQueueSend.postEvent(returnValueEventID, retVal);\n    }\n}\nclass $6ce24e5be95ebe48$export$5ab2b60d8abc5018 {\n    id;\n    imports;\n    libSourcePath;\n    interfaceName;\n    called = false;\n    //every module instance has its own twrLibraryProxy\n    constructor(params){\n        const [className, id, imports, libSourcePath, interfaceName] = params;\n        this.id = id;\n        this.imports = imports;\n        this.libSourcePath = libSourcePath;\n        this.interfaceName = interfaceName;\n    }\n    remoteProcedureCall(ownerMod, funcName, isAsyncFunction, returnValueEventID, interfaceName, ...args) {\n        let msg;\n        if (interfaceName) msg = [\n            \"twrLibrary\",\n            args[0],\n            funcName,\n            isAsyncFunction,\n            returnValueEventID,\n            ...args.slice(1)\n        ];\n        else msg = [\n            \"twrLibrary\",\n            this.id,\n            funcName,\n            isAsyncFunction,\n            returnValueEventID,\n            ...args\n        ];\n        // postMessage sends message to the JS Main thread that created the twrModAsyncProxy thread\n        // the message processing code discriminates the destination instance by:  \"twrLibrary\", this.id,\n        postMessage(msg);\n        //TODO!! a void return type isn't particularly supported -- it will presumably returned undefined from the JS function, \n        //which will put a zero into the Int32Array used for returnValue\n        if (returnValueEventID == -1) return 0;\n        const [id, retVals] = ownerMod.eventQueueReceive.waitEvent(returnValueEventID);\n        if (id != returnValueEventID) throw new Error(\"internal error\");\n        if (retVals.length != 1) throw new Error(\"internal error\");\n        return retVals[0];\n    }\n    // getProxyImports is called by twrWasmModuleAsyncProxy\n    // it provides the functions that the twrWasmModuleAsync's C code will call\n    // these will RPC to the JS main thread (unless isCommonCode set) and then wait for a return value (unless noBlock) \n    async getProxyImports(ownerMod) {\n        if (this.called === true) throw new Error(\"getProxyImports should only be called once per twrLibraryProxy instance\");\n        this.called = true;\n        let wasmImports = {};\n        let libClass;\n        // now for each twrLibrary import, create the functions that will be added to wasm module imports\n        for(let funcName in this.imports){\n            if (this.imports[funcName].isCommonCode) {\n                if (this.imports[funcName].isAsyncFunction) throw new Error(\"isAsyncFunction can not be used with isCommonCode\");\n                if (libClass === undefined) {\n                    if (this.libSourcePath === undefined) throw new Error(\"undefined libSourcePath\");\n                    const libMod = await import(this.libSourcePath);\n                    libClass = new libMod.default;\n                }\n                wasmImports[funcName] = libClass[funcName].bind(libClass, ownerMod);\n            } else if (this.imports[funcName].isAsyncFunction) wasmImports[funcName] = this.remoteProcedureCall.bind(this, ownerMod, funcName + \"_async\", this.imports[funcName].isAsyncFunction ? true : false, this.imports[funcName].noBlock ? -1 : (0, $6QEzV.twrEventQueueReceive).registerEvent(), this.interfaceName);\n            else wasmImports[funcName] = this.remoteProcedureCall.bind(this, ownerMod, funcName, this.imports[funcName].isAsyncFunction ? true : false, this.imports[funcName].noBlock ? -1 : (0, $6QEzV.twrEventQueueReceive).registerEvent(), this.interfaceName);\n        }\n        return wasmImports;\n    }\n}\nclass $6ce24e5be95ebe48$export$67aa3c579b4a4587 {\n    // every twrLibrary instance goes here\n    static libInstances = [];\n    // Each unique interface has one representative and arbitrary instance in libInterfaceInstances.\n    // A unique interfaceName represents a unique interface.  Multiple classes may have the same interfaceName.\n    // (A class is identified by libSourcePath)\n    // An undefined interfaceName (anonymous interface) means that only one instance of that class is allowed\n    // and also means that the class has a unique anonymous interface.\n    static libInterfaceInstances = [];\n    // create a pairing between an instance of type ILibraryBase and an integer ID\n    static register(libInstance) {\n        if (libInstance.imports === undefined) throw new Error(\"twrLibrary derived class is missing imports.\");\n        if (libInstance.libSourcePath === undefined) throw new Error(\"twrLibrary derived class is missing libSourcePath.\");\n        // register the new instance\n        $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInstances.push(libInstance);\n        const id = $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInstances.length - 1;\n        // if this has a named interface, add it to the interface list, but only add it once.\n        if (libInstance.interfaceName) {\n            const interfaceID = this.getLibraryInstanceByInterfaceName(libInstance.interfaceName);\n            if (interfaceID === undefined) $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInterfaceInstances.push(libInstance);\n            else {\n                // verify the interface are compatible.  If they don't its a coding error\n                const alreadyRegisteredLibInstance = $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInterfaceInstances[interfaceID];\n                for(let i = 0; i < $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInterfaceInstances.length; i++)if ($6ce24e5be95ebe48$export$67aa3c579b4a4587.libInterfaceInstances[i].interfaceName === libInstance.interfaceName) {\n                    if (!$6ce24e5be95ebe48$var$CompareImports($6ce24e5be95ebe48$export$67aa3c579b4a4587.libInterfaceInstances[i].imports, libInstance.imports)) throw new Error(`interface definitions (imports) ${libInstance.interfaceName} are not compatible between class ${libInstance.libSourcePath} and ${alreadyRegisteredLibInstance.libSourcePath}`);\n                }\n                // TODO!!  This is here to make twrcondummy.ts work correctly (a console without a complete interface might be loaded before twrcondummy.ts)\n                if (Object.keys(libInstance.imports).length > Object.keys(alreadyRegisteredLibInstance.imports).length) $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInterfaceInstances[interfaceID] = libInstance;\n            }\n        } else {\n            // then check for the error where a Class is registered more than once\n            if (this.getLibraryInstanceByClass(libInstance.libSourcePath)) throw new Error(\"A second twrLibrary instance was registered but interfaceName===undefined\");\n            // if no error, than add anonymous interface to the list\n            $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInterfaceInstances.push(libInstance);\n        }\n        return id;\n    }\n    static getLibraryInstance(id) {\n        if (id < 0 || id >= $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInstances.length) throw new Error(\"Invalid console ID: \" + id);\n        return $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInstances[id];\n    }\n    static getLibraryInstanceByInterfaceName(name) {\n        for(let i = 0; i < $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInterfaceInstances.length; i++)if ($6ce24e5be95ebe48$export$67aa3c579b4a4587.libInterfaceInstances[i].interfaceName === name) return i;\n        return undefined;\n    }\n    static getLibraryInstanceByClass(path) {\n        for(let i = 0; i < $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInterfaceInstances.length; i++)if ($6ce24e5be95ebe48$export$67aa3c579b4a4587.libInstances[i].libSourcePath === path) return $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInstances;\n        return undefined;\n    }\n    static getLibraryInstanceID(libInstance) {\n        for(let i = 0; i < $6ce24e5be95ebe48$export$67aa3c579b4a4587.libInstances.length; i++)if ($6ce24e5be95ebe48$export$67aa3c579b4a4587.libInstances[i] == libInstance) return i;\n        throw new Error(\"libInstance not in registry\");\n    }\n}\nclass $6ce24e5be95ebe48$export$fdde87911cbb71ae {\n    static libProxyInstances = [];\n    // create a pairing between an instance of type IConsole and an integer ID\n    static registerProxy(libProxyInstance) {\n        $6ce24e5be95ebe48$export$fdde87911cbb71ae.libProxyInstances[libProxyInstance.id] = libProxyInstance;\n        return libProxyInstance.id;\n    }\n    static getLibraryInstanceProxy(id) {\n        if (id < 0 || id >= $6ce24e5be95ebe48$export$fdde87911cbb71ae.libProxyInstances.length) throw new Error(\"Invalid console ID: \" + id);\n        return $6ce24e5be95ebe48$export$fdde87911cbb71ae.libProxyInstances[id];\n    }\n    static getLibraryInstanceID(libProxyInstance) {\n        for(let i = 0; i < $6ce24e5be95ebe48$export$fdde87911cbb71ae.libProxyInstances.length; i++)if ($6ce24e5be95ebe48$export$fdde87911cbb71ae.libProxyInstances[i] == libProxyInstance) return i;\n        throw new Error(\"libProxyInstance not in registry\");\n    }\n}\nfunction $6ce24e5be95ebe48$var$shallowEqual(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    // If the objects have different numbers of keys, they aren't equal\n    if (keys1.length !== keys2.length) return false;\n    // Check if all keys and their values are equal\n    return keys1.every((key)=>obj1[key] === obj2[key]);\n}\nfunction $6ce24e5be95ebe48$var$CompareImports(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    // they don't have to have the same number of imports, but every import that exists in both needs to match\n    for(let i = 0; i < keys1.length; i++){\n        const k = keys1[i];\n        if (obj2[k] && !$6ce24e5be95ebe48$var$shallowEqual(obj1[k], obj2[k])) return false;\n    }\n    for(let i = 0; i < keys2.length; i++){\n        const k = keys2[i];\n        if (obj1[k] && !$6ce24e5be95ebe48$var$shallowEqual(obj1[k], obj2[k])) return false;\n    }\n    return true;\n}\n\n});\nparcelRegister(\"6QEzV\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrEventQueueSend\", () => $4fc713716bd016cb$export$a2b31bb9f5a7d633);\n$parcel$export(module.exports, \"twrEventQueueReceive\", () => $4fc713716bd016cb$export$c59837088adec3b3);\n\nvar $dRr3I = parcelRequire(\"dRr3I\");\nconst $4fc713716bd016cb$var$eventMarker = 0x684610d6; // random positive 32 bit value\nconst $4fc713716bd016cb$var$mallocMarker = 0x51949385; // random positive 32 bit value\nclass $4fc713716bd016cb$export$a2b31bb9f5a7d633 {\n    circBuffer = new (0, $dRr3I.twrSharedCircularBuffer)();\n    //TOOD!! unify / rename TOnEventCallback = (eventID:number, ...args:number[])=>void;\n    postEvent(eventID, ...params) {\n        this.circBuffer.writeArray([\n            $4fc713716bd016cb$var$eventMarker,\n            eventID,\n            params.length,\n            ...params\n        ]);\n    }\n    postMalloc(mallocID, size) {\n        this.circBuffer.writeArray([\n            $4fc713716bd016cb$var$mallocMarker,\n            mallocID,\n            size\n        ]);\n    }\n}\nclass $4fc713716bd016cb$export$c59837088adec3b3 {\n    circBuffer;\n    pendingEventIDs;\n    pendingEventArgs;\n    ownerMod;\n    static unqiueInt = 1;\n    static onEventCallbacks = [];\n    constructor(ownerMod, eventQueueBuffer){\n        this.circBuffer = new (0, $dRr3I.twrSharedCircularBuffer)(eventQueueBuffer);\n        this.pendingEventIDs = [];\n        this.pendingEventArgs = [];\n        this.ownerMod = ownerMod;\n    }\n    readEventRemainder() {\n        const eventID = this.circBuffer.read();\n        if (eventID === undefined) throw new Error(\"internal error\");\n        const argLen = this.circBuffer.read();\n        if (argLen === undefined) throw new Error(\"internal error\");\n        const args = [];\n        for(let i = 0; i < argLen; i++){\n            const arg = this.circBuffer.read();\n            if (arg === undefined) throw new Error(\"internal error\");\n            args.push(arg);\n        }\n        if (!(eventID in $4fc713716bd016cb$export$c59837088adec3b3.onEventCallbacks)) throw new Error(\"internal error\");\n        this.pendingEventIDs.push(eventID);\n        this.pendingEventArgs.push(args);\n    }\n    readMallocRemainder() {\n        const mallocID = this.circBuffer.read();\n        if (mallocID === undefined) throw new Error(\"internal error\");\n        const size = this.circBuffer.read();\n        if (size === undefined) throw new Error(\"internal error\");\n        const ptr = this.ownerMod.wasmMem.malloc(size);\n        postMessage([\n            \"twrWasmModule\",\n            mallocID,\n            \"callCOkay\",\n            ptr\n        ]); // we are in the twrWasmModuleAsyncProxy main thread\n    }\n    readCommandRemainder(firstValue) {\n        if (firstValue === $4fc713716bd016cb$var$eventMarker) this.readEventRemainder();\n        else if (firstValue === $4fc713716bd016cb$var$mallocMarker) this.readMallocRemainder();\n        else throw new Error(\"internal error -- eventMarker or mallocMarker expected but not found\");\n    }\n    // called only if circBuffer not empty\n    readCommand() {\n        const firstValue = this.circBuffer.read();\n        this.readCommandRemainder(firstValue);\n    }\n    readWaitCommand() {\n        const firstValue = this.circBuffer.readWait();\n        this.readCommandRemainder(firstValue);\n    }\n    findEvent(filterEvent) {\n        if (filterEvent === undefined) return [\n            this.pendingEventIDs.shift(),\n            this.pendingEventArgs.shift(),\n            0\n        ];\n        const index = this.pendingEventIDs.indexOf(filterEvent);\n        if (index != -1) return [\n            this.pendingEventIDs.splice(index, 1)[0],\n            this.pendingEventArgs.splice(index, 1)[0],\n            index\n        ];\n        return [\n            undefined,\n            undefined,\n            undefined\n        ];\n    }\n    waitEvent(filterEvent) {\n        while(true){\n            // empty the queue\n            while(!this.circBuffer.isEmpty())this.readCommand();\n            // is our event in the queue?\n            const [eventID, args, index] = this.findEvent(filterEvent);\n            // execute callbacks up to this filterEvent (so as to call them in order)\n            // if filterEvent not found, index is undefined, which causes doCallbacks to execute all pendingEventIDs\n            // this call commented out so that the C events act like JavaScript events/callbacks (only called when main function finishes)\n            // to consider: allow callbacks in sync blocking functions like sleep (that use await in their implementations)\n            //this.doCallbacks(index); \n            if (eventID && args) return [\n                eventID,\n                args\n            ];\n            // wait for a new event\n            this.readWaitCommand();\n        }\n    }\n    doCallbacks(upToIndex) {\n        const end = upToIndex ? upToIndex : this.pendingEventIDs.length;\n        console.log(\"end\", end, upToIndex, this.pendingEventIDs.length);\n        for(let i = 0; i < end; i++){\n            const eventID = this.pendingEventIDs[i];\n            const args = this.pendingEventArgs[i];\n            const onEventCallback = $4fc713716bd016cb$export$c59837088adec3b3.onEventCallbacks[eventID];\n            if (onEventCallback) {\n                onEventCallback(eventID, ...args);\n                this.pendingEventIDs.splice(i, 1);\n                this.pendingEventArgs.splice(i, 1);\n            }\n        }\n    }\n    processIncomingCommands() {\n        while(!this.circBuffer.isEmpty())this.readCommand();\n        this.doCallbacks();\n    }\n    //see twrWasmModule.constructor - imports - twr_register_callback:this.registerCallback.bind(this), \n    //TODO!! This static method works for twrWasmModuleAsync, but when/if I implement message loop for twrWasmModule, this may need to change?\n    static registerCallback(funcName, onEventCallback) {\n        if (!onEventCallback) throw new Error(\"registerCallback called with a function name that is not exported from the module\");\n        this.onEventCallbacks[++this.unqiueInt] = onEventCallback;\n        return this.unqiueInt;\n    }\n    static registerEvent() {\n        this.onEventCallbacks[++this.unqiueInt] = undefined;\n        return this.unqiueInt;\n    }\n}\n\n});\nparcelRegister(\"dRr3I\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrSharedCircularBuffer\", () => $a17536f066adc156$export$a01cca24f011573a);\n//\n// This class implements a circular buffer that the main javascript thread can write to, \n// and a blocking WebWorker thread can read from.  This allows keyboard characters to be transferred from the main JS thread to a WebWorker thread.\n// The WebWorker can use the readWait() function to sleep, w/o participating in the normal \n// async callback dispatch method.  This allows a C program that is a single blocking loop to receive input from the primary javascript thread.\n// readWait() is used used when io_getc32() or io_mbgetstr() is called from a C function.\n//\nconst $a17536f066adc156$var$RDIDX = 0;\nconst $a17536f066adc156$var$WRIDX = 1;\nconst $a17536f066adc156$var$LEN = 256;\nclass $a17536f066adc156$export$a01cca24f011573a {\n    saBuffer;\n    f64Array;\n    i32Array;\n    constructor(sa){\n        if (typeof window !== \"undefined\") {\n            if (!crossOriginIsolated && !(window.location.protocol === \"file:\")) throw new Error(\"twrSharedCircularBuffer constructor, crossOriginIsolated=\" + crossOriginIsolated + \". See SharedArrayBuffer docs.\");\n        }\n        if (sa) this.saBuffer = sa;\n        else this.saBuffer = new SharedArrayBuffer($a17536f066adc156$var$LEN * 8 + 4 + 4); // LEN Float64's + RDIDX and WRIDX (both Int32)\n        this.f64Array = new Float64Array(this.saBuffer, 8);\n        this.i32Array = new Int32Array(this.saBuffer, 0, 2);\n        this.i32Array[$a17536f066adc156$var$RDIDX] = 0;\n        this.i32Array[$a17536f066adc156$var$WRIDX] = 0;\n    }\n    silentWrite(n) {\n        let i = this.i32Array[$a17536f066adc156$var$WRIDX];\n        this.f64Array[i] = n;\n        i++;\n        if (i == $a17536f066adc156$var$LEN) i = 0;\n        this.i32Array[$a17536f066adc156$var$WRIDX] = i;\n    }\n    writeArray(arr) {\n        if (arr.length > 0) {\n            for(let i = 0; i < arr.length; i++)this.silentWrite(arr[i]);\n            Atomics.notify(this.i32Array, $a17536f066adc156$var$WRIDX);\n        }\n    }\n    write(n) {\n        this.silentWrite(n);\n        Atomics.notify(this.i32Array, $a17536f066adc156$var$WRIDX);\n    }\n    read() {\n        if (!this.isEmpty()) {\n            let i = this.i32Array[$a17536f066adc156$var$RDIDX];\n            let n = this.f64Array[i];\n            i++;\n            if (i == $a17536f066adc156$var$LEN) i = 0;\n            this.i32Array[$a17536f066adc156$var$RDIDX] = i;\n            return n;\n        } else return undefined;\n    }\n    readWait() {\n        let retVal = this.read();\n        if (retVal !== undefined) return retVal;\n        const rdptr = this.i32Array[$a17536f066adc156$var$RDIDX];\n        // verifies that a shared memory location still contains a given value and if so sleeps until notified.\n        Atomics.wait(this.i32Array, $a17536f066adc156$var$WRIDX, rdptr);\n        retVal = this.read();\n        if (retVal === undefined) throw new Error(\"internal error\");\n        return retVal;\n    }\n    isEmpty() {\n        return this.i32Array[$a17536f066adc156$var$RDIDX] == this.i32Array[$a17536f066adc156$var$WRIDX];\n    }\n}\n\n});\n\n\n\n\n\nparcelRegister(\"7KBfz\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmCall\", () => $5a49b95e459921ed$export$adadb990ab47e6f0);\n$parcel$export(module.exports, \"twrWasmModuleCallAsync\", () => $5a49b95e459921ed$export$9d4f0c051dfa35a8);\n/*\n    * callC takes an array where:\n    * the first entry is the name of the C function in the Wasm module to call (must be exported, typically via the --export clang flag)\n    * and the next entries are a variable number of arguments to pass to the C function, of type\n    * number - converted to int32 or float64 as appropriate\n   * bigint - converted to int64\n    * string - converted to a an index (ptr) into a module Memory returned via stringToMem()\n    * ArrayBuffer - the array is loaded into module memory via putArrayBuffer\n    */ class $5a49b95e459921ed$export$adadb990ab47e6f0 {\n    exports;\n    mem;\n    constructor(mem, exports){\n        if (!exports) throw new Error(\"WebAssembly.Exports undefined\");\n        this.exports = exports;\n        this.mem = mem;\n    }\n    callCImpl(fname, cparams = []) {\n        if (!this.exports[fname]) throw new Error(\"callC: function '\" + fname + \"' not in export table.  Use --export wasm-ld flag.\");\n        const f = this.exports[fname];\n        let cr = f(...cparams);\n        return cr;\n    }\n    callC(params) {\n        const cparams = this.preCallC(params);\n        let retval = this.callCImpl(params[0], cparams);\n        this.postCallC(cparams, params);\n        return retval;\n    }\n    // convert an array of arguments to numbers by stuffing contents into malloc'd Wasm memory\n    preCallC(params) {\n        if (!(params.constructor === Array)) throw new Error(\"callC: params must be array, first arg is function name\");\n        if (params.length == 0) throw new Error(\"callC: missing function name\");\n        let cparams = [];\n        let ci = 0;\n        for(let i = 1; i < params.length; i++){\n            const p = params[i];\n            switch(typeof p){\n                case \"number\":\n                case \"bigint\":\n                    cparams[ci++] = p;\n                    break;\n                case \"string\":\n                    cparams[ci++] = this.mem.putString(p);\n                    break;\n                case \"object\":\n                    if (p instanceof URL) throw new Error(\"URL arg in callC is no longer supported directly.  use module.fetchAndPutURL\");\n                    else if (p instanceof ArrayBuffer) {\n                        const r = this.mem.putArrayBuffer(p);\n                        cparams[ci++] = r; // mem index\n                        break;\n                    }\n                default:\n                    throw new Error(\"callC: invalid object type passed in\");\n            }\n        }\n        return cparams;\n    }\n    // free the mallocs; copy array buffer data from malloc back to arraybuffer\n    postCallC(cparams, params) {\n        let ci = 0;\n        for(let i = 1; i < params.length; i++){\n            const p = params[i];\n            switch(typeof p){\n                case \"number\":\n                case \"bigint\":\n                    ci++;\n                    break;\n                case \"string\":\n                    this.callCImpl(\"free\", [\n                        cparams[ci]\n                    ]);\n                    ci++;\n                    break;\n                case \"object\":\n                    if (p instanceof URL) //this.callCImpl('free',[cparams[ci]])\n                    //ci=ci+2;\n                    throw new Error(\"internal error\");\n                    else if (p instanceof ArrayBuffer) {\n                        const u8 = new Uint8Array(p);\n                        const idx = cparams[ci];\n                        for(let j = 0; j < u8.length; j++)u8[j] = this.mem.mem8[idx + j];\n                        this.callCImpl(\"free\", [\n                            idx\n                        ]);\n                        ci++;\n                        break;\n                    } else throw new Error(\"postCallC: internal error A\");\n                default:\n                    throw new Error(\"postCallC: internal error B\");\n            }\n        }\n        return cparams;\n    }\n}\nclass $5a49b95e459921ed$export$9d4f0c051dfa35a8 {\n    mem;\n    callCImpl;\n    constructor(mem, callCImpl){\n        this.mem = mem;\n        this.callCImpl = callCImpl;\n    }\n    // convert an array of arguments to numbers by stuffing contents into malloc'd Wasm memory\n    async preCallC(params) {\n        if (!(params.constructor === Array)) throw new Error(\"callC: params must be array, first arg is function name\");\n        if (params.length == 0) throw new Error(\"callC: missing function name\");\n        let cparams = [];\n        let ci = 0;\n        for(let i = 1; i < params.length; i++){\n            const p = params[i];\n            switch(typeof p){\n                case \"number\":\n                case \"bigint\":\n                    cparams[ci++] = p;\n                    break;\n                case \"string\":\n                    cparams[ci++] = await this.mem.putString(p);\n                    break;\n                case \"object\":\n                    if (p instanceof URL) throw new Error(\"URL arg in callC is no longer supported directly.  use module.fetchAndPutURL\");\n                    else if (p instanceof ArrayBuffer) {\n                        const r = await this.mem.putArrayBuffer(p);\n                        cparams[ci++] = r; // mem index\n                        break;\n                    }\n                default:\n                    throw new Error(\"callC: invalid object type passed in\");\n            }\n        }\n        return cparams;\n    }\n    // free the mallocs; copy array buffer data from malloc back to arraybuffer\n    async postCallC(cparams, params) {\n        let ci = 0;\n        for(let i = 1; i < params.length; i++){\n            const p = params[i];\n            switch(typeof p){\n                case \"number\":\n                case \"bigint\":\n                    ci++;\n                    break;\n                case \"string\":\n                    await this.callCImpl(\"free\", [\n                        cparams[ci]\n                    ]);\n                    ci++;\n                    break;\n                case \"object\":\n                    if (p instanceof URL) //await this.callCImpl('free',[cparams[ci]])\n                    //ci=ci+2;\n                    throw new Error(\"internal error\");\n                    else if (p instanceof ArrayBuffer) {\n                        const u8 = new Uint8Array(p);\n                        const idx = cparams[ci];\n                        for(let j = 0; j < u8.length; j++)u8[j] = this.mem.mem8[idx + j]; // mem8 is a Uint8Array view of the module's WebAssembly Memory\n                        await this.callCImpl(\"free\", [\n                            idx\n                        ]);\n                        ci++;\n                        break;\n                    } else throw new Error(\"postCallC: internal error A\");\n                default:\n                    throw new Error(\"postCallC: internal error B\");\n            }\n        }\n        return cparams;\n    }\n}\n\n});\n\n\nvar $2d37bf399d1bbd15$exports = {};\n\n$parcel$export($2d37bf399d1bbd15$exports, \"twrWasmModuleAsyncProxy\", () => $2d37bf399d1bbd15$export$a5f3f3f0bd96bb23);\n\nvar $jxXdl = parcelRequire(\"jxXdl\");\n\nvar $9lAov = parcelRequire(\"9lAov\");\n\nvar $6QEzV = parcelRequire(\"6QEzV\");\nlet $2d37bf399d1bbd15$var$mod;\nself.onmessage = function(e) {\n    //console.log('twrworker.js: message received from main script: '+e.data);\n    const [msgType, ...params] = e.data;\n    if (msgType === \"startup\") {\n        const [startMsg] = params;\n        //console.log(\"Worker startup params:\",params);\n        $2d37bf399d1bbd15$var$mod = new $2d37bf399d1bbd15$export$a5f3f3f0bd96bb23(startMsg.allProxyParams);\n        $2d37bf399d1bbd15$var$mod.loadWasm(startMsg.urlToLoad).then(()=>{\n            postMessage([\n                \"twrWasmModule\",\n                undefined,\n                \"startupOkay\"\n            ]);\n        }).catch((ex)=>{\n            console.log(\".catch: \", ex);\n            postMessage([\n                \"twrWasmModule\",\n                undefined,\n                \"startupFail\",\n                ex\n            ]);\n        });\n    } else if (msgType === \"callC\") {\n        const [callcID, funcName, cparams] = params;\n        try {\n            const rc = $2d37bf399d1bbd15$var$mod.wasmCall.callCImpl(funcName, cparams);\n            postMessage([\n                \"twrWasmModule\",\n                callcID,\n                \"callCOkay\",\n                rc\n            ]);\n        } catch (ex) {\n            console.log(\"exception in callC in 'twrmodasyncproxy.js': \\n\", params);\n            console.log(ex);\n            postMessage([\n                \"twrWasmModule\",\n                callcID,\n                \"callCFail\",\n                ex\n            ]);\n        }\n    } else if (msgType === \"tickleEventLoop\") $2d37bf399d1bbd15$var$mod.eventQueueReceive.processIncomingCommands();\n    else console.log(\"twrmodasyncproxy.js: unknown message: \" + e);\n};\nclass $2d37bf399d1bbd15$export$a5f3f3f0bd96bb23 extends (0, $jxXdl.twrWasmBase) {\n    allProxyParams;\n    ioNamesToID;\n    libimports = {};\n    eventQueueReceive;\n    constructor(allProxyParams){\n        super();\n        this.allProxyParams = allProxyParams;\n        this.ioNamesToID = allProxyParams.ioNamesToID;\n        this.eventQueueReceive = new (0, $6QEzV.twrEventQueueReceive)(this, allProxyParams.eventQueueBuffer);\n    }\n    async loadWasm(pathToLoad) {\n        // create twrLibraryProxy versions for each twrLibrary\n        for(let i = 0; i < this.allProxyParams.libProxyParams.length; i++){\n            const params = this.allProxyParams.libProxyParams[i];\n            const lib = new (0, $9lAov.twrLibraryProxy)(params);\n            // TODO!! This registry isn't actually being used (yet)?\n            (0, $9lAov.twrLibraryInstanceProxyRegistry).registerProxy(lib);\n            this.libimports = {\n                ...this.libimports,\n                ...await lib.getProxyImports(this)\n            };\n        }\n        const twrConGetIDFromNameImpl = (nameIdx)=>{\n            const name = this.wasmMem.getString(nameIdx);\n            const id = this.ioNamesToID[name];\n            if (id) return id;\n            else return -1;\n        };\n        const imports = {\n            ...this.libimports,\n            twrConGetIDFromName: twrConGetIDFromNameImpl\n        };\n        await super.loadWasm(pathToLoad, imports);\n        // SharedArrayBuffer required for twrWasmModuleAsync/twrWasmModuleAsyncProxy\n        // instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error\n        // (don't check for instanceof SharedArrayBuffer, since it can cause an runtime error when SharedArrayBuffer does not exist)\n        if (this.wasmMem.memory.buffer instanceof ArrayBuffer) throw new Error(\"twrWasmModuleAsync requires shared Memory. Add wasm-ld --shared-memory --no-check-features (see docs)\");\n        else postMessage([\n            \"twrWasmModule\",\n            undefined,\n            \"setmemory\",\n            this.wasmMem.memory\n        ]);\n        // init C runtime\n        const init = this.exports.twr_wasm_init;\n        init(this.ioNamesToID.stdio, this.ioNamesToID.stderr, this.ioNamesToID.std2d == undefined ? -1 : this.ioNamesToID.std2d, this.wasmMem.mem8.length);\n    }\n}\n\n\n//# sourceMappingURL=twrmodasyncproxy.205483dd.js.map\n","import { twrWasmMemory } from './twrwasmmem.js';\nimport { twrWasmCall } from \"./twrwasmcall.js\";\nimport { twrEventQueueReceive } from './twreventqueue.js';\nexport class twrWasmBase {\n    exports;\n    wasmMem;\n    wasmCall;\n    callC;\n    /*********************************************************************/\n    getImports(imports) {\n        return {\n            ...imports,\n            twr_register_callback: this.registerCallback.bind(this)\n        };\n    }\n    async loadWasm(pathToLoad, imports) {\n        let response;\n        try {\n            response = await fetch(pathToLoad);\n            if (!response.ok)\n                throw new Error(\"Fetch response error on file '\" + pathToLoad + \"'\\n\" + response.statusText);\n        }\n        catch (err) {\n            console.log('loadWasm() failed to fetch: ' + pathToLoad);\n            throw err;\n        }\n        let instance;\n        try {\n            const wasmBytes = await response.arrayBuffer();\n            instance = await WebAssembly.instantiate(wasmBytes, { env: this.getImports(imports) });\n        }\n        catch (err) {\n            console.log('Wasm instantiate error: ' + err + (err.stack ? \"\\n\" + err.stack : ''));\n            throw err;\n        }\n        if (this.exports)\n            throw new Error(\"Unexpected error -- this.exports already set\");\n        if (!instance.instance.exports)\n            throw new Error(\"Unexpected error - undefined instance.exports\");\n        this.exports = instance.instance.exports;\n        const memory = this.exports.memory;\n        if (!memory)\n            throw new Error(\"Unexpected error - undefined exports.memory\");\n        const malloc = this.exports.malloc;\n        const free = this.exports.free;\n        this.wasmMem = new twrWasmMemory(memory, free, malloc);\n        this.wasmCall = new twrWasmCall(this.wasmMem, this.exports);\n        this.callC = this.wasmCall.callC.bind(this.wasmCall);\n    }\n    //see twrWasmModule.constructor - imports - twr_register_callback:this.registerCallback.bind(this), \n    registerCallback(funcNameIdx) {\n        const funcName = this.wasmMem.getString(funcNameIdx);\n        const onEventCallback = this.exports[funcName];\n        return twrEventQueueReceive.registerCallback(funcName, onEventCallback);\n    }\n}\n//# sourceMappingURL=twrwasmbase.js.map","import {IWasmMemory, twrWasmMemory} from './twrwasmmem.js'\nimport {twrWasmCall} from \"./twrwasmcall.js\"\nimport { twrEventQueueReceive } from './twreventqueue.js';\n\n\n// twrWasmBase is the common code for any twrWasmModuleXXX that loads a .wasm file into its thread.  \n// This is twrWasmModule and twrWasmModuleAsyncProxy.\n// twrWasmBase implements loadWasm (which is passed an import list), as well as containing the classes \n// twrWasmMemory (to access wasm memory) and twrWasmCall (to call wasm exports)\n\nexport type TOnEventCallback = (eventID:number, ...args:number[])=>void;\n\nexport class twrWasmBase {\n   exports!:WebAssembly.Exports;\n   wasmMem!: IWasmMemory;\n   wasmCall!: twrWasmCall;\n   callC!:twrWasmCall[\"callC\"];\n\n   /*********************************************************************/\n\n   private getImports(imports:WebAssembly.ModuleImports) {\n      return {\n         ...imports, \n         twr_register_callback:this.registerCallback.bind(this)\n      }\n   }\n\n   async loadWasm(pathToLoad:string, imports:WebAssembly.ModuleImports) {\n      let response;\n      try {\n         response=await fetch(pathToLoad);\n         if (!response.ok) throw new Error(\"Fetch response error on file '\"+pathToLoad+\"'\\n\"+response.statusText);\n      } catch(err:any) {\n         console.log('loadWasm() failed to fetch: '+pathToLoad);\n         throw err;\n      }\n\n      let instance;\n      try {\n         const wasmBytes = await response.arrayBuffer();\n         instance = await WebAssembly.instantiate(wasmBytes, {env: this.getImports(imports)});\n      } catch(err:any) {\n         console.log('Wasm instantiate error: ' + err + (err.stack ? \"\\n\" + err.stack : ''));\n         throw err;\n      }\n\n      if (this.exports) throw new Error (\"Unexpected error -- this.exports already set\");\n      if (!instance.instance.exports) throw new Error(\"Unexpected error - undefined instance.exports\");\n      this.exports=instance.instance.exports;\n\n      const memory=this.exports.memory as WebAssembly.Memory;\n      if (!memory) throw new Error(\"Unexpected error - undefined exports.memory\");\n\n      const malloc=this.exports.malloc as (size:number)=>number;\n      const free=this.exports.free as (size:number)=>number;\n      this.wasmMem=new twrWasmMemory(memory, free, malloc);\n      this.wasmCall=new twrWasmCall(this.wasmMem, this.exports);\n      this.callC=this.wasmCall.callC.bind(this.wasmCall);\n   }\n\n   \n   //see twrWasmModule.constructor - imports - twr_register_callback:this.registerCallback.bind(this), \n   registerCallback(funcNameIdx:number) {\n      const funcName=this.wasmMem.getString(funcNameIdx);\n      const onEventCallback = this.exports[funcName] as TOnEventCallback;\n      return twrEventQueueReceive.registerCallback(funcName, onEventCallback);\n   }\n\n}\n","import { codePageUTF8, codePage1252, codePageASCII, to1252, toASCII } from \"./twrliblocale.js\";\n/**********************************************************************************************/\n/**********************************************************************************************/\n/**********************************************************************************************/\n/**********************************************************************************************/\nexport class twrWasmMemoryBase {\n    memory;\n    mem8;\n    mem16;\n    mem32;\n    memF;\n    memD;\n    constructor(memory) {\n        this.memory = memory;\n        this.mem8 = new Uint8Array(memory.buffer);\n        this.mem16 = new Uint16Array(memory.buffer);\n        this.mem32 = new Uint32Array(memory.buffer);\n        this.memF = new Float32Array(memory.buffer);\n        this.memD = new Float64Array(memory.buffer);\n    }\n    // convert a Javascript string into byte sequence that encodes the string using UTF8, or the requested codePage\n    stringToU8(sin, codePage = codePageUTF8) {\n        let ru8;\n        if (codePage == codePageUTF8) {\n            const encoder = new TextEncoder();\n            ru8 = encoder.encode(sin);\n        }\n        else if (codePage == codePage1252) {\n            ru8 = new Uint8Array(sin.length);\n            for (let i = 0; i < sin.length; i++) {\n                ru8[i] = to1252(sin[i]);\n            }\n        }\n        else if (codePage == codePageASCII) {\n            ru8 = new Uint8Array(sin.length);\n            for (let i = 0; i < sin.length; i++) {\n                const r = toASCII(sin[i]);\n                ru8[i] = r;\n            }\n        }\n        else {\n            throw new Error(\"unknown codePage: \" + codePage);\n        }\n        return ru8;\n    }\n    // copy a string into existing buffer in the webassembly module memory as utf8 (or specified codePage)\n    // result always null terminated\n    copyString(buffer, buffer_size, sin, codePage = codePageUTF8) {\n        if (buffer_size < 1)\n            throw new Error(\"copyString buffer_size must have length > 0 (room for terminating 0): \" + buffer_size);\n        const ru8 = this.stringToU8(sin, codePage);\n        let i;\n        for (i = 0; i < ru8.length && i < buffer_size - 1; i++)\n            this.mem8[buffer + i] = ru8[i];\n        this.mem8[buffer + i] = 0;\n    }\n    getLong(idx) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx)\n            throw new Error(\"getLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length)\n            throw new Error(\"invalid index passed to getLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        const long = this.mem32[idx32];\n        return long;\n    }\n    setLong(idx, value) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx)\n            throw new Error(\"setLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length - 1)\n            throw new Error(\"invalid index passed to setLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        this.mem32[idx32] = value;\n    }\n    getDouble(idx) {\n        const idx64 = Math.floor(idx / 8);\n        if (idx64 * 8 != idx)\n            throw new Error(\"getLong passed non Float64 aligned address\");\n        const long = this.memD[idx64];\n        return long;\n    }\n    setDouble(idx, value) {\n        const idx64 = Math.floor(idx / 8);\n        if (idx64 * 8 != idx)\n            throw new Error(\"setDouble passed non Float64 aligned address\");\n        this.memD[idx64] = value;\n    }\n    getShort(idx) {\n        if (idx < 0 || idx >= this.mem8.length)\n            throw new Error(\"invalid index passed to getShort: \" + idx);\n        const short = this.mem8[idx] + this.mem8[idx + 1] * 256;\n        return short;\n    }\n    // get a string out of module memory\n    // null terminated, up until max of (optional) len bytes\n    // len may be longer than the number of characters, if characters are utf-8 encoded\n    getString(strIndex, len, codePage = codePageUTF8) {\n        if (strIndex < 0 || strIndex >= this.mem8.length)\n            throw new Error(\"invalid strIndex passed to getString: \" + strIndex);\n        if (len) {\n            if (len < 0 || len + strIndex > this.mem8.length)\n                throw new Error(\"invalid len  passed to getString: \" + len);\n        }\n        else {\n            len = this.mem8.indexOf(0, strIndex);\n            if (len == -1)\n                throw new Error(\"string is not null terminated\");\n            len = len - strIndex;\n        }\n        let encodeFormat;\n        if (codePage == codePageUTF8)\n            encodeFormat = 'utf-8';\n        else if (codePage == codePage1252)\n            encodeFormat = 'windows-1252';\n        else\n            throw new Error(\"Unsupported codePage: \" + codePage);\n        const td = new TextDecoder(encodeFormat);\n        const u8todecode = new Uint8Array(this.mem8.buffer, strIndex, len);\n        // chrome throws exception when using TextDecoder on SharedArrayBuffer\n        // BUT, instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error, so don't check directly\n        if (this.mem8.buffer instanceof ArrayBuffer) {\n            const sout = td.decode(u8todecode);\n            return sout;\n        }\n        else { // must be SharedArrayBuffer\n            const regularArrayBuffer = new ArrayBuffer(len);\n            const regularUint8Array = new Uint8Array(regularArrayBuffer);\n            regularUint8Array.set(u8todecode);\n            const sout = td.decode(regularUint8Array);\n            return sout;\n        }\n    }\n    // get a byte array out of module memory when passed in index to [size, dataptr]\n    getU8Arr(idx) {\n        if (idx < 0 || idx >= this.mem8.length)\n            throw new Error(\"invalid index passed to getU8: \" + idx);\n        const rv = new Uint32Array((this.mem8.slice(idx, idx + 8)).buffer);\n        let size = rv[0];\n        let dataptr = rv[1];\n        if (dataptr < 0 || dataptr >= (this.mem8.length))\n            throw new Error(\"invalid idx.dataptr passed to getU8\");\n        if (size < 0 || size > (this.mem8.length - dataptr))\n            throw new Error(\"invalid idx.size passed to  getU8\");\n        const u8 = this.mem8.slice(dataptr, dataptr + size);\n        return u8;\n    }\n    // get a int32 array out of module memory when passed in index to [size, dataptr]\n    getU32Arr(idx) {\n        if (idx < 0 || idx >= this.mem8.length)\n            throw new Error(\"invalid index passed to getU32: \" + idx);\n        const rv = new Uint32Array((this.mem8.slice(idx, idx + 8)).buffer);\n        let size = rv[0];\n        let dataptr = rv[1];\n        if (dataptr < 0 || dataptr >= (this.mem8.length))\n            throw new Error(\"invalid idx.dataptr passed to getU32\");\n        if (size < 0 || size > (this.mem8.length - dataptr))\n            throw new Error(\"invalid idx.size passed to  getU32\");\n        if (size % 4 != 0)\n            throw new Error(\"idx.size is not an integer number of 32 bit words\");\n        const u32 = new Uint32Array((this.mem8.slice(dataptr, dataptr + size)).buffer);\n        return u32;\n    }\n}\n/**********************************************************************************************/\n/**********************************************************************************************/\n/**********************************************************************************************/\n/**********************************************************************************************/\nexport class twrWasmMemory extends twrWasmMemoryBase {\n    malloc;\n    free;\n    constructor(memory, free, malloc) {\n        super(memory);\n        this.free = free;\n        this.malloc = malloc;\n    }\n    // allocate and copy a string into the webassembly module memory as utf8 (or the specified codePage)\n    putString(sin, codePage = codePageUTF8) {\n        const ru8 = this.stringToU8(sin, codePage);\n        const strIndex = this.malloc(ru8.length + 1);\n        this.mem8.set(ru8, strIndex);\n        this.mem8[strIndex + ru8.length] = 0;\n        return strIndex;\n    }\n    // allocate and copy a Uint8Array into Wasm mod memory\n    putU8(u8a) {\n        let dest = this.malloc(u8a.length);\n        this.mem8.set(u8a, dest);\n        return dest;\n    }\n    putArrayBuffer(ab) {\n        const u8 = new Uint8Array(ab);\n        return this.putU8(u8);\n    }\n}\n/**********************************************************************************************/\n/**********************************************************************************************/\n/**********************************************************************************************/\n/**********************************************************************************************/\nexport class twrWasmMemoryAsync extends twrWasmMemoryBase {\n    malloc;\n    free;\n    constructor(memory, mallocImpl, callCImpl) {\n        super(memory);\n        this.free = (size) => {\n            return callCImpl(\"free\", [size]);\n        };\n        this.malloc = mallocImpl;\n    }\n    // allocate and copy a string into the webassembly module memory as utf8 (or the specified codePage)\n    async putString(sin, codePage = codePageUTF8) {\n        const ru8 = this.stringToU8(sin, codePage);\n        const strIndex = await this.malloc(ru8.length + 1);\n        this.mem8.set(ru8, strIndex);\n        this.mem8[strIndex + ru8.length] = 0;\n        return strIndex;\n    }\n    // allocate and copy a Uint8Array into Wasm mod memory\n    async putU8(u8a) {\n        let dest = await this.malloc(u8a.length);\n        this.mem8.set(u8a, dest);\n        return dest;\n    }\n    async putArrayBuffer(ab) {\n        const u8 = new Uint8Array(ab);\n        return this.putU8(u8);\n    }\n}\n//# sourceMappingURL=twrwasmmem.js.map","import {codePageUTF8, codePage1252, codePageASCII, to1252, toASCII} from \"./twrliblocale.js\"\n\n// IWasmMemoryBase operate on shared memory, so they will function in any WasmModule \nexport interface IWasmMemoryBase {\n   memory:WebAssembly.Memory;\n   mem8:Uint8Array;\n   mem16:Uint16Array;\n   mem32:Uint32Array;\n   memF:Float32Array;\n   memD:Float64Array;\n   stringToU8(sin:string, codePage?:number):Uint8Array;\n   copyString(buffer:number, buffer_size:number, sin:string, codePage?:number):void;\n   getLong(idx:number): number;\n   setLong(idx:number, value:number):void;\n   getDouble(idx:number): number;\n   setDouble(idx:number, value:number):void;\n   getShort(idx:number): number;\n   getString(strIndex:number, len?:number, codePage?:number): string;\n   getU8Arr(idx:number): Uint8Array;\n   getU32Arr(idx:number): Uint32Array;\n}\n\n// IWasmMemory does not support await, and so will only work in a thread that has the module loaded\n// That would be twrWasmModule, twrWasmModuleAsyncProxy\nexport interface IWasmMemory extends IWasmMemoryBase {\n   malloc:(size:number)=>number;\n   free:(size:number)=>void;\n   putString(sin:string, codePage?:number):number;\n   putU8(u8a:Uint8Array):number;\n   putArrayBuffer(ab:ArrayBuffer):number;\n}\n\n// IWasmMemoryAsync must be used from an async function since await is needed\nexport interface IWasmMemoryAsync extends IWasmMemoryBase {\n   malloc:(size:number)=>Promise<number>;\n   free:(size:number)=>Promise<void>;\n   putString(sin:string, codePage?:number):Promise<number>;\n   putU8(u8a:Uint8Array):Promise<number>;\n   putArrayBuffer(ab:ArrayBuffer):Promise<number>;\n}\n\n/**********************************************************************************************/\n/**********************************************************************************************/\n/**********************************************************************************************/\n/**********************************************************************************************/\n\nexport class twrWasmMemoryBase implements IWasmMemoryBase {\n   memory:WebAssembly.Memory;\n   mem8:Uint8Array;\n   mem16:Uint16Array;\n   mem32:Uint32Array;\n   memF:Float32Array;\n   memD:Float64Array;\n\n   constructor(memory:WebAssembly.Memory) {\n      this.memory=memory;\n      this.mem8 = new Uint8Array(memory.buffer);\n      this.mem16 = new Uint16Array(memory.buffer);\n      this.mem32 = new Uint32Array(memory.buffer);\n      this.memF = new Float32Array(memory.buffer);\n      this.memD = new Float64Array(memory.buffer);\n   }\n\n   // convert a Javascript string into byte sequence that encodes the string using UTF8, or the requested codePage\n   stringToU8(sin:string, codePage=codePageUTF8) {\n\n      let ru8:Uint8Array;\n      if (codePage==codePageUTF8) {\n         const encoder = new TextEncoder();\n         ru8=encoder.encode(sin);\n      }\n      else if (codePage==codePage1252) {\n         ru8=new Uint8Array(sin.length);\n         for (let i = 0; i < sin.length; i++) {\n            ru8[i]=to1252(sin[i]);\n          }\n      }\n      else if (codePage==codePageASCII) {\n         ru8=new Uint8Array(sin.length);\n         for (let i = 0; i < sin.length; i++) {\n            const r=toASCII(sin[i]);\n            ru8[i]=r;\n          }\n      }\n      else {\n         throw new Error(\"unknown codePage: \"+codePage);\n      }\n\n      return ru8;\n   }\n\n   // copy a string into existing buffer in the webassembly module memory as utf8 (or specified codePage)\n   // result always null terminated\n   copyString(buffer:number, buffer_size:number, sin:string, codePage=codePageUTF8):void {\n      if (buffer_size<1) throw new Error(\"copyString buffer_size must have length > 0 (room for terminating 0): \"+buffer_size);\n      \n      const ru8=this.stringToU8(sin, codePage);\n\n      let i;\n      for (i=0; i<ru8.length && i<buffer_size-1; i++)\n         this.mem8[buffer+i]=ru8[i];\n\n      this.mem8[buffer+i]=0;\n   }\n\n   getLong(idx:number): number {\n      const idx32=Math.floor(idx/4);\n      if (idx32*4!=idx) throw new Error(\"getLong passed non long aligned address\")\n      if (idx32<0 || idx32 >= this.mem32.length) throw new Error(\"invalid index passed to getLong: \"+idx+\", this.mem32.length: \"+this.mem32.length);\n      const long:number = this.mem32[idx32];\n      return long;\n   }\n   \n   setLong(idx:number, value:number) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx)\n            throw new Error(\"setLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length-1)\n            throw new Error(\"invalid index passed to setLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        this.mem32[idx32]=value;\n    }\n\n   getDouble(idx:number): number {\n      const idx64=Math.floor(idx/8);\n      if (idx64*8!=idx) throw new Error(\"getLong passed non Float64 aligned address\")\n      const long:number = this.memD[idx64];\n      return long;\n   }\n\n   setDouble(idx:number, value:number) {\n      const idx64=Math.floor(idx/8);\n      if (idx64*8!=idx) throw new Error(\"setDouble passed non Float64 aligned address\")\n      this.memD[idx64]=value;\n   }\n\n   getShort(idx:number): number {\n      if (idx<0 || idx>= this.mem8.length) throw new Error(\"invalid index passed to getShort: \"+idx);\n      const short:number = this.mem8[idx]+this.mem8[idx+1]*256;\n      return short;\n   }\n\n   // get a string out of module memory\n   // null terminated, up until max of (optional) len bytes\n   // len may be longer than the number of characters, if characters are utf-8 encoded\n   getString(strIndex:number, len?:number, codePage=codePageUTF8): string {\n      if (strIndex<0 || strIndex >= this.mem8.length) throw new Error(\"invalid strIndex passed to getString: \"+strIndex);\n\n      if (len) {\n         if (len<0 || len+strIndex > this.mem8.length) throw new Error(\"invalid len  passed to getString: \"+len);\n      }\n      else {\n         len = this.mem8.indexOf(0, strIndex);\n         if (len==-1) throw new Error(\"string is not null terminated\");\n         len=len-strIndex;\n      }\n\n      let encodeFormat;\n      if (codePage==codePageUTF8) encodeFormat='utf-8';\n      else if (codePage==codePage1252) encodeFormat='windows-1252';\n      else throw new Error(\"Unsupported codePage: \"+codePage);\n\n      const td=new TextDecoder(encodeFormat);\n      const u8todecode=new Uint8Array(this.mem8.buffer, strIndex, len);\n\n   // chrome throws exception when using TextDecoder on SharedArrayBuffer\n   // BUT, instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error, so don't check directly\n      if (this.mem8.buffer instanceof ArrayBuffer) { \n         const sout:string = td.decode(u8todecode);\n         return sout;\n      }\n      else {  // must be SharedArrayBuffer\n         const regularArrayBuffer = new ArrayBuffer(len);\n         const regularUint8Array = new Uint8Array(regularArrayBuffer);\n         regularUint8Array.set(u8todecode);\n         const sout:string = td.decode(regularUint8Array);\n         return sout;\n      }\n   }\n\n   // get a byte array out of module memory when passed in index to [size, dataptr]\n   getU8Arr(idx:number): Uint8Array {\n      if (idx<0 || idx>= this.mem8.length) throw new Error(\"invalid index passed to getU8: \"+idx);\n\n      const rv = new Uint32Array( (this.mem8.slice(idx, idx+8)).buffer );\n      let size:number=rv[0];\n      let dataptr:number=rv[1];\n\n      if (dataptr <0 || dataptr >= (this.mem8.length)) throw new Error(\"invalid idx.dataptr passed to getU8\")\n      if (size <0 || size > (this.mem8.length-dataptr)) throw new Error(\"invalid idx.size passed to  getU8\")\n\n      const u8=this.mem8.slice(dataptr, dataptr+size);\n      return u8;\n   }\n\n   // get a int32 array out of module memory when passed in index to [size, dataptr]\n   getU32Arr(idx:number): Uint32Array {\n      if (idx<0 || idx>= this.mem8.length) throw new Error(\"invalid index passed to getU32: \"+idx);\n\n      const rv = new Uint32Array( (this.mem8.slice(idx, idx+8)).buffer );\n      let size:number=rv[0];\n      let dataptr:number=rv[1];\n\n      if (dataptr <0 || dataptr >= (this.mem8.length)) throw new Error(\"invalid idx.dataptr passed to getU32\")\n      if (size <0 || size > (this.mem8.length-dataptr)) throw new Error(\"invalid idx.size passed to  getU32\")\n\n      if (size%4!=0) throw new Error(\"idx.size is not an integer number of 32 bit words\");\n\n      const u32 = new Uint32Array( (this.mem8.slice(dataptr, dataptr+size)).buffer );\n      return u32;\n   }\n}\n\n/**********************************************************************************************/\n/**********************************************************************************************/\n/**********************************************************************************************/\n/**********************************************************************************************/\n\nexport class twrWasmMemory extends twrWasmMemoryBase implements IWasmMemory {\n   malloc:(size:number)=>number;\n   free:(size:number)=>void;\n\n   constructor(memory:WebAssembly.Memory, free:(size:number)=>void, malloc:(size:number)=>number) {\n      super(memory);\n      this.free=free;\n      this.malloc=malloc;\n   }\n\n   // allocate and copy a string into the webassembly module memory as utf8 (or the specified codePage)\n   putString(sin:string, codePage=codePageUTF8) {\n      const ru8=this.stringToU8(sin, codePage);\n      const strIndex:number=this.malloc(ru8.length+1);\n      this.mem8.set(ru8, strIndex);\n      this.mem8[strIndex+ru8.length]=0;\n\n      return strIndex;\n   }\n\n   // allocate and copy a Uint8Array into Wasm mod memory\n   putU8(u8a:Uint8Array) {\n      let dest:number=this.malloc(u8a.length); \n      this.mem8.set(u8a, dest);\n      return dest;\n   }\n\n   putArrayBuffer(ab:ArrayBuffer) {\n      const u8=new Uint8Array(ab);\n      return this.putU8(u8);\n   }\n}\n\n/**********************************************************************************************/\n/**********************************************************************************************/\n/**********************************************************************************************/\n/**********************************************************************************************/\n\nexport class twrWasmMemoryAsync extends twrWasmMemoryBase implements IWasmMemoryAsync {\n   malloc:(size:number)=>Promise<number>;\n   free:(size:number)=>Promise<void>;\n\n   constructor(memory:WebAssembly.Memory, mallocImpl:(size:number)=>Promise<number>, callCImpl:(funcName:string, any:[...any])=>Promise<any>) {\n      super(memory);\n      this.free = (size:number) => {\n         return callCImpl(\"free\", [size]) as Promise<void>;\n      }\n      this.malloc = mallocImpl;\n   }\n\n   // allocate and copy a string into the webassembly module memory as utf8 (or the specified codePage)\n   async putString(sin:string, codePage=codePageUTF8) {\n      const ru8=this.stringToU8(sin, codePage);\n      const strIndex:number=await this.malloc(ru8.length+1);\n      this.mem8.set(ru8, strIndex);\n      this.mem8[strIndex+ru8.length]=0;\n\n      return strIndex;\n   }\n\n   // allocate and copy a Uint8Array into Wasm mod memory\n   async putU8(u8a:Uint8Array) {\n      let dest:number=await this.malloc(u8a.length); \n      this.mem8.set(u8a, dest);\n      return dest;\n   }\n\n  async putArrayBuffer(ab:ArrayBuffer) {\n      const u8=new Uint8Array(ab);\n      return this.putU8(u8);\n   }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import { twrLibrary, twrLibraryInstanceRegistry } from \"./twrlibrary.js\";\n///////////////////////////////////////////////////////////////////////////////////////\n// these match C #defines in locale.h\nexport const codePageASCII = 0;\nexport const codePage1252 = 1252;\nexport const codePageUTF8 = 65001;\nexport const codePageUTF32 = 12000;\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\nexport default class twrLibLocale extends twrLibrary {\n    id;\n    imports = {\n        twrUnicodeCodePointToCodePage: { isCommonCode: true },\n        twrCodePageToUnicodeCodePoint: { isCommonCode: true },\n        twrUserLanguage: { isCommonCode: true },\n        twrTimeTmLocal: { isCommonCode: true },\n        twrUserLconv: { isCommonCode: true },\n        twrRegExpTest1252: { isCommonCode: true },\n        twrToUpper1252: { isCommonCode: true },\n        twrToLower1252: { isCommonCode: true },\n        twrStrcoll: { isCommonCode: true },\n        twrGetDtnames: { isCommonCode: true },\n    };\n    libSourcePath = new URL(import.meta.url).pathname;\n    cpTranslate = new twrCodePageToUnicodeCodePoint();\n    cpTranslate2 = new twrCodePageToUnicodeCodePoint();\n    constructor() {\n        // all library constructors should start with these two lines\n        super();\n        this.id = twrLibraryInstanceRegistry.register(this);\n    }\n    ///////////////////////////////////////////////////////////////////////////////////////\n    twrCodePageToUnicodeCodePoint(callingMod, c, codePage) {\n        return this.cpTranslate2.convert(c, codePage);\n    }\n    twrUnicodeCodePointToCodePage(callingMod, outstr, cp, codePage) {\n        const ru8 = callingMod.wasmMem.stringToU8(String.fromCodePoint(cp), codePage);\n        callingMod.wasmMem.mem8.set(ru8, outstr);\n        return ru8.length;\n    }\n    twrUserLanguage(callingMod) {\n        // navigator.language works in JS main thread and Worker thread\n        return callingMod.wasmMem.putString(navigator.language, codePageASCII);\n    }\n    // checks if the character c, when converted to a string, is matched by the passed in regexp string \n    // utf-8 version not needed since this function is used for a single byte ('char'), \n    // and non-ascii range utf-8 single byte are not valid\n    twrRegExpTest1252(callingMod, regexpStrIdx, c) {\n        const regexpStr = callingMod.wasmMem.getString(regexpStrIdx);\n        const regexp = new RegExp(regexpStr, 'u');\n        const cstr = this.cpTranslate.decoder1252.decode(new Uint8Array([c]));\n        const r = regexp.test(cstr);\n        if (r)\n            return 1;\n        else\n            return 0;\n    }\n    // utf-8 version not needed since this function is used for a single byte ('char'), \n    // and non-ascii range utf-8 single byte are not valid\n    twrToLower1252(callingMod, c) {\n        const cstr = this.cpTranslate.decoder1252.decode(new Uint8Array([c]));\n        const regexp = new RegExp(\"^\\\\p{Letter}$\", 'u');\n        if (regexp.test(cstr)) {\n            const r = to1252(cstr.toLocaleLowerCase());\n            //console.log(\"twrToLower1252Impl: isLetter\", c, cstr, cstr.codePointAt(0), cstr.toLocaleLowerCase(), cstr.toLocaleLowerCase().codePointAt(0), r);\n            return r;\n        }\n        else {\n            //console.log(\"twrToLower1252Impl: isNOTLetter\", c, cstr, cstr.codePointAt(0));\n            return c;\n        }\n    }\n    //utf-8 version not needed since this function is used for a single byte ('char'), \n    // and non-ascii range utf-8 single byte are not valid\n    twrToUpper1252(callingMod, c) {\n        const cstr = this.cpTranslate.decoder1252.decode(new Uint8Array([c]));\n        if (cstr.codePointAt(0) == 402)\n            return c; // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is ƒ\n        if (cstr.codePointAt(0) == 181)\n            return c; // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is µ\n        if (cstr.codePointAt(0) == 223)\n            return c; // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is ß'\n        if (cstr == \"µ\")\n            return c; // upper case version doesn't fit in 1252\n        if (cstr == 'ƒ')\n            return c; // upper case version doesn't fit in 1252\n        if (cstr == 'ß')\n            return c; // toLocaleUpperCase() will convert beta to SS\n        const regexp = new RegExp(\"^\\\\p{Letter}$\", 'u');\n        if (regexp.test(cstr)) {\n            return to1252(cstr.toLocaleUpperCase());\n        }\n        else {\n            return c;\n        }\n    }\n    twrStrcoll(callingMod, lhs, rhs, codePage) {\n        const lhStr = callingMod.wasmMem.getString(lhs, undefined, codePage);\n        const rhStr = callingMod.wasmMem.getString(rhs, undefined, codePage);\n        // c strcmp(): A positive integer if str1 is greater than str2.\n        // 1 if string 1 (lh) comes after string 2 (rh)\n        const collator = new Intl.Collator();\n        const r = collator.compare(lhStr, rhStr);\n        return r;\n    }\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    //struct tm {\n    //\tint\ttm_sec;\t\t/* seconds after the minute [0-60] */\n    //\tint\ttm_min;\t\t/* minutes after the hour [0-59] */\n    //\tint\ttm_hour;\t\t/* hours since midnight [0-23] */\n    //\tint\ttm_mday;\t\t/* day of the month [1-31] */\n    //\tint\ttm_mon;\t\t/* months since January [0-11] */\n    //\tint\ttm_year;\t\t/* years since 1900 */\n    //\tint\ttm_wday;\t\t/* days since Sunday [0-6] */\n    //\tint\ttm_yday;\t\t/* days since January 1 [0-365] */\n    //\tint\ttm_isdst;\t/* Daylight Saving Time flag */\n    //\tlong\ttm_gmtoff;\t/* offset from UTC in seconds */\n    //\tchar\t*tm_zone;\t/* timezone abbreviation */\n    //};\n    // fill in struct tm\n    // epcohSecs as 32bit int will overflow January 19, 2038. \n    twrTimeTmLocal(callingMod, tmIdx, epochSecs) {\n        const d = new Date(epochSecs * 1000);\n        callingMod.wasmMem.setLong(tmIdx, d.getSeconds());\n        callingMod.wasmMem.setLong(tmIdx + 4, d.getMinutes());\n        callingMod.wasmMem.setLong(tmIdx + 8, d.getHours());\n        callingMod.wasmMem.setLong(tmIdx + 12, d.getDate());\n        callingMod.wasmMem.setLong(tmIdx + 16, d.getMonth());\n        callingMod.wasmMem.setLong(tmIdx + 20, d.getFullYear() - 1900);\n        callingMod.wasmMem.setLong(tmIdx + 24, d.getDay());\n        callingMod.wasmMem.setLong(tmIdx + 28, this.getDayOfYear(d));\n        callingMod.wasmMem.setLong(tmIdx + 32, this.isDst());\n        callingMod.wasmMem.setLong(tmIdx + 36, -d.getTimezoneOffset() * 60);\n        callingMod.wasmMem.setLong(tmIdx + 40, callingMod.wasmMem.putString(this.getTZ(d), codePageASCII));\n    }\n    getDayOfYear(date) {\n        const start = new Date(date.getFullYear(), 0, 1);\n        const diff = date.getTime() - start.getTime(); // Difference in milliseconds\n        const oneDay = 1000 * 60 * 60 * 24; // Number of milliseconds in one day\n        const day = Math.floor(diff / oneDay);\n        return day;\n    }\n    isDst() {\n        const timeString = new Date().toLocaleTimeString('en-US', { timeZoneName: 'long' });\n        if (timeString.includes('Daylight')) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    getTZ(date) {\n        const timeZone = date.toLocaleTimeString('en-US', { timeZoneName: 'short' }).split(' ').pop();\n        return timeZone ? timeZone : \"UTC\";\n    }\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    setAndPutString(mem, idx, sin, codePage) {\n        const stridx = mem.putString(sin, codePage);\n        mem.setLong(idx, stridx);\n    }\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    //struct lconv {\n    //\tchar\t*decimal_point;   \t\t0\n    //\tchar\t*thousands_sep;\t\t\t4\n    //\tchar\t*grouping;\t\t\t\t\t8\n    //\tchar\t*int_curr_symbol;\t\t\t12\n    //\tchar\t*currency_symbol;\t\t\t16\n    //\tchar\t*mon_decimal_point;\t\t20\n    //\tchar\t*mon_thousands_sep;\t\t24\n    //\tchar\t*mon_grouping;\t\t\t\t28\n    //\tchar\t*positive_sign;\t\t\t32\n    //\tchar\t*negative_sign;\t\t\t36\n    //\tchar\tint_frac_digits;\t\t\t40\n    //\tchar\tfrac_digits;\t\t\t\t44\n    //\tchar\tp_cs_precedes;\t\t\t\t48\n    //\tchar\tp_sep_by_space;\t\t\t52\n    //\tchar\tn_cs_precedes;\t\t\t\t56\n    //\tchar\tn_sep_by_space;\t\t\t60\n    //\tchar\tp_sign_posn;\t\t\t\t64\n    //\tchar\tn_sign_posn;\t\t\t\t68\n    //};\n    twrUserLconv(callingMod, lconvIdx, codePage) {\n        const locDec = this.getLocaleDecimalPoint();\n        const locSep = this.getLocaleThousandsSeparator();\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 0, locDec, codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 4, locSep, codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 20, locDec, codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 24, locSep, codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 24, locSep, codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 24, locSep, codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 32, \"+\", codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 36, \"-\", codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 12, this.getLocalCurrencySymbol(), codePage);\n        this.setAndPutString(callingMod.wasmMem, lconvIdx + 16, this.getLocalCurrencySymbol(), codePage);\n    }\n    getLocaleDecimalPoint() {\n        const formatter = new Intl.NumberFormat();\n        //console.log(\"dec resolvedOptions\", formatter.resolvedOptions());\n        // Format a test number to find out the decimal point.\n        const formattedNumber = formatter.format(1.1);\n        //console.log(\"dec formattedNumber\", formattedNumber);\n        // Find the character between the numeric parts.\n        const decimalPoint = formattedNumber.replace(/[0-9]/g, '').charAt(0);\n        return decimalPoint;\n    }\n    getLocaleThousandsSeparator() {\n        const formatter = new Intl.NumberFormat(undefined, {\n            minimumFractionDigits: 0 // Ensure no decimal part interferes\n        });\n        // Format a test number to include a thousands separator.\n        const formattedNumber = formatter.format(1000);\n        //console.log(\"sep formattedNumber\", formattedNumber);\n        // Extract the thousands separator by removing numeric characters and possible decimal points.\n        // This may need adjustment depending on whether other characters are present.\n        let thousandsSeparator = formattedNumber.replace(/[0-9]/g, '').charAt(0); // Assumes separator is the first character.\n        //console.log(\"sep code\",  thousandsSeparator.codePointAt(0));\n        return thousandsSeparator;\n    }\n    // this doesn't work, localeCurrency is not correct\n    getLocaleCurrencyDecimalPoint() {\n        // Create an initial NumberFormat object to detect the locale's currency\n        const tempFormatter = new Intl.NumberFormat(undefined, { style: 'currency', currency: 'USD' });\n        const localeCurrency = tempFormatter.resolvedOptions().currency;\n        const formatter = new Intl.NumberFormat(undefined, {\n            style: 'currency',\n            currency: localeCurrency\n        });\n        // Format a test number to find out the decimal point.\n        const formattedNumber = formatter.format(1.1);\n        // Find the character between the numeric parts.\n        // char(0) is the currency symbol\n        const decimalPoint = formattedNumber.replace(/[0-9]/g, '').charAt(1);\n        return decimalPoint;\n    }\n    getLocalCurrencySymbol() {\n        switch (navigator.language) {\n            case \"en-US\":\n            case \"en-CA\":\n            case \"fr-CA\":\n            case \"en-AU\":\n            case \"es-MX\":\n            case \"es-AR\":\n            case \"es-CL\":\n            case \"es-CO\":\n            case \"es-EC\":\n            case \"en-GY\":\n            case \"nl-SR\":\n            case \"es-UY\":\n            case \"en-BZ\":\n            case \"es-SV\":\n            case \"es-PA\":\n                return \"$\";\n            case \"es-BO\":\n            case \"es-VE\":\n                return \"Bs.\";\n            case \"es-PY\":\n                return \"₲\";\n            case \"es-PE\":\n                return \"S/\";\n            case \"es-CR\":\n                return \"₡\";\n            case \"es-GT\":\n                return \"Q\";\n            case \"es-HN\":\n                return \"L\";\n            case \"es-NI\":\n                return \"C$\";\n            case \"en-GB\":\n                return \"£\";\n            case \"en-IE\":\n            case \"de-DE\":\n            case \"fr-FR\":\n            case \"de-AT\":\n            case \"nl-BE\":\n            case \"fr-BE\":\n            case \"el-CY\":\n            case \"et-EE\":\n            case \"fi-FI\":\n            case \"sv-FI\":\n            case \"el-GR\":\n            case \"it-IT\":\n            case \"lv-LV\":\n            case \"lt-LT\":\n            case \"fr-LU\":\n            case \"de-LU\":\n            case \"lb-LU\":\n            case \"mt-MT\":\n            case \"nl-NL\":\n            case \"pt-PT\":\n            case \"sk-SK\":\n            case \"sl-SI\":\n            case \"es-ES\":\n                return \"€\";\n            case \"ja-JP\":\n                return \"¥\";\n            case \"zh-CN\":\n                return \"¥\";\n            case \"de-CH\":\n            case \"fr-CH\":\n            case \"it-CH\":\n                return \"CHF\";\n            case \"sv-SE\":\n            case \"da-DK\":\n            case \"nb-NO\":\n                return \"kr\";\n            case \"ru-RU\":\n                return \"₽\";\n            case \"ko-KR\":\n                return \"₩\";\n            case \"en-IN\":\n                return \"₹\";\n            case \"pt-BR\":\n                return \"R$\";\n            case \"he-IL\":\n                return \"₪\";\n            case \"tr-TR\":\n                return \"₺\";\n            default:\n                return \"\";\n        }\n    }\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    /*\n    struct locale_dtnames {\n       const char* day[7];\n       const char* abday[7];\n       const char* month[12];\n       const char* abmonth[12];\n       const char* ampm[2];\n    };\n    */\n    twrGetDtnames(callingMod, codePage) {\n        const malloc = callingMod.wasmMem.malloc;\n        const dtnamesStructIdx = malloc(40 * 4);\n        for (let i = 0; i < 7; i++)\n            this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx + i * 4, this.getLocalizedDayName(i, 'long'), codePage);\n        for (let i = 0; i < 7; i++)\n            this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx + (i + 7) * 4, this.getLocalizedDayName(i, 'short'), codePage);\n        for (let i = 0; i < 12; i++)\n            this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx + (i + 14) * 4, this.getLocalizedMonthNames(i, 'long'), codePage);\n        for (let i = 0; i < 12; i++)\n            this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx + (i + 14 + 12) * 4, this.getLocalizedMonthNames(i, 'short'), codePage);\n        this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx + (0 + 14 + 24) * 4, this.getLocalizedAM(), codePage);\n        this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx + (1 + 14 + 24) * 4, this.getLocalizedPM(), codePage);\n        return dtnamesStructIdx;\n    }\n    getLocalizedDayName(n, weekdayType) {\n        // Create a Date object for the desired day of the week\n        const date = new Date();\n        date.setDate(date.getDate() - date.getDay() + n);\n        // Create an Intl.DateTimeFormat object with the desired locale and options\n        const formatter = new Intl.DateTimeFormat(undefined, { weekday: weekdayType });\n        // Format the date to get the full day name\n        return formatter.format(date);\n    }\n    getLocalizedMonthNames(n, monthType) {\n        const formatter = new Intl.DateTimeFormat(undefined, { month: monthType });\n        const date = new Date(2000, n, 1);\n        return formatter.format(date);\n    }\n    getLocalizedAM() {\n        // Create a Date object for a time in the morning\n        const morningDate = new Date(2000, 0, 1, 9, 0, 0);\n        // Create an Intl.DateTimeFormat object with the desired locale and options\n        const formatter = new Intl.DateTimeFormat(undefined, {\n            hour: 'numeric',\n            hour12: true\n        });\n        // Format the date and get the parts\n        const formattedParts = formatter.formatToParts(morningDate);\n        // Find the part of the formatted string that corresponds to the day period (AM/PM)\n        const dayPeriodPart = formattedParts.find(part => part.type === 'dayPeriod');\n        return dayPeriodPart ? dayPeriodPart.value : '';\n    }\n    getLocalizedPM() {\n        // Create a Date object for a time in the afternoon\n        const afternoonDate = new Date(2000, 0, 1, 15, 0, 0);\n        // Create an Intl.DateTimeFormat object with the desired locale and options\n        const formatter = new Intl.DateTimeFormat(undefined, {\n            hour: 'numeric',\n            hour12: true\n        });\n        // Format the date and get the parts\n        const formattedParts = formatter.formatToParts(afternoonDate);\n        // Find the part of the formatted string that corresponds to the day period (AM/PM)\n        const dayPeriodPart = formattedParts.find(part => part.type === 'dayPeriod');\n        return dayPeriodPart ? dayPeriodPart.value : '';\n    }\n}\n///////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////\nexport function to1252(instr) {\n    if (instr.codePointAt(0) == 8239)\n        return 32; // turn narrow-no-break-space into space\n    // this first switch statment fixes what appears to be a bug in safari 15.6.1 (17613.3.9.1.16) (comparisons to the character string fail)\n    let cp = instr.codePointAt(0) || 0;\n    switch (cp) {\n        case 338: return 0x8C;\n        case 339: return 0x9C;\n        case 352: return 0x8A;\n        case 353: return 0x9A;\n        case 376: return 0x9F;\n        case 381: return 0x8E;\n        case 382: return 0x9E;\n        case 402: return 0x83;\n        case 710: return 0x88;\n    }\n    switch (instr.normalize()) {\n        case '€': return 0x80;\n        case '‚': return 0x82;\n        case 'ƒ': return 0x83;\n        case '„': return 0x84;\n        case '…': return 0x85;\n        case '†': return 0x86;\n        case '‡': return 0x87;\n        case 'ˆ': return 0x88;\n        case '‰': return 0x89;\n        case 'Š': return 0x8A;\n        case '‹': return 0x8B;\n        case 'Œ': return 0x8C;\n        case 'Ž': return 0x8E;\n        case '‘': return 0x91;\n        case '’': return 0x92;\n        case '“': return 0x93;\n        case '”': return 0x94;\n        case '•': return 0x95;\n        case '–': return 0x96;\n        case '—': return 0x97;\n        case '˜': return 0x98;\n        case '™': return 0x99;\n        case 'š': return 0x9A;\n        case '›': return 0x9B;\n        case 'œ': return 0x9C;\n        case 'ž': return 0x9E;\n        case 'Ÿ': return 0x9F;\n    }\n    if (cp > 255) {\n        console.log(\"twr-wasm.to1252(): unable to convert: \", instr, cp);\n        cp = 0;\n    }\n    return cp;\n}\n///////////////////////////////////////////////////////////////////////////////////////////////\nexport function toASCII(instr) {\n    if (instr == 'ƒ')\n        return 102; // lowercase 'f'\n    if (instr.codePointAt(0) == 8239)\n        return 32; // turn narrow-no-break-space into space\n    let cp = instr.codePointAt(0) || 0;\n    if (cp > 127)\n        return 63; // ASCII for \"?\"\n    return cp;\n}\n///////////////////////////////////////////////////////////////////////////////////////////////\nexport class twrCodePageToUnicodeCodePoint {\n    decoderUTF8 = new TextDecoder('utf-8');\n    decoder1252 = new TextDecoder('windows-1252');\n    convert(c, codePage) {\n        let outstr;\n        if (codePage == codePageUTF8) {\n            outstr = this.decoderUTF8.decode(new Uint8Array([c]), { stream: true });\n        }\n        else if (codePage == codePage1252) {\n            outstr = this.decoder1252.decode(new Uint8Array([c]));\n        }\n        else if (codePage == codePageASCII) {\n            if (c > 127)\n                outstr = \"\";\n            else\n                outstr = String.fromCharCode(c);\n        }\n        else if (codePage == codePageUTF32) {\n            outstr = String.fromCodePoint(c);\n        }\n        else {\n            throw new Error(\"unsupported CodePage: \" + codePage);\n        }\n        return outstr.codePointAt(0) || 0;\n    }\n}\n//# sourceMappingURL=twrliblocale.js.map","import {twrLibrary, TLibImports, twrLibraryInstanceRegistry} from \"./twrlibrary.js\";\nimport {IWasmMemory} from \"./twrwasmmem.js\";\nimport {IWasmModule} from \"./twrmod.js\"\nimport {twrWasmBase} from \"./twrwasmbase.js\"\n\n///////////////////////////////////////////////////////////////////////////////////////\n\n// these match C #defines in locale.h\nexport const codePageASCII=0;\nexport const codePage1252=1252;\nexport const codePageUTF8=65001;\nexport const codePageUTF32=12000;\n\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n\nexport default class twrLibLocale extends twrLibrary {\n   id:number;\n   imports:TLibImports = {\n      twrUnicodeCodePointToCodePage:{isCommonCode: true},\n      twrCodePageToUnicodeCodePoint:{isCommonCode: true},\n      twrUserLanguage:{isCommonCode: true},\n      twrTimeTmLocal:{isCommonCode: true},\n      twrUserLconv:{isCommonCode: true},\n      twrRegExpTest1252:{isCommonCode: true},\n      twrToUpper1252:{isCommonCode: true},\n      twrToLower1252:{isCommonCode: true},\n      twrStrcoll:{isCommonCode: true},\n      twrGetDtnames:{isCommonCode: true},\n   }\n\n   libSourcePath = new URL(import.meta.url).pathname;\n\n   cpTranslate = new twrCodePageToUnicodeCodePoint();\n   cpTranslate2 = new twrCodePageToUnicodeCodePoint();\n\n   constructor() {\n      // all library constructors should start with these two lines\n      super();\n      this.id=twrLibraryInstanceRegistry.register(this);\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////\n\n   twrCodePageToUnicodeCodePoint(callingMod:IWasmModule|twrWasmBase, c:number, codePage:number) {\n      return this.cpTranslate2.convert(c, codePage);\n   }\n   \n   twrUnicodeCodePointToCodePage(callingMod:IWasmModule|twrWasmBase, outstr:number, cp:number, codePage:number) {\n      const ru8=callingMod.wasmMem.stringToU8(String.fromCodePoint(cp), codePage);\n      callingMod.wasmMem.mem8.set(ru8, outstr);\n      return ru8.length;\n   }\n\n   twrUserLanguage(callingMod:IWasmModule|twrWasmBase,) {\n      // navigator.language works in JS main thread and Worker thread\n      return callingMod.wasmMem.putString(navigator.language, codePageASCII);\n\n   }\n\n   // checks if the character c, when converted to a string, is matched by the passed in regexp string \n   // utf-8 version not needed since this function is used for a single byte ('char'), \n   // and non-ascii range utf-8 single byte are not valid\n   twrRegExpTest1252(callingMod:IWasmModule|twrWasmBase, regexpStrIdx:number, c:number) {\n\n      const regexpStr=callingMod.wasmMem.getString(regexpStrIdx);\n      const regexp=new RegExp(regexpStr, 'u');\n      const cstr:string = this.cpTranslate.decoder1252.decode(new Uint8Array([c]));\n      const r=regexp.test(cstr);\n      if (r) return 1; else return 0;\n\n   }\n\n   // utf-8 version not needed since this function is used for a single byte ('char'), \n   // and non-ascii range utf-8 single byte are not valid\n   twrToLower1252(callingMod:IWasmModule|twrWasmBase, c:number) {\n\n      const cstr:string = this.cpTranslate.decoder1252.decode(new Uint8Array([c]));\n      const regexp=new RegExp(\"^\\\\p{Letter}$\", 'u');\n      if (regexp.test(cstr)) {\n         const r = to1252(cstr.toLocaleLowerCase());\n         //console.log(\"twrToLower1252Impl: isLetter\", c, cstr, cstr.codePointAt(0), cstr.toLocaleLowerCase(), cstr.toLocaleLowerCase().codePointAt(0), r);\n         return r;\n      }\n      else {\n         //console.log(\"twrToLower1252Impl: isNOTLetter\", c, cstr, cstr.codePointAt(0));\n         return c;\n      }\n\n   }\n\n   //utf-8 version not needed since this function is used for a single byte ('char'), \n   // and non-ascii range utf-8 single byte are not valid\n   twrToUpper1252(callingMod:IWasmModule|twrWasmBase, c:number) {\n\n      const cstr:string = this.cpTranslate.decoder1252.decode(new Uint8Array([c]));\n\n      if (cstr.codePointAt(0)==402) return c;  // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is ƒ\n      if (cstr.codePointAt(0)==181) return c;  // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is µ\n      if (cstr.codePointAt(0)==223) return c;  // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is ß'\n      \n      if (cstr==\"µ\") return c;  // upper case version doesn't fit in 1252\n      if (cstr=='ƒ') return c;  // upper case version doesn't fit in 1252\n      if (cstr=='ß') return c;  // toLocaleUpperCase() will convert beta to SS\n\n      const regexp=new RegExp(\"^\\\\p{Letter}$\", 'u');\n      if (regexp.test(cstr)) {\n         return to1252(cstr.toLocaleUpperCase());\n      }\n      else {\n         return c;\n      }\n\n   }\n\n   twrStrcoll(callingMod:IWasmModule|twrWasmBase, lhs:number, rhs:number, codePage:number) {\n      const lhStr=callingMod.wasmMem.getString(lhs, undefined, codePage);\n      const rhStr=callingMod.wasmMem.getString(rhs, undefined, codePage);\n\n      // c strcmp(): A positive integer if str1 is greater than str2.\n      // 1 if string 1 (lh) comes after string 2 (rh)\n      const collator = new Intl.Collator();\n      const r = collator.compare(lhStr, rhStr);\n\n      return r;\n   }\n\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   /////////////////////////////////////////////////////////////////////////////////////////////\n\n   //struct tm {\n   //\tint\ttm_sec;\t\t/* seconds after the minute [0-60] */\n   //\tint\ttm_min;\t\t/* minutes after the hour [0-59] */\n   //\tint\ttm_hour;\t\t/* hours since midnight [0-23] */\n   //\tint\ttm_mday;\t\t/* day of the month [1-31] */\n   //\tint\ttm_mon;\t\t/* months since January [0-11] */\n   //\tint\ttm_year;\t\t/* years since 1900 */\n   //\tint\ttm_wday;\t\t/* days since Sunday [0-6] */\n   //\tint\ttm_yday;\t\t/* days since January 1 [0-365] */\n   //\tint\ttm_isdst;\t/* Daylight Saving Time flag */\n   //\tlong\ttm_gmtoff;\t/* offset from UTC in seconds */\n   //\tchar\t*tm_zone;\t/* timezone abbreviation */\n   //};\n\n   // fill in struct tm\n   // epcohSecs as 32bit int will overflow January 19, 2038. \n   twrTimeTmLocal(callingMod:IWasmModule|twrWasmBase, tmIdx:number, epochSecs:number) {\n\n      const d=new Date(epochSecs*1000);\n      callingMod.wasmMem.setLong(tmIdx, d.getSeconds());\n      callingMod.wasmMem.setLong(tmIdx+4, d.getMinutes());\n      callingMod.wasmMem.setLong(tmIdx+8, d.getHours());\n      callingMod.wasmMem.setLong(tmIdx+12, d.getDate());\n      callingMod.wasmMem.setLong(tmIdx+16, d.getMonth());\n      callingMod.wasmMem.setLong(tmIdx+20, d.getFullYear()-1900);\n      callingMod.wasmMem.setLong(tmIdx+24, d.getDay());\n      callingMod.wasmMem.setLong(tmIdx+28, this.getDayOfYear(d));\n      callingMod.wasmMem.setLong(tmIdx+32, this.isDst());\n      callingMod.wasmMem.setLong(tmIdx+36, \t-d.getTimezoneOffset()*60);\n      callingMod.wasmMem.setLong(tmIdx+40, \tcallingMod.wasmMem.putString(this.getTZ(d), codePageASCII)); \n\n   }\n\n   private getDayOfYear(date:Date) {\n      const start = new Date(date.getFullYear(), 0, 1); \n      const diff = date.getTime() - start.getTime(); // Difference in milliseconds\n      const oneDay = 1000 * 60 * 60 * 24; // Number of milliseconds in one day\n      const day = Math.floor(diff / oneDay);\n      return day;\n   }\n\n   private isDst() {\n      const timeString = new Date().toLocaleTimeString('en-US', { timeZoneName: 'long' });\n      if (timeString.includes('Daylight')) {\n         return 1;\n      } else {\n         return 0;\n      }\n   }\n\n   private  getTZ(date:Date) {\n      const timeZone = date.toLocaleTimeString('en-US', {timeZoneName: 'short'}).split(' ').pop();\n      return timeZone?timeZone:\"UTC\";\n   }\n\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   /////////////////////////////////////////////////////////////////////////////////////////////\n\n   private setAndPutString(mem: IWasmMemory, idx:number, sin:string,  codePage:number) {\n      const stridx=mem.putString(sin, codePage);\n      mem.setLong(idx, stridx);\n   }\n\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   /////////////////////////////////////////////////////////////////////////////////////////////\n\n   //struct lconv {\n   //\tchar\t*decimal_point;   \t\t0\n   //\tchar\t*thousands_sep;\t\t\t4\n   //\tchar\t*grouping;\t\t\t\t\t8\n   //\tchar\t*int_curr_symbol;\t\t\t12\n   //\tchar\t*currency_symbol;\t\t\t16\n   //\tchar\t*mon_decimal_point;\t\t20\n   //\tchar\t*mon_thousands_sep;\t\t24\n   //\tchar\t*mon_grouping;\t\t\t\t28\n   //\tchar\t*positive_sign;\t\t\t32\n   //\tchar\t*negative_sign;\t\t\t36\n   //\tchar\tint_frac_digits;\t\t\t40\n   //\tchar\tfrac_digits;\t\t\t\t44\n   //\tchar\tp_cs_precedes;\t\t\t\t48\n   //\tchar\tp_sep_by_space;\t\t\t52\n   //\tchar\tn_cs_precedes;\t\t\t\t56\n   //\tchar\tn_sep_by_space;\t\t\t60\n   //\tchar\tp_sign_posn;\t\t\t\t64\n   //\tchar\tn_sign_posn;\t\t\t\t68\n   //};\n\n   twrUserLconv(callingMod:IWasmModule|twrWasmBase, lconvIdx:number, codePage:number) {\n      const locDec=this.getLocaleDecimalPoint();\n      const locSep=this.getLocaleThousandsSeparator();\n      this.setAndPutString(callingMod.wasmMem, lconvIdx+0, locDec, codePage);\n      this.setAndPutString(callingMod.wasmMem, lconvIdx+4, locSep, codePage);\n      this.setAndPutString(callingMod.wasmMem, lconvIdx+20, locDec, codePage);\n      this.setAndPutString(callingMod.wasmMem, lconvIdx+24, locSep, codePage);\n      this.setAndPutString(callingMod.wasmMem, lconvIdx+24, locSep, codePage);\n      this.setAndPutString(callingMod.wasmMem, lconvIdx+24, locSep, codePage);\n      this.setAndPutString(callingMod.wasmMem, lconvIdx+32, \"+\", codePage);\n      this.setAndPutString(callingMod.wasmMem, lconvIdx+36, \"-\", codePage);\n      this.setAndPutString(callingMod.wasmMem, lconvIdx+12, this.getLocalCurrencySymbol(), codePage);\n      this.setAndPutString(callingMod.wasmMem, lconvIdx+16, this.getLocalCurrencySymbol(), codePage);\n   }\n\n   private getLocaleDecimalPoint() {\n      const formatter = new Intl.NumberFormat();\n\n      //console.log(\"dec resolvedOptions\", formatter.resolvedOptions());\n\n      // Format a test number to find out the decimal point.\n      const formattedNumber = formatter.format(1.1);\n      //console.log(\"dec formattedNumber\", formattedNumber);\n\n      // Find the character between the numeric parts.\n      const decimalPoint = formattedNumber.replace(/[0-9]/g, '').charAt(0);\n\n      return decimalPoint;\n   }\n\n   private getLocaleThousandsSeparator() {\n      const formatter = new Intl.NumberFormat(undefined, {\n         minimumFractionDigits: 0  // Ensure no decimal part interferes\n      });\n\n      // Format a test number to include a thousands separator.\n      const formattedNumber = formatter.format(1000);\n      //console.log(\"sep formattedNumber\", formattedNumber);\n\n      // Extract the thousands separator by removing numeric characters and possible decimal points.\n      // This may need adjustment depending on whether other characters are present.\n      let thousandsSeparator = formattedNumber.replace(/[0-9]/g, '').charAt(0);  // Assumes separator is the first character.\n      //console.log(\"sep code\",  thousandsSeparator.codePointAt(0));\n      return thousandsSeparator;\n   }\n\n   // this doesn't work, localeCurrency is not correct\n   private getLocaleCurrencyDecimalPoint() {\n      // Create an initial NumberFormat object to detect the locale's currency\n      const tempFormatter = new Intl.NumberFormat(undefined, { style: 'currency', currency: 'USD' });\n      const localeCurrency = tempFormatter.resolvedOptions().currency;\n      const formatter = new Intl.NumberFormat(undefined, {\n         style: 'currency',\n         currency: localeCurrency\n   });\n      // Format a test number to find out the decimal point.\n      const formattedNumber = formatter.format(1.1);\n\n      // Find the character between the numeric parts.\n      // char(0) is the currency symbol\n      const decimalPoint = formattedNumber.replace(/[0-9]/g, '').charAt(1);\n\n      return decimalPoint;\n   }\n\n   private getLocalCurrencySymbol() {\n      switch (navigator.language) {\n         case \"en-US\":\n         case \"en-CA\":\n         case \"fr-CA\":\n         case \"en-AU\":\n         case \"es-MX\":\n         case \"es-AR\":\n         case \"es-CL\":\n         case \"es-CO\":\n         case \"es-EC\":\n         case \"en-GY\":\n         case \"nl-SR\":\n         case \"es-UY\":\n         case \"en-BZ\":\n         case \"es-SV\":\n         case \"es-PA\":\n            return \"$\";\n\n         case \"es-BO\":\n         case \"es-VE\":\n            return \"Bs.\";\n\n         case \"es-PY\":\n            return \"₲\";\n\n         case \"es-PE\":\n            return \"S/\";\n\n         case \"es-CR\":\n            return \"₡\";\n\n         case \"es-GT\":\n            return \"Q\";\t\t\n               \n         case \"es-HN\":\n            return \"L\";\n            \n         case \"es-NI\":\n            return \"C$\";\n\n         case \"en-GB\":\n            return \"£\"\n\n         case \"en-IE\":\n         case \"de-DE\":\n         case \"fr-FR\":\n         case \"de-AT\":\n         case \"nl-BE\":\n         case \"fr-BE\":\n         case \"el-CY\":\n         case \"et-EE\":\n         case \"fi-FI\":\n         case \"sv-FI\":\n         case \"el-GR\":\n         case \"it-IT\":\n         case \"lv-LV\":\n         case \"lt-LT\":\n         case \"fr-LU\":\n         case \"de-LU\":\n         case \"lb-LU\":\n         case \"mt-MT\":\n         case \"nl-NL\":\n         case \"pt-PT\":\n         case \"sk-SK\":\n         case \"sl-SI\":\n         case \"es-ES\":\n            return \"€\"\n\n         case \"ja-JP\":\n            return \"¥\"\n\n         case \"zh-CN\":\n            return \"¥\"\n\n         case \"de-CH\":\n         case \"fr-CH\":\n         case \"it-CH\":\n            return \"CHF\"\n\n         case \"sv-SE\":\n         case \"da-DK\":\n         case \"nb-NO\":\n            return \"kr\"\n\n         case \"ru-RU\":\n            return \"₽\"\n\n         case \"ko-KR\":\n            return \"₩\"\n\n         case \"en-IN\":\n            return \"₹\"\n\n         case \"pt-BR\":\n         return \"R$\"\n\n         case \"he-IL\":\n         return \"₪\"\n\n         case \"tr-TR\":\n         return \"₺\"\n\n         default:\n            return \"\";\n      }\n   }\n\n\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   /////////////////////////////////////////////////////////////////////////////////////////////\n\n   /*\n   struct locale_dtnames {\n      const char* day[7];\n      const char* abday[7];\n      const char* month[12];\n      const char* abmonth[12];\n      const char* ampm[2];\n   };\n   */\n\n   twrGetDtnames(callingMod:IWasmModule|twrWasmBase, codePage:number) {\n\n      const malloc=callingMod.wasmMem.malloc;\n      const dtnamesStructIdx:number=malloc(40*4);\n      for (let i=0; i<7; i++)\n         this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx+i*4, this.getLocalizedDayName(i, 'long'), codePage);\n\n      for (let i=0; i<7; i++)\n         this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx+(i+7)*4, this.getLocalizedDayName(i, 'short'), codePage);\n\n      for (let i=0; i<12; i++)\n         this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx+(i+14)*4, this.getLocalizedMonthNames(i, 'long'), codePage);\n\n      for (let i=0; i<12; i++)\n         this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx+(i+14+12)*4, this.getLocalizedMonthNames(i, 'short'), codePage);\n\n      this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx+(0+14+24)*4, this.getLocalizedAM(), codePage);\n      this.setAndPutString(callingMod.wasmMem, dtnamesStructIdx+(1+14+24)*4, this.getLocalizedPM(), codePage);\n\n      return dtnamesStructIdx;\n   }\n\n   private getLocalizedDayName(n:number, weekdayType:'long'|'short') {\n      // Create a Date object for the desired day of the week\n      const date = new Date();\n      date.setDate(date.getDate() - date.getDay() + n);\n      \n      // Create an Intl.DateTimeFormat object with the desired locale and options\n      const formatter = new Intl.DateTimeFormat(undefined, { weekday: weekdayType });\n      \n      // Format the date to get the full day name\n      return formatter.format(date);\n   }\n\n   private getLocalizedMonthNames(n:number, monthType:'long'|'short') {\n      const formatter = new Intl.DateTimeFormat(undefined, { month: monthType });\n      const date = new Date(2000, n, 1);\n      return formatter.format(date);\n   }\n\n   private getLocalizedAM() {\n      // Create a Date object for a time in the morning\n      const morningDate = new Date(2000, 0, 1, 9, 0, 0);\n\n      // Create an Intl.DateTimeFormat object with the desired locale and options\n      const formatter = new Intl.DateTimeFormat(undefined, {\n         hour: 'numeric',\n         hour12: true\n      });\n\n      // Format the date and get the parts\n      const formattedParts = formatter.formatToParts(morningDate);\n\n      // Find the part of the formatted string that corresponds to the day period (AM/PM)\n      const dayPeriodPart = formattedParts.find(part => part.type === 'dayPeriod');\n\n      return dayPeriodPart ? dayPeriodPart.value : '';\n   }\n\n   private getLocalizedPM() {\n      // Create a Date object for a time in the afternoon\n      const afternoonDate = new Date(2000, 0, 1, 15, 0, 0);\n\n      // Create an Intl.DateTimeFormat object with the desired locale and options\n      const formatter = new Intl.DateTimeFormat(undefined, {\n         hour: 'numeric',\n         hour12: true\n      });\n\n      // Format the date and get the parts\n      const formattedParts = formatter.formatToParts(afternoonDate);\n\n      // Find the part of the formatted string that corresponds to the day period (AM/PM)\n      const dayPeriodPart = formattedParts.find(part => part.type === 'dayPeriod');\n\n      return dayPeriodPart ? dayPeriodPart.value : '';\n   }\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n\nexport function to1252(instr:string) {\n\n   if (instr.codePointAt(0)==8239) return 32;  // turn narrow-no-break-space into space\n\n\n   // this first switch statment fixes what appears to be a bug in safari 15.6.1 (17613.3.9.1.16) (comparisons to the character string fail)\n   let cp=instr.codePointAt(0) || 0;\n\n   switch(cp) {\n      case 338: return 0x8C;\n      case 339: return 0x9C;\n      case 352: return 0x8A;\n      case 353: return 0x9A;\n      case 376: return 0x9F;\n      case 381: return 0x8E;\n      case 382: return 0x9E;\n      case 402: return 0x83;\n      case 710: return 0x88;\n   }\n\n   switch (instr.normalize()) {\n      case '€': return 0x80;\n      case '‚': return 0x82;\n      case 'ƒ': return 0x83;\n      case '„': return 0x84;\n      case '…': return 0x85;\n      case '†': return 0x86;\n      case '‡': return 0x87;\n      case 'ˆ': return 0x88;\n      case '‰': return 0x89;\n      case 'Š': return 0x8A; \n      case '‹': return 0x8B;\n      case 'Œ': return 0x8C;\n      case 'Ž': return 0x8E;\n      case '‘': return 0x91;\n      case '’': return 0x92;\n      case '“': return 0x93;\n      case '”': return 0x94;\n      case '•': return 0x95;\n      case '–': return 0x96;\n      case '—': return 0x97;\n      case '˜': return 0x98;\n      case '™': return 0x99;\n      case 'š': return 0x9A;\n      case '›': return 0x9B;\n      case 'œ': return 0x9C;\n      case 'ž': return 0x9E;\n      case 'Ÿ': return 0x9F;\n   }\n   \n   if (cp>255) {\n      console.log(\"twr-wasm.to1252(): unable to convert: \", instr, cp);\n      cp=0;\n   }\n\n   return cp;\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n\nexport function toASCII(instr:string) {\n   if (instr=='ƒ') return 102; // lowercase 'f'\n   if (instr.codePointAt(0)==8239) return 32;  // turn narrow-no-break-space into space\n\n   let cp=instr.codePointAt(0) || 0;\n   if (cp>127) return 63; // ASCII for \"?\"\n   return cp;\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n\nexport class twrCodePageToUnicodeCodePoint {\n\tdecoderUTF8 = new TextDecoder('utf-8');\n\tdecoder1252 = new TextDecoder('windows-1252');\n\n\tconvert(c:number, codePage:number) {\n\t\tlet outstr:string;\n\t\tif (codePage==codePageUTF8) {\n\t\t\toutstr=this.decoderUTF8.decode(new Uint8Array([c]), {stream: true});\n\t\t}\n\t\telse if (codePage==codePage1252) {\n\t\t\toutstr = this.decoder1252.decode(new Uint8Array([c]));\n\t\t}\n\t\telse if (codePage==codePageASCII) {\n\t\t\tif (c>127) outstr=\"\";\n\t\t\telse outstr=String.fromCharCode(c);\n\t\t}\n\t\telse if (codePage==codePageUTF32) {\n\t\t\toutstr=String.fromCodePoint(c);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(\"unsupported CodePage: \"+codePage)\n\t\t}\n\n\t\treturn outstr.codePointAt(0) || 0;\n\t}\n}\n","import { twrEventQueueReceive } from \"./twreventqueue.js\";\n/////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////\nexport class twrLibrary {\n    // set to unique name if multiple instances allowed (must all expose the same interface) (e.g. consoles).  \n    // When true, APIs will expect first arg to be library ID.\n    interfaceName;\n    constructor() {\n    }\n    // the actual twrLibrary is created outside of a specific wasm module, so isn't paired to a specific module\n    // however, each call to getImports is paired to a specific wasm module\n    // getImports returns Wasm Module imports that will be added to this wasm module's WebAssembly.ModuleImports\n    // getImports expects that the derived class has created a \"this.import\" with a list of function names (as strings)\n    // getImports is called by twrWasmModule\n    getImports(callingMod) {\n        if (callingMod.isTwrWasmModuleAsync)\n            throw new Error(\"unsupported module type (expecting twrWasmModule\");\n        let wasmImports = {};\n        const derivedInstanceThis = this;\n        if (this.imports === undefined)\n            throw new Error(\"twrLibrary derived class is missing imports.\");\n        if (this.libSourcePath === undefined)\n            throw new Error(\"twrLibrary derived class is missing libSourcePath.\");\n        for (let funcName in this.imports) {\n            if (this.imports[funcName].isModuleAsyncOnly) {\n                const nullFun = () => {\n                    throw new Error(\"Invalid call to unimplemented twrLibrary 'import' function (isModuleAsyncOnly was used): \" + funcName);\n                };\n                wasmImports[funcName] = nullFun;\n            }\n            else {\n                if (!derivedInstanceThis[funcName])\n                    throw new Error(\"twrLibrary 'import' function is missing: \" + funcName);\n                if (this.interfaceName) {\n                    // in this case, this particular instance represents the class\n                    // but the actual instance needs to be retrieved at runtime using the libID & registry\n                    // since only once set of WasmImports is created for each class\n                    const libFunc = (funcName, mod, libID, ...params) => {\n                        const lib = twrLibraryInstanceRegistry.getLibraryInstance(libID);\n                        const derivedLib = lib;\n                        const f = derivedLib[funcName];\n                        if (!f)\n                            throw new Error(`Library function not found. id=${libID}, funcName=${funcName}`);\n                        return f.call(derivedLib, mod, ...params);\n                    };\n                    wasmImports[funcName] = libFunc.bind(null, funcName, callingMod); // rest of function args are also passed to libFunc when using bind\n                }\n                else {\n                    wasmImports[funcName] = derivedInstanceThis[funcName].bind(this, callingMod);\n                }\n            }\n        }\n        return wasmImports;\n    }\n    // this function is called by twrWasmModuleAsync, and sent to the corresponding twrWasmModuleAsyncProxy\n    getProxyParams() {\n        return [\"twrLibraryProxy\", this.id, this.imports, this.libSourcePath, this.interfaceName];\n    }\n    // called by twrWasmModuleAsync\n    async processMessageFromProxy(msg, mod) {\n        const [msgClass, libID, funcName, doAwait, returnValueEventID, ...params] = msg;\n        if (this.interfaceName && twrLibraryInstanceRegistry.getLibraryInstance(libID).libSourcePath != this.libSourcePath)\n            throw new Error(\"internal error\"); // should never happen\n        else if (libID != this.id)\n            throw new Error(\"internal error\"); // should never happen\n        if (!mod.isTwrWasmModuleAsync)\n            throw new Error(\"internal error\");\n        const libThis = twrLibraryInstanceRegistry.getLibraryInstance(libID);\n        const derivedInstance = libThis;\n        if (!derivedInstance[funcName])\n            throw new Error(\"twrLibrary derived class missing 'import' function: \" + funcName);\n        let retVal;\n        if (doAwait)\n            retVal = await derivedInstance[funcName](mod, ...params);\n        else\n            retVal = derivedInstance[funcName](mod, ...params);\n        if (returnValueEventID > -1) // -1 means noBlock true\n            mod.eventQueueSend.postEvent(returnValueEventID, retVal);\n    }\n}\n/////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////\nexport class twrLibraryProxy {\n    id;\n    imports;\n    libSourcePath;\n    interfaceName;\n    called = false;\n    //every module instance has its own twrLibraryProxy\n    constructor(params) {\n        const [className, id, imports, libSourcePath, interfaceName] = params;\n        this.id = id;\n        this.imports = imports;\n        this.libSourcePath = libSourcePath;\n        this.interfaceName = interfaceName;\n    }\n    remoteProcedureCall(ownerMod, funcName, isAsyncFunction, returnValueEventID, interfaceName, ...args) {\n        let msg;\n        if (interfaceName)\n            msg = [\"twrLibrary\", args[0], funcName, isAsyncFunction, returnValueEventID, ...args.slice(1)];\n        else\n            msg = [\"twrLibrary\", this.id, funcName, isAsyncFunction, returnValueEventID, ...args];\n        // postMessage sends message to the JS Main thread that created the twrModAsyncProxy thread\n        // the message processing code discriminates the destination instance by:  \"twrLibrary\", this.id,\n        postMessage(msg);\n        //TODO!! a void return type isn't particularly supported -- it will presumably returned undefined from the JS function, \n        //which will put a zero into the Int32Array used for returnValue\n        if (returnValueEventID == -1) { // -1 means noBlock true\n            return 0;\n        }\n        const [id, retVals] = ownerMod.eventQueueReceive.waitEvent(returnValueEventID);\n        if (id != returnValueEventID)\n            throw new Error(\"internal error\");\n        if (retVals.length != 1)\n            throw new Error(\"internal error\");\n        return retVals[0];\n    }\n    // getProxyImports is called by twrWasmModuleAsyncProxy\n    // it provides the functions that the twrWasmModuleAsync's C code will call\n    // these will RPC to the JS main thread (unless isCommonCode set) and then wait for a return value (unless noBlock) \n    async getProxyImports(ownerMod) {\n        if (this.called === true)\n            throw new Error(\"getProxyImports should only be called once per twrLibraryProxy instance\");\n        this.called = true;\n        let wasmImports = {};\n        let libClass;\n        // now for each twrLibrary import, create the functions that will be added to wasm module imports\n        for (let funcName in this.imports) {\n            if (this.imports[funcName].isCommonCode) {\n                if (this.imports[funcName].isAsyncFunction)\n                    throw new Error(\"isAsyncFunction can not be used with isCommonCode\");\n                if (libClass === undefined) {\n                    if (this.libSourcePath === undefined)\n                        throw new Error(\"undefined libSourcePath\");\n                    const libMod = await import(this.libSourcePath);\n                    libClass = new libMod.default;\n                }\n                wasmImports[funcName] = libClass[funcName].bind(libClass, ownerMod);\n            }\n            else {\n                if (this.imports[funcName].isAsyncFunction) {\n                    wasmImports[funcName] = this.remoteProcedureCall.bind(this, ownerMod, funcName + \"_async\", this.imports[funcName].isAsyncFunction ? true : false, this.imports[funcName].noBlock ? -1 : twrEventQueueReceive.registerEvent(), this.interfaceName);\n                }\n                else {\n                    wasmImports[funcName] = this.remoteProcedureCall.bind(this, ownerMod, funcName, this.imports[funcName].isAsyncFunction ? true : false, this.imports[funcName].noBlock ? -1 : twrEventQueueReceive.registerEvent(), this.interfaceName);\n                }\n            }\n        }\n        return wasmImports;\n    }\n}\n/////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////\n// this is global in the JS main thread address space\n// all libraries are registered here\nexport class twrLibraryInstanceRegistry {\n    // every twrLibrary instance goes here\n    static libInstances = [];\n    // Each unique interface has one representative and arbitrary instance in libInterfaceInstances.\n    // A unique interfaceName represents a unique interface.  Multiple classes may have the same interfaceName.\n    // (A class is identified by libSourcePath)\n    // An undefined interfaceName (anonymous interface) means that only one instance of that class is allowed\n    // and also means that the class has a unique anonymous interface.\n    static libInterfaceInstances = [];\n    // create a pairing between an instance of type ILibraryBase and an integer ID\n    static register(libInstance) {\n        if (libInstance.imports === undefined)\n            throw new Error(\"twrLibrary derived class is missing imports.\");\n        if (libInstance.libSourcePath === undefined)\n            throw new Error(\"twrLibrary derived class is missing libSourcePath.\");\n        // register the new instance\n        twrLibraryInstanceRegistry.libInstances.push(libInstance);\n        const id = twrLibraryInstanceRegistry.libInstances.length - 1;\n        // if this has a named interface, add it to the interface list, but only add it once.\n        if (libInstance.interfaceName) {\n            const interfaceID = this.getLibraryInstanceByInterfaceName(libInstance.interfaceName);\n            if (interfaceID === undefined)\n                twrLibraryInstanceRegistry.libInterfaceInstances.push(libInstance);\n            else {\n                // verify the interface are compatible.  If they don't its a coding error\n                const alreadyRegisteredLibInstance = twrLibraryInstanceRegistry.libInterfaceInstances[interfaceID];\n                for (let i = 0; i < twrLibraryInstanceRegistry.libInterfaceInstances.length; i++)\n                    if (twrLibraryInstanceRegistry.libInterfaceInstances[i].interfaceName === libInstance.interfaceName)\n                        if (!CompareImports(twrLibraryInstanceRegistry.libInterfaceInstances[i].imports, libInstance.imports))\n                            throw new Error(`interface definitions (imports) ${libInstance.interfaceName} are not compatible between class ${libInstance.libSourcePath} and ${alreadyRegisteredLibInstance.libSourcePath}`);\n                // TODO!!  This is here to make twrcondummy.ts work correctly (a console without a complete interface might be loaded before twrcondummy.ts)\n                if (Object.keys(libInstance.imports).length > Object.keys(alreadyRegisteredLibInstance.imports).length)\n                    twrLibraryInstanceRegistry.libInterfaceInstances[interfaceID] = libInstance;\n            }\n        }\n        // else this the type of Class that should only have a single instance\n        else {\n            // then check for the error where a Class is registered more than once\n            if (this.getLibraryInstanceByClass(libInstance.libSourcePath))\n                throw new Error(\"A second twrLibrary instance was registered but interfaceName===undefined\");\n            // if no error, than add anonymous interface to the list\n            twrLibraryInstanceRegistry.libInterfaceInstances.push(libInstance);\n        }\n        return id;\n    }\n    static getLibraryInstance(id) {\n        if (id < 0 || id >= twrLibraryInstanceRegistry.libInstances.length)\n            throw new Error(\"Invalid console ID: \" + id);\n        return twrLibraryInstanceRegistry.libInstances[id];\n    }\n    static getLibraryInstanceByInterfaceName(name) {\n        for (let i = 0; i < twrLibraryInstanceRegistry.libInterfaceInstances.length; i++)\n            if (twrLibraryInstanceRegistry.libInterfaceInstances[i].interfaceName === name)\n                return i;\n        return undefined;\n    }\n    static getLibraryInstanceByClass(path) {\n        for (let i = 0; i < twrLibraryInstanceRegistry.libInterfaceInstances.length; i++)\n            if (twrLibraryInstanceRegistry.libInstances[i].libSourcePath === path)\n                return twrLibraryInstanceRegistry.libInstances;\n        return undefined;\n    }\n    static getLibraryInstanceID(libInstance) {\n        for (let i = 0; i < twrLibraryInstanceRegistry.libInstances.length; i++)\n            if (twrLibraryInstanceRegistry.libInstances[i] == libInstance)\n                return i;\n        throw new Error(\"libInstance not in registry\");\n    }\n}\n// this is created in each twrWasmModuleAsyncProxy Worker thread\n// if there are multiple twrWasmModuleAsyncProxy instances, there will one Registry in each Worker\n// TODO!! This isn't used or probably correct\nexport class twrLibraryInstanceProxyRegistry {\n    static libProxyInstances = [];\n    // create a pairing between an instance of type IConsole and an integer ID\n    static registerProxy(libProxyInstance) {\n        twrLibraryInstanceProxyRegistry.libProxyInstances[libProxyInstance.id] = libProxyInstance;\n        return libProxyInstance.id;\n    }\n    static getLibraryInstanceProxy(id) {\n        if (id < 0 || id >= twrLibraryInstanceProxyRegistry.libProxyInstances.length)\n            throw new Error(\"Invalid console ID: \" + id);\n        return twrLibraryInstanceProxyRegistry.libProxyInstances[id];\n    }\n    static getLibraryInstanceID(libProxyInstance) {\n        for (let i = 0; i < twrLibraryInstanceProxyRegistry.libProxyInstances.length; i++)\n            if (twrLibraryInstanceProxyRegistry.libProxyInstances[i] == libProxyInstance)\n                return i;\n        throw new Error(\"libProxyInstance not in registry\");\n    }\n}\nfunction shallowEqual(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    // If the objects have different numbers of keys, they aren't equal\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    // Check if all keys and their values are equal\n    return keys1.every(key => obj1[key] === obj2[key]);\n}\nfunction CompareImports(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    // they don't have to have the same number of imports, but every import that exists in both needs to match\n    for (let i = 0; i < keys1.length; i++) {\n        const k = keys1[i];\n        if (obj2[k] && !shallowEqual(obj1[k], obj2[k]))\n            return false;\n    }\n    for (let i = 0; i < keys2.length; i++) {\n        const k = keys2[i];\n        if (obj1[k] && !shallowEqual(obj1[k], obj2[k]))\n            return false;\n    }\n    return true;\n}\n//# sourceMappingURL=twrlibrary.js.map","import {IWasmModule} from \"./twrmod.js\"\nimport {IWasmModuleAsync} from \"./twrmodasync.js\"\nimport {twrWasmModuleAsyncProxy} from \"./twrmodasyncproxy.js\"\nimport {twrEventQueueReceive} from \"./twreventqueue.js\"\n\n/////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////\n\n// TODO List\n// Should we:  Allow callbacks while blocking call is waiting? Not on \"return value\" waits, but on functions like sleep.\n// add a function to allow twrWasmModuleAsync c code (like main) to process events without returning to JavaScript\n// fix example/lib/out and .gitignore so correct build artifacts are checked in  \n// resolve fact that libraries with interfaces are passed in the \"io\" option.  Eg Allow \"libs\" or other synonym.\n// current implementation has no libs: (akin to io:).  \n// consider if  twrcondummy should be removed.  Search for TODO, there are multiple places needing fixing.  Possible solutions:\n//     (a) have interfaceName also list every function in the interface.  \n//         create placholder \"internal error\" functions when a console/library does not implement an interface function.\n//     (b) require each function in interface in list each import correctly (either add isUnused or add dummy functions with exception)\n//     (c) merge imports (this won't work because a complete set of functions might not be loaded by api user)\n//     also search for \"TODO!!  This is here to make twrcondummy.ts\"\n// changed conterm example to use debug -- either change back, or change index description\n// deal with twrConGetIDFromNameImpl.  Note that twr_register_callback and twrConGetIDFromNameImpl are added in two different places.  Unify\n// change callingMod:IWasmModule|IWasmModuleAsync to IWasmBase ?\n// add IWasmBase instead of using twrWasmBase\n// add IWasmModuleBase ?\n// Consider and handle app exit (stop events from being posted post app exit)\n// Add postEvent example that includes arguments\n// Implement event loop processing (get_next_event, get_filter_event)\n// Issue with above: how do I get the event parameters?\n// implement event loop in twrWasmModule (currently only in twrWasmModuleAsync) ?\n// Need better name collision prevention on imported functions\n// Are too many inefficient tickleEventLoop being sent?\n// add codepage arg to register callback?\n\n/////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////\n\nexport type TLibImports = { [key:string]: {isAsyncFunction?:boolean, isModuleAsyncOnly?:boolean, isCommonCode?:boolean, noBlock?:boolean}};\nexport type TLibraryProxyParams = [\"twrLibraryProxy\", libID:number, imports:TLibImports, libSourcePath:string, interfaceName: string|undefined];\n\n// TLibraryMessage is sent from twrWasmModuleAsyncProxy (worker thread) to twrWasmModuleAsync\nexport type TLibraryMessage = [\"twrLibrary\", libID:number, funcName:string, isAsyncOverride:boolean, returnValueEventID:number, ...args:any[]];\n\n/////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////\n\nexport abstract class twrLibrary  {\n   abstract id: number;\n\n   // must be set by derived class to describe each library function.  See docs.\n   abstract imports: TLibImports;\n\n   // libSourcePath must be set like this:\n   //    use \"libSourcePath = new URL(import.meta.url).pathname\" \n   //    above works for both bundled and unbundled -- at least with parcel\n   //    example: \"/lib-js/twrlibmath.js\" \n   abstract libSourcePath: string;\n\n   // set to unique name if multiple instances allowed (must all expose the same interface) (e.g. consoles).  \n   // When true, APIs will expect first arg to be library ID.\n   interfaceName?:string;\n\n   constructor() {\n   }\n\n   // the actual twrLibrary is created outside of a specific wasm module, so isn't paired to a specific module\n   // however, each call to getImports is paired to a specific wasm module\n   // getImports returns Wasm Module imports that will be added to this wasm module's WebAssembly.ModuleImports\n   // getImports expects that the derived class has created a \"this.import\" with a list of function names (as strings)\n   // getImports is called by twrWasmModule\n   getImports(callingMod:IWasmModule) {\n      if (callingMod.isTwrWasmModuleAsync) throw new Error(\"unsupported module type (expecting twrWasmModule\");\n\n      let wasmImports:{[key:string]: Function}={};\n      const derivedInstanceThis=(this as unknown) as {[key:string]:(mod:IWasmModule, ...params:any)=>void};\n\n      if (this.imports===undefined) throw new Error(\"twrLibrary derived class is missing imports.\");\n      if (this.libSourcePath===undefined) throw new Error(\"twrLibrary derived class is missing libSourcePath.\");\n      \n      for (let funcName in this.imports) {\n         if (this.imports[funcName].isModuleAsyncOnly) {\n            const nullFun=() => {\n               throw new Error(\"Invalid call to unimplemented twrLibrary 'import' function (isModuleAsyncOnly was used): \"+funcName);\n            }\n            wasmImports[funcName]=nullFun;\n         }\n         else {\n            if (!derivedInstanceThis[funcName]) \n               throw new Error(\"twrLibrary 'import' function is missing: \"+funcName);\n\n            if (this.interfaceName) {\n               // in this case, this particular instance represents the class\n               // but the actual instance needs to be retrieved at runtime using the libID & registry\n               // since only once set of WasmImports is created for each class\n\n               const libFunc = (funcName: string, mod:IWasmModule, libID:number, ...params: any[]):any => {\n                  const lib=twrLibraryInstanceRegistry.getLibraryInstance(libID);\n                  const derivedLib=(lib as unknown) as {[key:string]:(callingMod:IWasmModule, ...params:any)=>void};\n                  const f=derivedLib[funcName];\n                  if (!f) throw new Error(`Library function not found. id=${libID}, funcName=${funcName}`);\n                  return f.call(derivedLib, mod, ...params);\n               }\n               \n               wasmImports[funcName]=libFunc.bind(null, funcName, callingMod);  // rest of function args are also passed to libFunc when using bind\n            }\n            else {\n               wasmImports[funcName]=derivedInstanceThis[funcName].bind(this, callingMod);\n            }\n         }\n      }\n\n      return wasmImports;\n   }\n\n   // this function is called by twrWasmModuleAsync, and sent to the corresponding twrWasmModuleAsyncProxy\n   getProxyParams() : TLibraryProxyParams {\n      return [\"twrLibraryProxy\", this.id, this.imports, this.libSourcePath, this.interfaceName];\n   }\n\n   // called by twrWasmModuleAsync\n   async processMessageFromProxy(msg:TLibraryMessage, mod:IWasmModuleAsync) {\n      const [msgClass, libID, funcName, doAwait, returnValueEventID, ...params]=msg;\n      if (this.interfaceName && twrLibraryInstanceRegistry.getLibraryInstance(libID).libSourcePath!=this.libSourcePath)\n            throw new Error(\"internal error\");  // should never happen\n      else if (libID!=this.id) throw new Error(\"internal error\");  // should never happen\n      \n      if (!mod.isTwrWasmModuleAsync) throw new Error(\"internal error\");\n\n      const libThis=twrLibraryInstanceRegistry.getLibraryInstance(libID);\n      const derivedInstance=(libThis as unknown) as {[key:string]: ( (mod:IWasmModuleAsync|IWasmModule, ...params:any[])=>any) };\n      if (!derivedInstance[funcName]) throw new Error(\"twrLibrary derived class missing 'import' function: \"+funcName);\n      \n      let retVal;\n      if (doAwait)\n         retVal=await derivedInstance[funcName](mod, ...params);\n      else\n         retVal=derivedInstance[funcName](mod, ...params);\n\n      if (returnValueEventID>-1) // -1 means noBlock true\n         mod.eventQueueSend.postEvent(returnValueEventID, retVal);\n   }   \n\n}\n\n/////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////\n\nexport class twrLibraryProxy {\n   id:number;\n   imports: TLibImports;\n   libSourcePath:string;\n   interfaceName?:string;\n   called=false;\n\n   //every module instance has its own twrLibraryProxy\n\n   constructor(params:TLibraryProxyParams) {\n       const [className, id, imports, libSourcePath, interfaceName] = params;\n       this.id=id;\n       this.imports=imports;\n       this.libSourcePath=libSourcePath;\n       this.interfaceName=interfaceName;\n   }\n\n   private remoteProcedureCall(ownerMod:twrWasmModuleAsyncProxy, funcName:string, isAsyncFunction:boolean, returnValueEventID:number, interfaceName:string|undefined, ...args:any[]) {\n      let msg:TLibraryMessage;\n\n      if (interfaceName)\n         msg=[\"twrLibrary\", args[0], funcName, isAsyncFunction, returnValueEventID, ...args.slice(1)];\n      else\n         msg=[\"twrLibrary\", this.id, funcName, isAsyncFunction, returnValueEventID, ...args];\n\n      // postMessage sends message to the JS Main thread that created the twrModAsyncProxy thread\n      // the message processing code discriminates the destination instance by:  \"twrLibrary\", this.id,\n      postMessage(msg);\n      //TODO!! a void return type isn't particularly supported -- it will presumably returned undefined from the JS function, \n      //which will put a zero into the Int32Array used for returnValue\n\n      if (returnValueEventID==-1) {  // -1 means noBlock true\n         return 0;\n      }\n\n      const [id, retVals]=ownerMod.eventQueueReceive.waitEvent(returnValueEventID);\n      if (id!=returnValueEventID) throw new Error(\"internal error\");\n      if (retVals.length!=1) throw new Error(\"internal error\"); \n      return retVals[0];\n   }\n\n   // getProxyImports is called by twrWasmModuleAsyncProxy\n   // it provides the functions that the twrWasmModuleAsync's C code will call\n   // these will RPC to the JS main thread (unless isCommonCode set) and then wait for a return value (unless noBlock) \n   async getProxyImports(ownerMod:twrWasmModuleAsyncProxy) {\n      if (this.called===true) throw new Error(\"getProxyImports should only be called once per twrLibraryProxy instance\");\n      this.called=true;\n\n      let wasmImports:{[key:string]: Function}={};\n      let libClass;\n\n   // now for each twrLibrary import, create the functions that will be added to wasm module imports\n   for (let funcName in this.imports) {\n\n         if (this.imports[funcName].isCommonCode) {\n            if (this.imports[funcName].isAsyncFunction) \n               throw new Error(\"isAsyncFunction can not be used with isCommonCode\");\n            if (libClass===undefined) {\n               if (this.libSourcePath===undefined) \n                  throw new Error(\"undefined libSourcePath\");\n               const libMod=await import(this.libSourcePath);\n               libClass=new libMod.default;\n            }\n            wasmImports[funcName]=libClass[funcName].bind(libClass, ownerMod);\n         }\n         else {\n            if (this.imports[funcName].isAsyncFunction) {\n               wasmImports[funcName]=this.remoteProcedureCall.bind(this, ownerMod, funcName+\"_async\", this.imports[funcName].isAsyncFunction?true:false, this.imports[funcName].noBlock?-1:twrEventQueueReceive.registerEvent(), this.interfaceName);\n            }\n            else {\n               wasmImports[funcName]=this.remoteProcedureCall.bind(this, ownerMod, funcName, this.imports[funcName].isAsyncFunction?true:false, this.imports[funcName].noBlock?-1:twrEventQueueReceive.registerEvent(), this.interfaceName);\n            }\n         }\n      }\n\n      return wasmImports;\n   }\n}\n\n/////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////\n\n// this is global in the JS main thread address space\n// all libraries are registered here\nexport class twrLibraryInstanceRegistry {\n\n   // every twrLibrary instance goes here\n   static libInstances: twrLibrary[]=[];\n\n   // Each unique interface has one representative and arbitrary instance in libInterfaceInstances.\n   // A unique interfaceName represents a unique interface.  Multiple classes may have the same interfaceName.\n   // (A class is identified by libSourcePath)\n   // An undefined interfaceName (anonymous interface) means that only one instance of that class is allowed\n   // and also means that the class has a unique anonymous interface.\n   static libInterfaceInstances: twrLibrary[]=[];\n\n   // create a pairing between an instance of type ILibraryBase and an integer ID\n   static register(libInstance:twrLibrary) {\n\n      if (libInstance.imports===undefined) throw new Error(\"twrLibrary derived class is missing imports.\");\n      if (libInstance.libSourcePath===undefined) throw new Error(\"twrLibrary derived class is missing libSourcePath.\");\n\n      // register the new instance\n      twrLibraryInstanceRegistry.libInstances.push(libInstance);\n      const id=twrLibraryInstanceRegistry.libInstances.length-1;\n\n      // if this has a named interface, add it to the interface list, but only add it once.\n      if (libInstance.interfaceName) {\n         const interfaceID=this.getLibraryInstanceByInterfaceName(libInstance.interfaceName);\n         if (interfaceID===undefined)\n            twrLibraryInstanceRegistry.libInterfaceInstances.push(libInstance);\n         else {\n            // verify the interface are compatible.  If they don't its a coding error\n            const alreadyRegisteredLibInstance=twrLibraryInstanceRegistry.libInterfaceInstances[interfaceID];\n            for (let i=0; i<twrLibraryInstanceRegistry.libInterfaceInstances.length; i++)\n               if (twrLibraryInstanceRegistry.libInterfaceInstances[i].interfaceName===libInstance.interfaceName)\n                  if (!CompareImports(twrLibraryInstanceRegistry.libInterfaceInstances[i].imports, libInstance.imports))\n                     throw new Error(`interface definitions (imports) ${libInstance.interfaceName} are not compatible between class ${libInstance.libSourcePath} and ${alreadyRegisteredLibInstance.libSourcePath}`);\n \n            // TODO!!  This is here to make twrcondummy.ts work correctly (a console without a complete interface might be loaded before twrcondummy.ts)\n            if (Object.keys(libInstance.imports).length > Object.keys(alreadyRegisteredLibInstance.imports).length)\n               twrLibraryInstanceRegistry.libInterfaceInstances[interfaceID]=libInstance;\n         }\n      }\n\n      // else this the type of Class that should only have a single instance\n      else {\n          // then check for the error where a Class is registered more than once\n         if (this.getLibraryInstanceByClass(libInstance.libSourcePath)) \n            throw new Error(\"A second twrLibrary instance was registered but interfaceName===undefined\")\n\n         // if no error, than add anonymous interface to the list\n         twrLibraryInstanceRegistry.libInterfaceInstances.push(libInstance);\n      }\n\n      return id;\n   }\n\n   static getLibraryInstance(id:number) {\n      if (id<0 || id >= twrLibraryInstanceRegistry.libInstances.length)\n         throw new Error(\"Invalid console ID: \"+id);\n\n      return twrLibraryInstanceRegistry.libInstances[id];\n   }\n\n   static getLibraryInstanceByInterfaceName(name:string) {\n      for (let i=0; i<twrLibraryInstanceRegistry.libInterfaceInstances.length; i++)\n         if (twrLibraryInstanceRegistry.libInterfaceInstances[i].interfaceName===name)\n            return i;\n      \n      return undefined;\n   }\n\n   static getLibraryInstanceByClass(path:string) {\n      for (let i=0; i<twrLibraryInstanceRegistry.libInterfaceInstances.length; i++)\n         if (twrLibraryInstanceRegistry.libInstances[i].libSourcePath===path)\n            return twrLibraryInstanceRegistry.libInstances;\n      \n      return undefined;\n   }\n\n   static getLibraryInstanceID(libInstance:twrLibrary) {\n      for (let i=0; i<twrLibraryInstanceRegistry.libInstances.length; i++)\n         if (twrLibraryInstanceRegistry.libInstances[i]==libInstance)\n            return i;\n\n      throw new Error(\"libInstance not in registry\");\n   }\n\n}\n\n// this is created in each twrWasmModuleAsyncProxy Worker thread\n// if there are multiple twrWasmModuleAsyncProxy instances, there will one Registry in each Worker\n// TODO!! This isn't used or probably correct\nexport class twrLibraryInstanceProxyRegistry {\n\n   static libProxyInstances: twrLibraryProxy[]=[];\n\n   // create a pairing between an instance of type IConsole and an integer ID\n   static registerProxy(libProxyInstance:twrLibraryProxy) {\n      twrLibraryInstanceProxyRegistry.libProxyInstances[libProxyInstance.id]=libProxyInstance;\n      return libProxyInstance.id;\n   }\n\n   static getLibraryInstanceProxy(id:number) {\n      if (id<0 || id >= twrLibraryInstanceProxyRegistry.libProxyInstances.length)\n         throw new Error(\"Invalid console ID: \"+id);\n\n      return twrLibraryInstanceProxyRegistry.libProxyInstances[id];\n   }\n\n   static getLibraryInstanceID(libProxyInstance:twrLibraryProxy) {\n      for (let i=0; i<twrLibraryInstanceProxyRegistry.libProxyInstances.length; i++)\n         if (twrLibraryInstanceProxyRegistry.libProxyInstances[i]==libProxyInstance)\n            return i;\n\n      throw new Error(\"libProxyInstance not in registry\");\n   }\n\n}\n\nfunction shallowEqual(obj1:any, obj2:any) {\n   const keys1 = Object.keys(obj1);\n   const keys2 = Object.keys(obj2);\n \n   // If the objects have different numbers of keys, they aren't equal\n   if (keys1.length !== keys2.length) {\n     return false;\n   }\n \n   // Check if all keys and their values are equal\n   return keys1.every(key => obj1[key] === obj2[key]);\n }\n\nfunction CompareImports(obj1:TLibImports, obj2:TLibImports) {\n   const keys1 = Object.keys(obj1);\n   const keys2 = Object.keys(obj2);\n \n   // they don't have to have the same number of imports, but every import that exists in both needs to match\n   for (let i=0; i<keys1.length; i++) {\n      const k=keys1[i];\n      if (obj2[k] && !shallowEqual(obj1[k], obj2[k])) \n         return false;\n   }\n\n   for (let i=0; i<keys2.length; i++) {\n      const k=keys2[i];\n      if (obj1[k] && !shallowEqual(obj1[k], obj2[k])) \n         return false;\n   }\n\n   return true;\n }","import { twrSharedCircularBuffer } from \"./twrcircular.js\";\nconst eventMarker = 0x684610d6; // random positive 32 bit value\nconst mallocMarker = 0x51949385; // random positive 32 bit value\nexport class twrEventQueueSend {\n    circBuffer = new twrSharedCircularBuffer();\n    //TOOD!! unify / rename TOnEventCallback = (eventID:number, ...args:number[])=>void;\n    postEvent(eventID, ...params) {\n        this.circBuffer.writeArray([eventMarker, eventID, params.length, ...params]);\n    }\n    postMalloc(mallocID, size) {\n        this.circBuffer.writeArray([mallocMarker, mallocID, size]);\n    }\n}\nexport class twrEventQueueReceive {\n    circBuffer;\n    pendingEventIDs;\n    pendingEventArgs;\n    ownerMod;\n    static unqiueInt = 1;\n    static onEventCallbacks = [];\n    constructor(ownerMod, eventQueueBuffer) {\n        this.circBuffer = new twrSharedCircularBuffer(eventQueueBuffer);\n        this.pendingEventIDs = [];\n        this.pendingEventArgs = [];\n        this.ownerMod = ownerMod;\n    }\n    readEventRemainder() {\n        const eventID = this.circBuffer.read();\n        if (eventID === undefined)\n            throw new Error(\"internal error\");\n        const argLen = this.circBuffer.read();\n        if (argLen === undefined)\n            throw new Error(\"internal error\");\n        const args = [];\n        for (let i = 0; i < argLen; i++) {\n            const arg = this.circBuffer.read();\n            if (arg === undefined)\n                throw new Error(\"internal error\");\n            args.push(arg);\n        }\n        if (!(eventID in twrEventQueueReceive.onEventCallbacks))\n            throw new Error(\"internal error\");\n        this.pendingEventIDs.push(eventID);\n        this.pendingEventArgs.push(args);\n    }\n    readMallocRemainder() {\n        const mallocID = this.circBuffer.read();\n        if (mallocID === undefined)\n            throw new Error(\"internal error\");\n        const size = this.circBuffer.read();\n        if (size === undefined)\n            throw new Error(\"internal error\");\n        const ptr = this.ownerMod.wasmMem.malloc(size);\n        postMessage([\"twrWasmModule\", mallocID, \"callCOkay\", ptr]); // we are in the twrWasmModuleAsyncProxy main thread\n    }\n    readCommandRemainder(firstValue) {\n        if (firstValue === eventMarker)\n            this.readEventRemainder();\n        else if (firstValue === mallocMarker)\n            this.readMallocRemainder();\n        else\n            throw new Error(\"internal error -- eventMarker or mallocMarker expected but not found\");\n    }\n    // called only if circBuffer not empty\n    readCommand() {\n        const firstValue = this.circBuffer.read();\n        this.readCommandRemainder(firstValue);\n    }\n    readWaitCommand() {\n        const firstValue = this.circBuffer.readWait();\n        this.readCommandRemainder(firstValue);\n    }\n    findEvent(filterEvent) {\n        if (filterEvent === undefined) {\n            return [this.pendingEventIDs.shift(), this.pendingEventArgs.shift(), 0];\n        }\n        const index = this.pendingEventIDs.indexOf(filterEvent);\n        if (index != -1)\n            return [this.pendingEventIDs.splice(index, 1)[0], this.pendingEventArgs.splice(index, 1)[0], index];\n        return [undefined, undefined, undefined];\n    }\n    waitEvent(filterEvent) {\n        while (true) {\n            // empty the queue\n            while (!this.circBuffer.isEmpty())\n                this.readCommand();\n            // is our event in the queue?\n            const [eventID, args, index] = this.findEvent(filterEvent);\n            // execute callbacks up to this filterEvent (so as to call them in order)\n            // if filterEvent not found, index is undefined, which causes doCallbacks to execute all pendingEventIDs\n            // this call commented out so that the C events act like JavaScript events/callbacks (only called when main function finishes)\n            // to consider: allow callbacks in sync blocking functions like sleep (that use await in their implementations)\n            //this.doCallbacks(index); \n            if (eventID && args) {\n                return [eventID, args];\n            }\n            // wait for a new event\n            this.readWaitCommand();\n        }\n    }\n    doCallbacks(upToIndex) {\n        const end = upToIndex ? upToIndex : this.pendingEventIDs.length;\n        console.log(\"end\", end, upToIndex, this.pendingEventIDs.length);\n        for (let i = 0; i < end; i++) {\n            const eventID = this.pendingEventIDs[i];\n            const args = this.pendingEventArgs[i];\n            const onEventCallback = twrEventQueueReceive.onEventCallbacks[eventID];\n            if (onEventCallback) {\n                onEventCallback(eventID, ...args);\n                this.pendingEventIDs.splice(i, 1);\n                this.pendingEventArgs.splice(i, 1);\n            }\n        }\n    }\n    processIncomingCommands() {\n        while (!this.circBuffer.isEmpty())\n            this.readCommand();\n        this.doCallbacks();\n    }\n    //see twrWasmModule.constructor - imports - twr_register_callback:this.registerCallback.bind(this), \n    //TODO!! This static method works for twrWasmModuleAsync, but when/if I implement message loop for twrWasmModule, this may need to change?\n    static registerCallback(funcName, onEventCallback) {\n        if (!onEventCallback)\n            throw new Error(\"registerCallback called with a function name that is not exported from the module\");\n        this.onEventCallbacks[++this.unqiueInt] = onEventCallback;\n        return this.unqiueInt;\n    }\n    static registerEvent() {\n        this.onEventCallbacks[++this.unqiueInt] = undefined;\n        return this.unqiueInt;\n    }\n}\n//# sourceMappingURL=twreventqueue.js.map","import {twrSharedCircularBuffer} from \"./twrcircular.js\"\nimport {twrWasmModuleAsyncProxy} from \"./twrmodasyncproxy.js\";\n\nconst eventMarker=0x684610d6;    // random positive 32 bit value\nconst mallocMarker=0x51949385;   // random positive 32 bit value\n\nexport class twrEventQueueSend {\n   circBuffer: twrSharedCircularBuffer=new twrSharedCircularBuffer();\n\n//TOOD!! unify / rename TOnEventCallback = (eventID:number, ...args:number[])=>void;\n   postEvent(eventID:number, ...params:number[]):void {\n      this.circBuffer.writeArray([eventMarker, eventID, params.length, ...params]);\n   }\n\n   postMalloc(mallocID:number, size:number) {\n      this.circBuffer.writeArray([mallocMarker, mallocID, size]);\n   }\n}\n\nexport type TOnEventCallback = (eventID:number, ...args:number[])=>void;\n\n\nexport class twrEventQueueReceive {\n   circBuffer: twrSharedCircularBuffer;\n   pendingEventIDs: number[];\n   pendingEventArgs: (number[])[];\n   ownerMod:twrWasmModuleAsyncProxy;\n   static unqiueInt:number=1;\n   static onEventCallbacks:(TOnEventCallback|undefined)[]=[];\n\n   constructor(ownerMod:twrWasmModuleAsyncProxy, eventQueueBuffer:SharedArrayBuffer) {\n      this.circBuffer=new twrSharedCircularBuffer(eventQueueBuffer);\n      this.pendingEventIDs=[];\n      this.pendingEventArgs=[];\n      this.ownerMod=ownerMod;\n   }\n\n   private readEventRemainder() {\n      const eventID=this.circBuffer.read();\n      if (eventID===undefined) throw new Error (\"internal error\");\n      const argLen=this.circBuffer.read();\n      if (argLen===undefined) throw new Error (\"internal error\");\n      const args:number[]=[];\n      for (let i=0; i < argLen; i++) {\n         const arg=this.circBuffer.read();\n         if (arg===undefined) throw new Error (\"internal error\");\n         args.push(arg);\n      }\n\n      if (!(eventID in twrEventQueueReceive.onEventCallbacks))\n         throw new Error(\"internal error\");\n\n      this.pendingEventIDs.push(eventID);\n      this.pendingEventArgs.push(args);\n   }\n\n   private readMallocRemainder() {\n      const mallocID=this.circBuffer.read();\n      if (mallocID===undefined) throw new Error (\"internal error\");\n      const size=this.circBuffer.read();\n      if (size===undefined) throw new Error (\"internal error\");\n      const ptr=this.ownerMod.wasmMem.malloc(size);\n      postMessage([\"twrWasmModule\", mallocID, \"callCOkay\", ptr]); // we are in the twrWasmModuleAsyncProxy main thread\n   }\n\n   private readCommandRemainder(firstValue:number|undefined) {\n      if (firstValue===eventMarker) \n         this.readEventRemainder();\n      else if (firstValue===mallocMarker) \n         this.readMallocRemainder();\n      else\n         throw new Error (\"internal error -- eventMarker or mallocMarker expected but not found\");\n   }\n\n   // called only if circBuffer not empty\n   private readCommand() {\n      const firstValue=this.circBuffer.read();\n      this.readCommandRemainder(firstValue);\n   }\n\n   private readWaitCommand() {\n      const firstValue=this.circBuffer.readWait();\n      this.readCommandRemainder(firstValue);\n   }\n\n   private findEvent(filterEvent:number) : [undefined | number, undefined | number[], undefined | number] {\n\n      if (filterEvent===undefined) {\n         return [this.pendingEventIDs.shift(), this.pendingEventArgs.shift(), 0]\n      }\n\n      const index=this.pendingEventIDs.indexOf(filterEvent);\n      if (index!=-1)\n         return [this.pendingEventIDs.splice(index, 1)[0], this.pendingEventArgs.splice(index, 1)[0], index];\n\n      return [undefined, undefined, undefined];\n   }\n\n   \n   waitEvent(filterEvent:number) : [eventID:number, args:number[]] {\n      while (true) {\n         // empty the queue\n         while (!this.circBuffer.isEmpty())\n            this.readCommand();\n\n         // is our event in the queue?\n         const [eventID, args, index]=this.findEvent(filterEvent);\n         // execute callbacks up to this filterEvent (so as to call them in order)\n         // if filterEvent not found, index is undefined, which causes doCallbacks to execute all pendingEventIDs\n         // this call commented out so that the C events act like JavaScript events/callbacks (only called when main function finishes)\n         // to consider: allow callbacks in sync blocking functions like sleep (that use await in their implementations)\n         //this.doCallbacks(index); \n         if (eventID && args) {\n         return [eventID, args];\n         }\n\n         // wait for a new event\n         this.readWaitCommand();\n      }\n   }\n\n   private doCallbacks(upToIndex?:number) {\n      const end=upToIndex?upToIndex:this.pendingEventIDs.length;\n      console.log(\"end\",end, upToIndex, this.pendingEventIDs.length);\n      for (let i=0; i<end; i++) {\n         const eventID=this.pendingEventIDs[i];\n         const args=this.pendingEventArgs[i];\n         const onEventCallback=twrEventQueueReceive.onEventCallbacks[eventID];\n         if (onEventCallback) {\n            onEventCallback(eventID, ...args);\n            this.pendingEventIDs.splice(i, 1);\n            this.pendingEventArgs.splice(i, 1);\n         }\n      }\n   }\n\n   processIncomingCommands() {\n      while (!this.circBuffer.isEmpty())\n         this.readCommand();\n\n      this.doCallbacks();\n   }\n\n   //see twrWasmModule.constructor - imports - twr_register_callback:this.registerCallback.bind(this), \n   //TODO!! This static method works for twrWasmModuleAsync, but when/if I implement message loop for twrWasmModule, this may need to change?\n   static registerCallback(funcName:string, onEventCallback:TOnEventCallback) {\n      if (!onEventCallback) throw new Error(\"registerCallback called with a function name that is not exported from the module\")\n      this.onEventCallbacks[++this.unqiueInt]=onEventCallback;\n      return this.unqiueInt;\n   }\n\n   static registerEvent() {\n      this.onEventCallbacks[++this.unqiueInt]=undefined;\n      return this.unqiueInt;\n   }\n\n}","//\n// This class implements a circular buffer that the main javascript thread can write to, \n// and a blocking WebWorker thread can read from.  This allows keyboard characters to be transferred from the main JS thread to a WebWorker thread.\n// The WebWorker can use the readWait() function to sleep, w/o participating in the normal \n// async callback dispatch method.  This allows a C program that is a single blocking loop to receive input from the primary javascript thread.\n// readWait() is used used when io_getc32() or io_mbgetstr() is called from a C function.\n//\nconst RDIDX = 0;\nconst WRIDX = 1;\nconst LEN = 256;\n// A single thread can read and a separate single thread can write.  With these constraints Atomic operations are not needed.\n// the first 256 array entries are the circular buffer\n// the next two are used for the read and write index\n//!!!! I am using --enable-features=SharedArrayBuffer; see the SharedArrayBuffer docs for COR issues when going to a live web server\nexport class twrSharedCircularBuffer {\n    saBuffer;\n    f64Array;\n    i32Array;\n    constructor(sa) {\n        if (typeof window !== 'undefined') { // this check only works if window defined (not a worker thread)\n            if (!crossOriginIsolated && !(window.location.protocol === 'file:'))\n                throw new Error(\"twrSharedCircularBuffer constructor, crossOriginIsolated=\" + crossOriginIsolated + \". See SharedArrayBuffer docs.\");\n        }\n        if (sa)\n            this.saBuffer = sa;\n        else\n            this.saBuffer = new SharedArrayBuffer(LEN * 8 + 4 + 4); // LEN Float64's + RDIDX and WRIDX (both Int32)\n        this.f64Array = new Float64Array(this.saBuffer, 8);\n        this.i32Array = new Int32Array(this.saBuffer, 0, 2);\n        this.i32Array[RDIDX] = 0;\n        this.i32Array[WRIDX] = 0;\n    }\n    silentWrite(n) {\n        let i = this.i32Array[WRIDX];\n        this.f64Array[i] = n;\n        i++;\n        if (i == LEN)\n            i = 0;\n        this.i32Array[WRIDX] = i;\n    }\n    writeArray(arr) {\n        if (arr.length > 0) {\n            for (let i = 0; i < arr.length; i++)\n                this.silentWrite(arr[i]);\n            Atomics.notify(this.i32Array, WRIDX);\n        }\n    }\n    write(n) {\n        this.silentWrite(n);\n        Atomics.notify(this.i32Array, WRIDX);\n    }\n    read() {\n        if (!this.isEmpty()) {\n            let i = this.i32Array[RDIDX];\n            let n = this.f64Array[i];\n            i++;\n            if (i == LEN)\n                i = 0;\n            this.i32Array[RDIDX] = i;\n            return n;\n        }\n        else\n            return undefined;\n    }\n    readWait() {\n        let retVal = this.read();\n        if (retVal !== undefined)\n            return retVal;\n        const rdptr = this.i32Array[RDIDX];\n        // verifies that a shared memory location still contains a given value and if so sleeps until notified.\n        Atomics.wait(this.i32Array, WRIDX, rdptr);\n        retVal = this.read();\n        if (retVal === undefined)\n            throw new Error(\"internal error\");\n        return retVal;\n    }\n    isEmpty() {\n        return this.i32Array[RDIDX] == this.i32Array[WRIDX];\n    }\n}\n//# sourceMappingURL=twrcircular.js.map","//\n// This class implements a circular buffer that the main javascript thread can write to, \n// and a blocking WebWorker thread can read from.  This allows keyboard characters to be transferred from the main JS thread to a WebWorker thread.\n// The WebWorker can use the readWait() function to sleep, w/o participating in the normal \n// async callback dispatch method.  This allows a C program that is a single blocking loop to receive input from the primary javascript thread.\n// readWait() is used used when io_getc32() or io_mbgetstr() is called from a C function.\n//\n\nconst RDIDX=0;\nconst WRIDX=1;\nconst LEN=256;\n\n// A single thread can read and a separate single thread can write.  With these constraints Atomic operations are not needed.\n// the first 256 array entries are the circular buffer\n// the next two are used for the read and write index\n\n//!!!! I am using --enable-features=SharedArrayBuffer; see the SharedArrayBuffer docs for COR issues when going to a live web server\n\nexport class twrSharedCircularBuffer {\n   saBuffer:SharedArrayBuffer;\n   f64Array:Float64Array;\n   i32Array:Int32Array;\n \n   constructor (sa?:SharedArrayBuffer) {\n      if (typeof window !== 'undefined') {  // this check only works if window defined (not a worker thread)\n         if (!crossOriginIsolated && !(window.location.protocol === 'file:')) \n            throw new Error(\"twrSharedCircularBuffer constructor, crossOriginIsolated=\"+crossOriginIsolated+\". See SharedArrayBuffer docs.\");\n      }\n      if (sa) this.saBuffer=sa;\n      else this.saBuffer=new SharedArrayBuffer(LEN*8+4+4);  // LEN Float64's + RDIDX and WRIDX (both Int32)\n      this.f64Array=new Float64Array(this.saBuffer, 8);\n      this.i32Array=new Int32Array(this.saBuffer, 0, 2);\n      this.i32Array[RDIDX]=0;\n      this.i32Array[WRIDX]=0;\n   }\n\n   private silentWrite(n:number) {\n      let i=this.i32Array[WRIDX];\n      this.f64Array[i]=n;\n      i++;\n      if (i==LEN) i=0;\n      this.i32Array[WRIDX]=i;  \n   }\n\n   writeArray(arr:number[]) {\n      if (arr.length>0) {\n         for (let i=0; i<arr.length; i++)\n            this.silentWrite(arr[i]);\n         Atomics.notify(this.i32Array, WRIDX);\n      }\n   }\n\n   write(n:number) {\n      this.silentWrite(n);\n      Atomics.notify(this.i32Array, WRIDX);   \n   }\n\n   read() {\n        if (!this.isEmpty()) {\n            let i=this.i32Array[RDIDX];\n            let n=this.f64Array[i];\n            i++;\n            if (i==LEN) i=0;\n            this.i32Array[RDIDX]=i;\n            return n;\n        }\n      else\n         return undefined;\n   }\n\n   readWait():number {\n      let retVal=this.read();\n      if (retVal!==undefined) return retVal;\n\n      const rdptr=this.i32Array[RDIDX];\n      // verifies that a shared memory location still contains a given value and if so sleeps until notified.\n      Atomics.wait(this.i32Array, WRIDX, rdptr);\n      retVal=this.read();\n      if (retVal===undefined) throw new Error(\"internal error\");\n      return retVal;\n   }\n\n    isEmpty():boolean {\n        return this.i32Array[RDIDX]==this.i32Array[WRIDX];\n    }\n}\n","/*\n    * callC takes an array where:\n    * the first entry is the name of the C function in the Wasm module to call (must be exported, typically via the --export clang flag)\n    * and the next entries are a variable number of arguments to pass to the C function, of type\n    * number - converted to int32 or float64 as appropriate\n   * bigint - converted to int64\n    * string - converted to a an index (ptr) into a module Memory returned via stringToMem()\n    * ArrayBuffer - the array is loaded into module memory via putArrayBuffer\n    */\nexport class twrWasmCall {\n    exports;\n    mem;\n    constructor(mem, exports) {\n        if (!exports)\n            throw new Error(\"WebAssembly.Exports undefined\");\n        this.exports = exports;\n        this.mem = mem;\n    }\n    callCImpl(fname, cparams = []) {\n        if (!this.exports[fname])\n            throw new Error(\"callC: function '\" + fname + \"' not in export table.  Use --export wasm-ld flag.\");\n        const f = this.exports[fname];\n        let cr = f(...cparams);\n        return cr;\n    }\n    callC(params) {\n        const cparams = this.preCallC(params);\n        let retval = this.callCImpl(params[0], cparams);\n        this.postCallC(cparams, params);\n        return retval;\n    }\n    // convert an array of arguments to numbers by stuffing contents into malloc'd Wasm memory\n    preCallC(params) {\n        if (!(params.constructor === Array))\n            throw new Error(\"callC: params must be array, first arg is function name\");\n        if (params.length == 0)\n            throw new Error(\"callC: missing function name\");\n        let cparams = [];\n        let ci = 0;\n        for (let i = 1; i < params.length; i++) {\n            const p = params[i];\n            switch (typeof p) {\n                case 'number':\n                case 'bigint':\n                    cparams[ci++] = p;\n                    break;\n                case 'string':\n                    cparams[ci++] = this.mem.putString(p);\n                    break;\n                case 'object':\n                    if (p instanceof URL) {\n                        throw new Error(\"URL arg in callC is no longer supported directly.  use module.fetchAndPutURL\");\n                    }\n                    else if (p instanceof ArrayBuffer) {\n                        const r = this.mem.putArrayBuffer(p);\n                        cparams[ci++] = r; // mem index\n                        break;\n                    }\n                default:\n                    throw new Error(\"callC: invalid object type passed in\");\n            }\n        }\n        return cparams;\n    }\n    // free the mallocs; copy array buffer data from malloc back to arraybuffer\n    postCallC(cparams, params) {\n        let ci = 0;\n        for (let i = 1; i < params.length; i++) {\n            const p = params[i];\n            switch (typeof p) {\n                case 'number':\n                case 'bigint':\n                    ci++;\n                    break;\n                case 'string':\n                    this.callCImpl('free', [cparams[ci]]);\n                    ci++;\n                    break;\n                case 'object':\n                    if (p instanceof URL) {\n                        //this.callCImpl('free',[cparams[ci]])\n                        //ci=ci+2;\n                        throw new Error(\"internal error\");\n                    }\n                    else if (p instanceof ArrayBuffer) {\n                        const u8 = new Uint8Array(p);\n                        const idx = cparams[ci];\n                        for (let j = 0; j < u8.length; j++)\n                            u8[j] = this.mem.mem8[idx + j];\n                        this.callCImpl('free', [idx]);\n                        ci++;\n                        break;\n                    }\n                    else\n                        throw new Error(\"postCallC: internal error A\");\n                default:\n                    throw new Error(\"postCallC: internal error B\");\n            }\n        }\n        return cparams;\n    }\n}\nexport class twrWasmModuleCallAsync {\n    mem;\n    callCImpl;\n    constructor(mem, callCImpl) {\n        this.mem = mem;\n        this.callCImpl = callCImpl;\n    }\n    // convert an array of arguments to numbers by stuffing contents into malloc'd Wasm memory\n    async preCallC(params) {\n        if (!(params.constructor === Array))\n            throw new Error(\"callC: params must be array, first arg is function name\");\n        if (params.length == 0)\n            throw new Error(\"callC: missing function name\");\n        let cparams = [];\n        let ci = 0;\n        for (let i = 1; i < params.length; i++) {\n            const p = params[i];\n            switch (typeof p) {\n                case 'number':\n                case 'bigint':\n                    cparams[ci++] = p;\n                    break;\n                case 'string':\n                    cparams[ci++] = await this.mem.putString(p);\n                    break;\n                case 'object':\n                    if (p instanceof URL) {\n                        throw new Error(\"URL arg in callC is no longer supported directly.  use module.fetchAndPutURL\");\n                    }\n                    else if (p instanceof ArrayBuffer) {\n                        const r = await this.mem.putArrayBuffer(p);\n                        cparams[ci++] = r; // mem index\n                        break;\n                    }\n                default:\n                    throw new Error(\"callC: invalid object type passed in\");\n            }\n        }\n        return cparams;\n    }\n    // free the mallocs; copy array buffer data from malloc back to arraybuffer\n    async postCallC(cparams, params) {\n        let ci = 0;\n        for (let i = 1; i < params.length; i++) {\n            const p = params[i];\n            switch (typeof p) {\n                case 'number':\n                case 'bigint':\n                    ci++;\n                    break;\n                case 'string':\n                    await this.callCImpl('free', [cparams[ci]]);\n                    ci++;\n                    break;\n                case 'object':\n                    if (p instanceof URL) {\n                        //await this.callCImpl('free',[cparams[ci]])\n                        //ci=ci+2;\n                        throw new Error(\"internal error\");\n                    }\n                    else if (p instanceof ArrayBuffer) {\n                        const u8 = new Uint8Array(p);\n                        const idx = cparams[ci];\n                        for (let j = 0; j < u8.length; j++)\n                            u8[j] = this.mem.mem8[idx + j]; // mem8 is a Uint8Array view of the module's WebAssembly Memory\n                        await this.callCImpl('free', [idx]);\n                        ci++;\n                        break;\n                    }\n                    else\n                        throw new Error(\"postCallC: internal error A\");\n                default:\n                    throw new Error(\"postCallC: internal error B\");\n            }\n        }\n        return cparams;\n    }\n}\n//# sourceMappingURL=twrwasmcall.js.map","/* \n\t* callC takes an array where:\n\t* the first entry is the name of the C function in the Wasm module to call (must be exported, typically via the --export clang flag)\n\t* and the next entries are a variable number of arguments to pass to the C function, of type\n\t* number - converted to int32 or float64 as appropriate\n   * bigint - converted to int64\n\t* string - converted to a an index (ptr) into a module Memory returned via stringToMem()\n\t* ArrayBuffer - the array is loaded into module memory via putArrayBuffer\n    */\n\nimport {twrWasmMemory, twrWasmMemoryAsync} from \"./twrwasmmem\";\n\n\nexport class twrWasmCall {\n   exports: WebAssembly.Exports;\n   mem: twrWasmMemory;\n\n   constructor(mem:twrWasmMemory, exports:WebAssembly.Exports) {\n      if (!exports) throw new Error(\"WebAssembly.Exports undefined\");\n\n      this.exports=exports;\n      this.mem=mem;\n   }\n\n   callCImpl(fname:string, cparams:(number|bigint)[]=[]) {\n      if (!this.exports[fname]) throw new Error(\"callC: function '\"+fname+\"' not in export table.  Use --export wasm-ld flag.\");\n      const f = this.exports[fname] as Function;\n      let cr=f(...cparams);\n\n      return cr;\n   }\n\n   callC(params:[string, ...(string|number|bigint|ArrayBuffer)[]]) {\n      const cparams=this.preCallC(params);\n      let retval = this.callCImpl(params[0], cparams);\n      this.postCallC(cparams, params);\n      return retval;\n   }\n   \n   // convert an array of arguments to numbers by stuffing contents into malloc'd Wasm memory\n   preCallC(params:[string, ...(string|number|bigint|ArrayBuffer)[]]) {\n   \n      if (!(params.constructor === Array)) throw new Error (\"callC: params must be array, first arg is function name\");\n      if (params.length==0) throw new Error(\"callC: missing function name\");\n   \n      let cparams:(number|bigint)[]=[];\n      let ci=0;\n      for (let i=1; i < params.length; i++) {\n         const p=params[i];\n         switch (typeof p) {\n            case 'number':\n            case 'bigint':\n               cparams[ci++]=p;\n               break;\n            case 'string':\n               cparams[ci++]=this.mem.putString(p);\n               break;\n            case 'object':\n               if (p instanceof URL) {\n                  throw new Error(\"URL arg in callC is no longer supported directly.  use module.fetchAndPutURL\");\n               }\n               else if (p instanceof ArrayBuffer) {\n                  const r=this.mem.putArrayBuffer(p);\n                  cparams[ci++]=r;  // mem index\n                  break;\n               }\n            default:\n               throw new Error (\"callC: invalid object type passed in\");\n         }\n      }\n   \n      return cparams;\n   }\n\n   // free the mallocs; copy array buffer data from malloc back to arraybuffer\n   postCallC(cparams:(number|bigint)[], params:[string, ...(string|number|bigint|ArrayBuffer)[]]) {\n\n      let ci=0;\n      for (let i=1; i < params.length; i++) {\n         const p=params[i];\n         switch (typeof p) {\n            case 'number':\n            case 'bigint':\n               ci++;\n               break;\n\n            case 'string':\n               this.callCImpl('free',[cparams[ci]])\n               ci++;\n               break;\n               \n            case 'object':\n               if (p instanceof URL) {\n                  //this.callCImpl('free',[cparams[ci]])\n                  //ci=ci+2;\n                  throw new Error(\"internal error\");\n               }\n               else if (p instanceof ArrayBuffer) {\n                  const u8=new Uint8Array(p);\n                  const idx=cparams[ci] as number;\n                  for (let j=0; j<u8.length; j++) \n                     u8[j]=this.mem.mem8[idx+j];  \n                  this.callCImpl('free',[idx])\n                  ci++;\n                  break;\n               }\n               else \n                  throw new Error (\"postCallC: internal error A\");\n\n            default:\n               throw new Error (\"postCallC: internal error B\");\n         }\n      }\n\n      return cparams;\n   }\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n  \nexport type TCallCImplAsync=(fname:string, cparams:(number|bigint)[])=>Promise<any>;\nexport type TCallCAsync=(params:[string, ...(string|number|bigint|ArrayBuffer)[]])=>Promise<any>;\n\nexport class twrWasmModuleCallAsync {\n   mem: twrWasmMemoryAsync;\n   callCImpl: TCallCImplAsync;\n\n   constructor(mem:twrWasmMemoryAsync, callCImpl:TCallCImplAsync) {\n      this.mem=mem;\n      this.callCImpl=callCImpl;\n   }\n\n   // convert an array of arguments to numbers by stuffing contents into malloc'd Wasm memory\n   async preCallC(params:[string, ...(string|number|bigint|ArrayBuffer)[]]) {\n\n      if (!(params.constructor === Array)) throw new Error (\"callC: params must be array, first arg is function name\");\n      if (params.length==0) throw new Error(\"callC: missing function name\");\n\n      let cparams:(number|bigint)[]=[];\n      let ci=0;\n      for (let i=1; i < params.length; i++) {\n         const p=params[i];\n         switch (typeof p) {\n            case 'number':\n            case 'bigint':\n               cparams[ci++]=p;\n               break;\n            case 'string':\n               cparams[ci++]=await this.mem.putString(p);\n               break;\n            case 'object':\n               if (p instanceof URL) {\n                  throw new Error(\"URL arg in callC is no longer supported directly.  use module.fetchAndPutURL\");\n               }\n               else if (p instanceof ArrayBuffer) {\n                  const r=await this.mem.putArrayBuffer(p);\n                  cparams[ci++]=r;  // mem index\n                  break;\n               }\n            default:\n               throw new Error (\"callC: invalid object type passed in\");\n         }\n      }\n\n      return cparams;\n   }\n\n   // free the mallocs; copy array buffer data from malloc back to arraybuffer\n   async postCallC(cparams:(number|bigint)[], params:[string, ...(string|number|bigint|ArrayBuffer)[]]) {\n\n      let ci=0;\n      for (let i=1; i < params.length; i++) {\n         const p=params[i];\n         switch (typeof p) {\n            case 'number':\n            case 'bigint':\n               ci++;\n               break;\n\n            case 'string':\n               await this.callCImpl('free',[cparams[ci]])\n               ci++;\n               break;\n               \n            case 'object':\n               if (p instanceof URL) {\n                  //await this.callCImpl('free',[cparams[ci]])\n                  //ci=ci+2;\n                  throw new Error(\"internal error\");\n               }\n               else if (p instanceof ArrayBuffer) {\n                  const u8=new Uint8Array(p);\n                  const idx=cparams[ci] as number;\n                  for (let j=0; j<u8.length; j++) \n                     u8[j]=this.mem.mem8[idx+j];   // mem8 is a Uint8Array view of the module's WebAssembly Memory\n                  await this.callCImpl('free',[idx])\n                  ci++;\n                  break;\n               }\n               else \n                  throw new Error (\"postCallC: internal error A\");\n\n            default:\n               throw new Error (\"postCallC: internal error B\");\n         }\n      }\n\n      return cparams;\n   }\n\n}\n","import { twrWasmBase } from \"./twrwasmbase.js\";\nimport { twrLibraryProxy, twrLibraryInstanceProxyRegistry } from \"./twrlibrary.js\";\nimport { twrEventQueueReceive } from \"./twreventqueue.js\";\nlet mod;\nself.onmessage = function (e) {\n    //console.log('twrworker.js: message received from main script: '+e.data);\n    const [msgType, ...params] = e.data;\n    if (msgType === 'startup') {\n        const [startMsg] = params;\n        //console.log(\"Worker startup params:\",params);\n        mod = new twrWasmModuleAsyncProxy(startMsg.allProxyParams);\n        mod.loadWasm(startMsg.urlToLoad).then(() => {\n            postMessage([\"twrWasmModule\", undefined, \"startupOkay\"]);\n        }).catch((ex) => {\n            console.log(\".catch: \", ex);\n            postMessage([\"twrWasmModule\", undefined, \"startupFail\", ex]);\n        });\n    }\n    else if (msgType === 'callC') {\n        const [callcID, funcName, cparams] = params;\n        try {\n            const rc = mod.wasmCall.callCImpl(funcName, cparams);\n            postMessage([\"twrWasmModule\", callcID, \"callCOkay\", rc]);\n        }\n        catch (ex) {\n            console.log(\"exception in callC in 'twrmodasyncproxy.js': \\n\", params);\n            console.log(ex);\n            postMessage([\"twrWasmModule\", callcID, \"callCFail\", ex]);\n        }\n    }\n    else if (msgType === 'tickleEventLoop') {\n        mod.eventQueueReceive.processIncomingCommands();\n    }\n    else {\n        console.log(\"twrmodasyncproxy.js: unknown message: \" + e);\n    }\n};\n// ************************************************************************\nexport class twrWasmModuleAsyncProxy extends twrWasmBase {\n    allProxyParams;\n    ioNamesToID;\n    libimports = {};\n    eventQueueReceive;\n    constructor(allProxyParams) {\n        super();\n        this.allProxyParams = allProxyParams;\n        this.ioNamesToID = allProxyParams.ioNamesToID;\n        this.eventQueueReceive = new twrEventQueueReceive(this, allProxyParams.eventQueueBuffer);\n    }\n    async loadWasm(pathToLoad) {\n        // create twrLibraryProxy versions for each twrLibrary\n        for (let i = 0; i < this.allProxyParams.libProxyParams.length; i++) {\n            const params = this.allProxyParams.libProxyParams[i];\n            const lib = new twrLibraryProxy(params);\n            // TODO!! This registry isn't actually being used (yet)?\n            twrLibraryInstanceProxyRegistry.registerProxy(lib);\n            this.libimports = { ...this.libimports, ...await lib.getProxyImports(this) };\n        }\n        const twrConGetIDFromNameImpl = (nameIdx) => {\n            const name = this.wasmMem.getString(nameIdx);\n            const id = this.ioNamesToID[name];\n            if (id)\n                return id;\n            else\n                return -1;\n        };\n        const imports = {\n            ...this.libimports,\n            twrConGetIDFromName: twrConGetIDFromNameImpl,\n        };\n        await super.loadWasm(pathToLoad, imports);\n        // SharedArrayBuffer required for twrWasmModuleAsync/twrWasmModuleAsyncProxy\n        // instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error\n        // (don't check for instanceof SharedArrayBuffer, since it can cause an runtime error when SharedArrayBuffer does not exist)\n        if (this.wasmMem.memory.buffer instanceof ArrayBuffer)\n            throw new Error(\"twrWasmModuleAsync requires shared Memory. Add wasm-ld --shared-memory --no-check-features (see docs)\");\n        else\n            postMessage([\"twrWasmModule\", undefined, \"setmemory\", this.wasmMem.memory]);\n        // init C runtime\n        const init = this.exports.twr_wasm_init;\n        init(this.ioNamesToID.stdio, this.ioNamesToID.stderr, this.ioNamesToID.std2d == undefined ? -1 : this.ioNamesToID.std2d, this.wasmMem.mem8.length);\n    }\n}\n//# sourceMappingURL=twrmodasyncproxy.js.map","import {TModAsyncProxyStartupMsg} from \"./twrmodasync.js\"\nimport {twrWasmBase} from \"./twrwasmbase.js\"\nimport {TLibraryProxyParams, twrLibraryProxy, twrLibraryInstanceProxyRegistry} from \"./twrlibrary.js\"\nimport {twrEventQueueReceive} from \"./twreventqueue.js\"\nexport interface IAllProxyParams {\n   libProxyParams: TLibraryProxyParams[], \n   ioNamesToID: {[key:string]: number},  // name to id mappings for this module\n   eventQueueBuffer: SharedArrayBuffer\n}\n\nlet mod:twrWasmModuleAsyncProxy;\n\nself.onmessage = function(e:MessageEvent<[string, ...params:any]>) {\n    //console.log('twrworker.js: message received from main script: '+e.data);\n\n    const [msgType, ...params]=e.data;\n\n    if (msgType==='startup') {\n        const [startMsg]=params as [TModAsyncProxyStartupMsg];\n        //console.log(\"Worker startup params:\",params);\n        mod=new twrWasmModuleAsyncProxy(startMsg.allProxyParams);\n\n        mod.loadWasm(startMsg.urlToLoad).then( ()=> {\n            postMessage([\"twrWasmModule\", undefined, \"startupOkay\"]);\n        }).catch( (ex)=> {\n            console.log(\".catch: \", ex);\n            postMessage([\"twrWasmModule\", undefined, \"startupFail\", ex]);\n        });\n    }\n    else if (msgType==='callC') {\n         const [callcID, funcName, cparams]=params as [id:number, funcName:string, cparams?: (number | bigint)[]];\n         try {\n            const rc=mod.wasmCall.callCImpl(funcName, cparams);\n            postMessage([\"twrWasmModule\", callcID, \"callCOkay\", rc]);\n         }\n         catch(ex: any) {\n            console.log(\"exception in callC in 'twrmodasyncproxy.js': \\n\", params);\n            console.log(ex);\n            postMessage([\"twrWasmModule\", callcID, \"callCFail\", ex]);\n        }\n    }\n    else if (msgType==='tickleEventLoop') {\n         mod.eventQueueReceive.processIncomingCommands();\n    }\n    else {\n        console.log(\"twrmodasyncproxy.js: unknown message: \"+e);\n    }\n}\n\n// ************************************************************************\n\nexport class twrWasmModuleAsyncProxy extends twrWasmBase {\n   allProxyParams:IAllProxyParams;\n   ioNamesToID: {[key: string]: number};\n   libimports:WebAssembly.ModuleImports ={};\n   eventQueueReceive: twrEventQueueReceive;\n\n   constructor(allProxyParams:IAllProxyParams) {\n      super();\n      this.allProxyParams=allProxyParams;\n      this.ioNamesToID=allProxyParams.ioNamesToID;\n      this.eventQueueReceive=new twrEventQueueReceive(this, allProxyParams.eventQueueBuffer);\n\n   }\n         \n   async loadWasm(pathToLoad: string): Promise<void> {\n\n      // create twrLibraryProxy versions for each twrLibrary\n      for (let i=0; i<this.allProxyParams.libProxyParams.length; i++) {\n         const params=this.allProxyParams.libProxyParams[i];\n         const lib = new twrLibraryProxy(params);\n         // TODO!! This registry isn't actually being used (yet)?\n         twrLibraryInstanceProxyRegistry.registerProxy(lib)\n         this.libimports={...this.libimports, ...await lib.getProxyImports(this)};\n      }        \n      \n       const twrConGetIDFromNameImpl = (nameIdx:number):number => {\n         const name=this.wasmMem.getString(nameIdx);\n         const id=this.ioNamesToID[name];\n         if (id)\n            return id;\n         else\n            return -1;\n      }\n\n      const imports:WebAssembly.ModuleImports = {\n         ...this.libimports,\n         twrConGetIDFromName: twrConGetIDFromNameImpl,\n      }\n   \n      await super.loadWasm(pathToLoad, imports);\n\n      // SharedArrayBuffer required for twrWasmModuleAsync/twrWasmModuleAsyncProxy\n      // instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error\n      // (don't check for instanceof SharedArrayBuffer, since it can cause an runtime error when SharedArrayBuffer does not exist)\n      if (this.wasmMem.memory.buffer instanceof ArrayBuffer) \n         throw new Error(\"twrWasmModuleAsync requires shared Memory. Add wasm-ld --shared-memory --no-check-features (see docs)\");\n      else\n         postMessage([\"twrWasmModule\", undefined, \"setmemory\", this.wasmMem.memory]);\n\n      // init C runtime\n      const init=this.exports.twr_wasm_init as Function;\n      init(this.ioNamesToID.stdio, this.ioNamesToID.stderr, this.ioNamesToID.std2d==undefined?-1:this.ioNamesToID.std2d, this.wasmMem.mem8.length);\n   }\n}\n\n\n"],"names":["$2d37bf399d1bbd15$var$mod","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$e3af081ed3b5b25b$export$599419144fb0094a","$3tyux","$7KBfz","$6QEzV","wasmMem","wasmCall","callC","getImports","imports","twr_register_callback","registerCallback","bind","loadWasm","pathToLoad","response","instance","fetch","ok","statusText","console","log","wasmBytes","arrayBuffer","WebAssembly","instantiate","env","stack","memory","malloc","free","twrWasmMemory","twrWasmCall","funcNameIdx","funcName","getString","onEventCallback","twrEventQueueReceive","$287ed5d7d50ba8d6$export$d835cdc0f59e6ea8","$287ed5d7d50ba8d6$export$f59b88b16ecb0d13","$lVt1a","$287ed5d7d50ba8d6$export$ad21274072098225","mem8","mem16","mem32","memF","memD","constructor","Uint8Array","buffer","Uint16Array","Uint32Array","Float32Array","Float64Array","stringToU8","sin","codePage","codePageUTF8","ru8","encoder","TextEncoder","encode","codePage1252","length","i","to1252","codePageASCII","r","toASCII","copyString","buffer_size","getLong","idx","idx32","Math","floor","setLong","value","getDouble","idx64","setDouble","getShort","strIndex","len","encodeFormat","indexOf","td","TextDecoder","u8todecode","ArrayBuffer","decode","regularUint8Array","getU8Arr","rv","slice","size","dataptr","getU32Arr","putString","putU8","u8a","dest","putArrayBuffer","ab","u8","mallocImpl","callCImpl","$ff656e333be58c07$export$53f1026d7d1c23fb","$ff656e333be58c07$export$29f202393adbf96","$ff656e333be58c07$export$3d6ef5b62200d8d1","$ff656e333be58c07$export$ddea6250b326d061","$ff656e333be58c07$export$2e2bcd8739ae039","$ff656e333be58c07$export$c7de3f2686797480","$ff656e333be58c07$export$8644084c19ac418e","$ff656e333be58c07$export$69111c4ea6e0c4a0","$9lAov","twrLibrary","twrUnicodeCodePointToCodePage","isCommonCode","twrCodePageToUnicodeCodePoint","twrUserLanguage","twrTimeTmLocal","twrUserLconv","twrRegExpTest1252","twrToUpper1252","twrToLower1252","twrStrcoll","twrGetDtnames","libSourcePath","URL","pathname","cpTranslate","cpTranslate2","twrLibraryInstanceRegistry","callingMod","c","convert","outstr","cp","String","fromCodePoint","navigator","language","regexpStrIdx","regexp","RegExp","cstr","decoder1252","test","toLocaleLowerCase","codePointAt","toLocaleUpperCase","lhs","rhs","lhStr","undefined","rhStr","collator","Intl","Collator","compare","tmIdx","epochSecs","d","Date","getSeconds","getMinutes","getHours","getDate","getMonth","getFullYear","getDay","getDayOfYear","isDst","getTimezoneOffset","getTZ","date","start","diff","getTime","timeString","toLocaleTimeString","timeZoneName","includes","timeZone","split","pop","setAndPutString","mem","stridx","lconvIdx","locDec","getLocaleDecimalPoint","locSep","getLocaleThousandsSeparator","getLocalCurrencySymbol","formattedNumber","formatter","NumberFormat","format","replace","charAt","minimumFractionDigits","getLocaleCurrencyDecimalPoint","localeCurrency","tempFormatter","style","currency","resolvedOptions","dtnamesStructIdx","getLocalizedDayName","getLocalizedMonthNames","getLocalizedAM","getLocalizedPM","weekdayType","setDate","DateTimeFormat","weekday","monthType","month","morningDate","dayPeriodPart","formattedParts","hour","hour12","formatToParts","find","part","type","afternoonDate","instr","normalize","decoderUTF8","stream","fromCharCode","$6ce24e5be95ebe48$export$e0c9f0d281d749b5","$6ce24e5be95ebe48$export$67aa3c579b4a4587","$6ce24e5be95ebe48$export$5ab2b60d8abc5018","$6ce24e5be95ebe48$export$fdde87911cbb71ae","interfaceName","isTwrWasmModuleAsync","wasmImports","isModuleAsyncOnly","nullFun","derivedInstanceThis","libFunc","mod","libID","params","lib","getLibraryInstance","f","derivedLib","getProxyParams","processMessageFromProxy","msg","retVal","msgClass","doAwait","returnValueEventID","libThis","derivedInstance","eventQueueSend","postEvent","called","className","remoteProcedureCall","ownerMod","isAsyncFunction","args","postMessage","retVals","eventQueueReceive","waitEvent","getProxyImports","libClass","libMod","default","noBlock","registerEvent","libInstances","libInterfaceInstances","libInstance","push","interfaceID","getLibraryInstanceByInterfaceName","alreadyRegisteredLibInstance","$6ce24e5be95ebe48$var$CompareImports","obj1","obj2","keys1","keys","keys2","k","$6ce24e5be95ebe48$var$shallowEqual","getLibraryInstanceByClass","name","path","getLibraryInstanceID","libProxyInstances","registerProxy","libProxyInstance","getLibraryInstanceProxy","every","key","$4fc713716bd016cb$export$a2b31bb9f5a7d633","$4fc713716bd016cb$export$c59837088adec3b3","$dRr3I","circBuffer","twrSharedCircularBuffer","eventID","writeArray","postMalloc","mallocID","pendingEventIDs","pendingEventArgs","unqiueInt","onEventCallbacks","eventQueueBuffer","readEventRemainder","read","argLen","arg","readMallocRemainder","readCommandRemainder","firstValue","readCommand","readWaitCommand","readWait","findEvent","filterEvent","shift","index","splice","isEmpty","doCallbacks","upToIndex","end","processIncomingCommands","$a17536f066adc156$export$a01cca24f011573a","saBuffer","f64Array","i32Array","sa","window","crossOriginIsolated","location","protocol","SharedArrayBuffer","$a17536f066adc156$var$LEN","Int32Array","silentWrite","arr","Atomics","notify","write","rdptr","wait","$5a49b95e459921ed$export$adadb990ab47e6f0","$5a49b95e459921ed$export$9d4f0c051dfa35a8","fname","cparams","preCallC","retval","postCallC","Array","ci","p","j","$2d37bf399d1bbd15$export$a5f3f3f0bd96bb23","$jxXdl","self","onmessage","msgType","data","startMsg","allProxyParams","urlToLoad","then","catch","ex","callcID","rc","twrWasmBase","ioNamesToID","libimports","libProxyParams","twrLibraryProxy","twrLibraryInstanceProxyRegistry","twrConGetIDFromName","nameIdx","twr_wasm_init","stdio","stderr","std2d"],"version":3,"file":"twrmodasyncproxy.205483dd.js.map"}