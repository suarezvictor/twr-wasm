{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,gB,I,A,E,S,a,E,E,E,O,C,qB,I,A,E,S,kB,E,E,E,O,C,gB,I,A,E,S,a,E,E,E,O,C,qB,I,A,E,S,kB,E,E,E,O,C,kB,I,A,E,S,e,E,E,E,O,C,mB,I,A,E,S,gB,E,E,S,E,S,E,S,E,S,E,S,E,Q,G,E,Q,S,C,C,C,E,E,E,O,C,gB,I,G,I,E,E,S,E,E,S,E,E,S,E,E,QGQM,OAAO,UAAsB,EAAA,qBAAA,CAChC,MAAsC,AACtC,CAAA,OAAkC,AAClC,CAAA,WAA0C,AAG1C,aAAY,EAAc,CAAA,CAAE,CAA5B,CACG,KAAK,CAAC,GACN,IAAI,CAAC,MAAM,CAAC,AAAC,IAAe,MAAM,AAAI,MAAM,gCAAgC,EAChF,IAAI,CAAC,WAAW,CAAC,IAAI,EAAA,6BAAA,CAMjB,IAAM,EAAU,CAAC,EAA0B,EAAa,GAAG,KACxD,IAAM,EAAI,AAAA,CAAA,EAAA,EAAA,kBAAA,AAAA,EAAmB,UAAU,CAAC,GAClC,EAAE,CAAG,CAAC,EAAoC,CAChD,GAAI,CAAC,EAAG,MAAM,AAAI,MAAM,CAAA,6CAAA,EAAgD,EAAI,WAAA,EAAc,EAAQ,CAAE,EACpG,OAAO,EAAE,IAAI,CAAC,KAAQ,EACzB,CAgCA,CAAA,IAAI,CAAC,OAAO,CAAC,CACV,aAAa,EAAA,gBAAA,CACb,eAAe,AAAA,CAAA,EAAA,EAAA,kBAAA,AAAA,EAAmB,IAAI,CAAC,IAAI,EAC3C,aAAa,AAAA,CAAA,EAAA,EAAA,gBAAA,AAAA,EAAiB,IAAI,CAAC,IAAI,EACvC,gBAAgB,AAAA,CAAA,EAAA,EAAA,mBAAA,AAA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","sources":["<anon>","../source/twr-ts/index.ts","../lib-js/twrmod.js","../source/twr-ts/twrmod.ts","../lib-js/twrmodjsmain.js","../source/twr-ts/twrmodjsmain.ts","../lib-js/twrcondiv.js","../source/twr-ts/twrcondiv.ts","../lib-js/twrcircular.js","../source/twr-ts/twrcircular.ts","../lib-js/twrlocale.js","../source/twr-ts/twrlocale.ts","../lib-js/twrcon.js","../source/twr-ts/twrcon.ts","../lib-js/twrconreg.js","../source/twr-ts/twrconreg.ts","../lib-js/twrmodbase.js","../source/twr-ts/twrmodbase.ts","../lib-js/twrfloat.js","../source/twr-ts/twrfloat.ts","../lib-js/twrcanvas.js","../source/twr-ts/twrcanvas.ts","../lib-js/twrsignal.js","../source/twr-ts/twrsignal.ts","../lib-js/twrconterm.js","../source/twr-ts/twrconterm.ts","../lib-js/twrcondebug.js","../source/twr-ts/twrcondebug.ts","../lib-js/twrdate.js","../source/twr-ts/twrdate.ts","../lib-js/twrmodasync.js","../source/twr-ts/twrmodasync.ts","../lib-js/twrwaitingcalls.js","../source/twr-ts/twrwaitingcalls.ts","../../../Users/awood/AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/runtime-js/lib/runtime-eb19af1040c248ed.js","../../../Users/awood/AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire8dfc\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire8dfc\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"57pKS\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmModule\", () => (parcelRequire(\"5baAq\")).twrWasmModule);\n$parcel$export(module.exports, \"twrWasmModuleAsync\", () => (parcelRequire(\"U6Thw\")).twrWasmModuleAsync);\n$parcel$export(module.exports, \"twrConsoleDiv\", () => (parcelRequire(\"8wznr\")).twrConsoleDiv);\n$parcel$export(module.exports, \"twrConsoleTerminal\", () => (parcelRequire(\"a7Sa2\")).twrConsoleTerminal);\n$parcel$export(module.exports, \"twrConsoleDebug\", () => (parcelRequire(\"9kgjF\")).twrConsoleDebug);\n$parcel$export(module.exports, \"twrConsoleCanvas\", () => (parcelRequire(\"eDJ4i\")).twrConsoleCanvas);\n\nvar $5baAq = parcelRequire(\"5baAq\");\n\nvar $U6Thw = parcelRequire(\"U6Thw\");\n\nvar $8wznr = parcelRequire(\"8wznr\");\n\nvar $a7Sa2 = parcelRequire(\"a7Sa2\");\n\nvar $9kgjF = parcelRequire(\"9kgjF\");\n\nvar $eDJ4i = parcelRequire(\"eDJ4i\");\n\n});\nparcelRegister(\"5baAq\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmModule\", () => $3c56311baef528c2$export$3298af74d75b595c);\n\nvar $1Yd7N = parcelRequire(\"1Yd7N\");\n\nvar $5savl = parcelRequire(\"5savl\");\n\nvar $7qrGZ = parcelRequire(\"7qrGZ\");\n\nvar $6MgDX = parcelRequire(\"6MgDX\");\nclass $3c56311baef528c2$export$3298af74d75b595c extends (0, $1Yd7N.twrWasmModuleInJSMain) {\n    malloc;\n    imports;\n    cpTranslate;\n    constructor(opts = {}){\n        super(opts);\n        this.malloc = (size)=>{\n            throw new Error(\"error - un-init malloc called\");\n        };\n        this.cpTranslate = new (0, $7qrGZ.twrCodePageToUnicodeCodePoint)();\n        const canvasErrorFunc = (...args)=>{\n            throw new Error(\"A 2D draw function was called, but a valid twrCanvas is not defined.\");\n        };\n        const conCall = (funcName, jsid, ...args)=>{\n            const con = (0, $6MgDX.twrConsoleRegistry).getConsole(jsid);\n            const f = con[funcName];\n            if (!f) throw new Error(`Likely using an incorrect console type. jsid=${jsid}, funcName=${funcName}`);\n            return f.call(con, ...args);\n        };\n        const conSetRange = (jsid, chars, start, len)=>{\n            let values = [];\n            for(let i = start; i < start + len; i++)values.push(this.getLong(i));\n            conCall(\"setRange\", jsid, start, values);\n        };\n        const conPutStr = (jsid, chars, codePage)=>{\n            conCall(\"putStr\", jsid, this.getString(chars), codePage);\n        };\n        const conGetProp = (jsid, pn)=>{\n            const propName = this.getString(pn);\n            return conCall(\"getProp\", jsid, propName);\n        };\n        const conDrawSeq = (jsid, ds)=>{\n            conCall(\"drawSeq\", jsid, ds, this);\n        };\n        const twrGetConIDFromNameImpl = (nameIdx)=>{\n            const name = this.getString(nameIdx);\n            const id = this.ioNamesToID[name];\n            if (id) return id;\n            else return -1;\n        };\n        this.imports = {\n            twrTimeEpoch: (0, $5savl.twrTimeEpochImpl),\n            twrTimeTmLocal: (0, $7qrGZ.twrTimeTmLocalImpl).bind(this),\n            twrUserLconv: (0, $7qrGZ.twrUserLconvImpl).bind(this),\n            twrUserLanguage: (0, $7qrGZ.twrUserLanguageImpl).bind(this),\n            twrRegExpTest1252: (0, $7qrGZ.twrRegExpTest1252Impl).bind(this),\n            twrToLower1252: (0, $7qrGZ.twrToLower1252Impl).bind(this),\n            twrToUpper1252: (0, $7qrGZ.twrToUpper1252Impl).bind(this),\n            twrStrcoll: (0, $7qrGZ.twrStrcollImpl).bind(this),\n            twrUnicodeCodePointToCodePage: (0, $7qrGZ.twrUnicodeCodePointToCodePageImpl).bind(this),\n            twrCodePageToUnicodeCodePoint: this.cpTranslate.convert.bind(this.cpTranslate),\n            twrGetDtnames: (0, $7qrGZ.twrGetDtnamesImpl).bind(this),\n            twrGetConIDFromName: twrGetConIDFromNameImpl,\n            twrConCharOut: conCall.bind(null, \"charOut\"),\n            twrConCharIn: this.null,\n            twrSetFocus: this.null,\n            twrConGetProp: conGetProp,\n            twrConCls: conCall.bind(null, \"cls\"),\n            twrConSetC32: conCall.bind(null, \"setC32\"),\n            twrConSetReset: conCall.bind(null, \"setReset\"),\n            twrConPoint: conCall.bind(null, \"point\"),\n            twrConSetCursor: conCall.bind(null, \"setCursor\"),\n            twrConSetColors: conCall.bind(null, \"setColors\"),\n            twrConSetRange: conSetRange,\n            twrConPutStr: conPutStr,\n            twrConDrawSeq: conDrawSeq,\n            twrCanvasCharIn: this.null,\n            twrCanvasInkey: this.null,\n            twrSleep: this.null,\n            twrSin: Math.sin,\n            twrCos: Math.cos,\n            twrTan: Math.tan,\n            twrFAbs: Math.abs,\n            twrACos: Math.acos,\n            twrASin: Math.asin,\n            twrATan: Math.atan,\n            twrExp: Math.exp,\n            twrFloor: Math.floor,\n            twrCeil: Math.ceil,\n            twrFMod: function(x, y) {\n                return x % y;\n            },\n            twrLog: Math.log,\n            twrPow: Math.pow,\n            twrSqrt: Math.sqrt,\n            twrTrunc: Math.trunc,\n            twrDtoa: this.floatUtil.dtoa.bind(this.floatUtil),\n            twrToFixed: this.floatUtil.toFixed.bind(this.floatUtil),\n            twrToExponential: this.floatUtil.toExponential.bind(this.floatUtil),\n            twrAtod: this.floatUtil.atod.bind(this.floatUtil),\n            twrFcvtS: this.floatUtil.fcvtS.bind(this.floatUtil)\n        };\n    }\n    async loadWasm(pathToLoad) {\n        return super.loadWasm(pathToLoad, this.imports, this.ioNamesToID);\n    }\n    null(inval) {\n        throw new Error(\"call to unimplemented twrXXX import in twrWasmModule.  Use twrWasmModuleAsync ?\");\n    }\n}\n\n});\nparcelRegister(\"1Yd7N\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmModuleInJSMain\", () => $16f59354d99d4272$export$2366c14363f3adb5);\n// This class extends base to handle options when called in the main Java Script thread\n\nvar $8wznr = parcelRequire(\"8wznr\");\n\nvar $jhM3f = parcelRequire(\"jhM3f\");\n\nvar $eDJ4i = parcelRequire(\"eDJ4i\");\n\nvar $a7Sa2 = parcelRequire(\"a7Sa2\");\n\nvar $7qrGZ = parcelRequire(\"7qrGZ\");\n\nvar $9kgjF = parcelRequire(\"9kgjF\");\nclass $16f59354d99d4272$export$2366c14363f3adb5 extends (0, $jhM3f.twrWasmModuleBase) {\n    io;\n    ioNamesToID;\n    constructor(opts = {}){\n        super();\n        if (typeof document === \"undefined\") throw new Error(\"twrWasmModuleJSMain should only be created in JavaScript Main.\");\n        // io contains a mapping of names to IConsole\n        // stdio, stderr are required (but if they are not passed in, we will find defaults here)\n        // there can be an arbitrary number of IConsoles passed to a module for use by the module\n        if (opts.io) this.io = opts.io;\n        else this.io = {};\n        if (!this.io.stdio) {\n            const eiodiv = document.getElementById(\"twr_iodiv\");\n            const eiocanvas = document.getElementById(\"twr_iocanvas\");\n            if (opts.stdio) this.io.stdio = opts.stdio;\n            else if (eiodiv) this.io.stdio = new (0, $8wznr.twrConsoleDiv)(eiodiv, {\n                foreColor: opts.forecolor,\n                backColor: opts.backcolor,\n                fontSize: opts.fontsize\n            });\n            else if (eiocanvas) this.io.stdio = new (0, $a7Sa2.twrConsoleTerminal)(eiocanvas, {\n                foreColor: opts.forecolor,\n                backColor: opts.backcolor,\n                fontSize: opts.fontsize,\n                widthInChars: opts.windim?.[0],\n                heightInChars: opts.windim?.[1]\n            });\n            else {\n                this.io.stdio = new (0, $9kgjF.twrConsoleDebug)();\n                console.log(\"Stdio console is not specified.  Using twrConsoleDebug.\");\n            }\n        }\n        if (!this.io.stderr) this.io.stderr = new (0, $9kgjF.twrConsoleDebug)();\n        if (!this.io.std2d) {\n            if (opts.d2dcanvas) this.io.std2d = opts.d2dcanvas;\n            else {\n                const ed2dcanvas = document.getElementById(\"twr_d2dcanvas\");\n                if (ed2dcanvas) this.io.std2d = new (0, $eDJ4i.twrConsoleCanvas)(ed2dcanvas);\n            }\n        }\n        // each module has a mapping of names to console.id\n        this.ioNamesToID = {};\n        Object.keys(this.io).forEach((key)=>{\n            this.ioNamesToID[key] = this.io[key].id;\n        });\n    }\n    divLog(...params) {\n        for(var i = 0; i < params.length; i++){\n            this.io.stdio.putStr(params[i].toString());\n            this.io.stdio.charOut(32, (0, $7qrGZ.codePageUTF32)); // space\n        }\n        this.io.stdio.charOut(10, (0, $7qrGZ.codePageUTF32));\n    }\n}\n\n});\nparcelRegister(\"8wznr\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrConsoleDiv\", () => $634cc10760be4c8e$export$b0aa7e35767ef6cf);\n\nvar $dRr3I = parcelRequire(\"dRr3I\");\n\nvar $7qrGZ = parcelRequire(\"7qrGZ\");\n\nvar $4Jz48 = parcelRequire(\"4Jz48\");\n\nvar $6MgDX = parcelRequire(\"6MgDX\");\nclass $634cc10760be4c8e$export$b0aa7e35767ef6cf {\n    element;\n    id;\n    keys;\n    CURSOR = String.fromCharCode(9611);\n    cursorOn = false;\n    lastChar = 0;\n    extraBR = false;\n    cpTranslate;\n    constructor(element, params){\n        this.element = element;\n        if (params) {\n            if (params.backColor) this.element.style.backgroundColor = params.backColor;\n            if (params.foreColor) this.element.style.color = params.foreColor;\n            if (params.fontSize) this.element.style.font = params.fontSize.toString() + \"px arial\";\n        }\n        this.cpTranslate = new (0, $7qrGZ.twrCodePageToUnicodeCodePoint)();\n        this.id = (0, $6MgDX.twrConsoleRegistry).registerConsole(this);\n    }\n    isHtmlEntityAtEnd(str) {\n        const entityPattern = /&[^;]+;$/;\n        return entityPattern.test(str);\n    }\n    removeHtmlEntityAtEnd(str) {\n        const entityPattern = /&[^;]+;$/;\n        return str.replace(entityPattern, \"\");\n    }\n    /*\n     * add utf-8 or windows-1252 character to div.  Supports the following control codes:\n     * any of CRLF, CR (/r), or LF(/n)  will cause a new line\n     * 0x8 backspace\n     * 0xE cursor on\n     * 0xF cursor off\n    */ charOut(ch, codePage) {\n        if (!this.element) throw new Error(\"internal error\");\n        //console.log(\"div::charout: \", ch, codePage);\n        if (this.extraBR) {\n            this.extraBR = false;\n            if (this.cursorOn) this.element.innerHTML = this.element.innerHTML.slice(0, -1);\n            this.element.innerHTML = this.element.innerHTML.slice(0, -4);\n            if (this.cursorOn) this.element.innerHTML += this.CURSOR;\n        }\n        const chnum = this.cpTranslate.convert(ch, codePage);\n        if (chnum != 0) {\n            switch(chnum){\n                case 10:\n                case 13:\n                    if (ch == 10 && this.lastChar == 13) break; // detect CR LF and treat as single new line\n                    if (this.cursorOn) this.element.innerHTML = this.element.innerHTML.slice(0, -1);\n                    this.element.innerHTML += \"<br><br>\"; //2nd break is a place holder for next line (fixes scroll issue at bottom)\n                    this.extraBR = true;\n                    if (this.cursorOn) this.element.innerHTML += this.CURSOR;\n                    //element.scrollIntoView();\n                    //element.scrollTop = element.scrollHeight;\n                    let p = this.element.getBoundingClientRect();\n                    window.scrollTo(0, p.height + 100);\n                    break;\n                case 8:\n                    if (this.cursorOn) this.element.innerHTML = this.element.innerHTML.slice(0, -1);\n                    if (this.isHtmlEntityAtEnd(this.element.innerHTML)) this.element.innerHTML = this.removeHtmlEntityAtEnd(this.element.innerHTML);\n                    else this.element.innerHTML = this.element.innerHTML.slice(0, -1);\n                    if (this.cursorOn) this.element.innerHTML += this.CURSOR;\n                    break;\n                case 0xE:\n                    if (!this.cursorOn) {\n                        this.cursorOn = true;\n                        this.element.innerHTML += this.CURSOR;\n                        this.element.focus();\n                    }\n                    break;\n                case 0xF:\n                    if (this.cursorOn) {\n                        this.cursorOn = false;\n                        this.element.innerHTML = this.element.innerHTML.slice(0, -1);\n                    }\n                    break;\n                default:\n                    if (this.cursorOn) this.element.innerHTML = this.element.innerHTML.slice(0, -1);\n                    let newchr = String.fromCodePoint(chnum);\n                    // in html, multiple spaces will be collapsed into one space.  This prevents that behavior.\n                    if (newchr == \" \") newchr = \"&nbsp;\";\n                    this.element.innerHTML += newchr;\n                    if (this.cursorOn) this.element.innerHTML += this.CURSOR;\n                    break;\n            }\n            this.lastChar = chnum;\n        }\n    }\n    getProp(propName) {\n        if (propName === \"type\") return (0, $4Jz48.IOTypes).CHARWRITE | (0, $4Jz48.IOTypes).CHARREAD;\n        console.log(\"twrConsoleDiv.getProp passed unknown property name: \", propName);\n        return 0;\n    }\n    getProxyParams() {\n        this.keys = new (0, $dRr3I.twrSharedCircularBuffer)(); // tsconfig, lib must be set to 2017 or higher\n        return [\n            \"twrConsoleDivProxy\",\n            this.id,\n            this.keys.sharedArray\n        ];\n    }\n    keyDown(ev) {\n        (0, $4Jz48.keyDown)(this, ev);\n    }\n    processMessage(msgType, data) {\n        const [id, ...params] = data;\n        if (id != this.id) throw new Error(\"internal error\"); // should never happen\n        switch(msgType){\n            case \"div-charout\":\n                {\n                    const [ch, codePage] = params;\n                    this.charOut(ch, codePage);\n                }\n                break;\n            case \"div-putstr\":\n                {\n                    const [str] = params;\n                    this.putStr(str);\n                }\n                break;\n            case \"div-focus\":\n                this.element.focus();\n                break;\n            default:\n                return false;\n        }\n        return true;\n    }\n    putStr(str) {\n        for(let i = 0; i < str.length; i++)this.charOut(str.codePointAt(i) || 0, (0, $7qrGZ.codePageUTF32));\n    }\n}\nclass $634cc10760be4c8e$export$e4a97cb991521e57 {\n    keys;\n    id;\n    constructor(params){\n        const [className, id, keysBuffer] = params;\n        this.keys = new (0, $dRr3I.twrSharedCircularBuffer)(keysBuffer);\n        this.id = id;\n    }\n    charIn() {\n        return this.keys.readWait(); // wait for a key, then read it\n    }\n    inkey() {\n        if (this.keys.isEmpty()) return 0;\n        else return this.charIn();\n    }\n    charOut(ch, codePoint) {\n        postMessage([\n            \"div-charout\",\n            [\n                this.id,\n                ch,\n                codePoint\n            ]\n        ]);\n    }\n    putStr(str) {\n        postMessage([\n            \"div-putstr\",\n            [\n                this.id,\n                str\n            ]\n        ]);\n    }\n    getProp(propName) {\n        if (propName === \"type\") return (0, $4Jz48.IOTypes).CHARWRITE | (0, $4Jz48.IOTypes).CHARREAD;\n        console.log(\"twrConsoleDivProxy.getProp passed unknown property name: \", propName);\n        return 0;\n    }\n    setFocus() {\n        postMessage([\n            \"div-focus\",\n            [\n                this.id\n            ]\n        ]);\n    }\n}\n\n});\nparcelRegister(\"dRr3I\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrSharedCircularBuffer\", () => $a17536f066adc156$export$a01cca24f011573a);\n//\n// This class implements a circular buffer that the main javascript thread can write to, \n// and a blocking WebWorker thread can read from.  This allows keyboard characters to be transferred from the main JS thread to a WebWorker thread.\n// The WebWorker can use the readWait() function to sleep, w/o participating in the normal \n// async callback dispatch method.  This allows a C program that is a single blocking loop to receive input from the primary javascript thread.\n// readWait() is used used when io_getc32() or io_mbgetstr() is called from a C function.\n//\nconst $a17536f066adc156$var$RDIDX = 256;\nconst $a17536f066adc156$var$WRIDX = 257;\nconst $a17536f066adc156$var$LEN = 256;\nclass $a17536f066adc156$export$a01cca24f011573a {\n    sharedArray;\n    buf;\n    constructor(sa){\n        if (typeof window !== \"undefined\") {\n            if (!crossOriginIsolated && !(window.location.protocol === \"file:\")) throw new Error(\"twrSharedCircularBuffer constructor, crossOriginIsolated=\" + crossOriginIsolated + \". See SharedArrayBuffer docs.\");\n        }\n        if (sa) this.sharedArray = sa;\n        else this.sharedArray = new SharedArrayBuffer(1032);\n        this.buf = new Int32Array(this.sharedArray);\n        this.buf[$a17536f066adc156$var$RDIDX] = 0;\n        this.buf[$a17536f066adc156$var$WRIDX] = 0;\n    }\n    write(n) {\n        let i = this.buf[$a17536f066adc156$var$WRIDX];\n        this.buf[i] = n;\n        i++;\n        if (i == $a17536f066adc156$var$LEN) i = 0;\n        this.buf[$a17536f066adc156$var$WRIDX] = i;\n        Atomics.notify(this.buf, $a17536f066adc156$var$WRIDX);\n    }\n    read() {\n        if (!this.isEmpty()) {\n            let i = this.buf[$a17536f066adc156$var$RDIDX];\n            let n = this.buf[i];\n            i++;\n            this.buf[$a17536f066adc156$var$RDIDX] = i;\n            return n;\n        } else return -1;\n    }\n    readWait() {\n        if (this.isEmpty()) {\n            const rdptr = this.buf[$a17536f066adc156$var$RDIDX];\n            // verifies that a shared memory location still contains a given value and if so sleeps until notified.\n            Atomics.wait(this.buf, $a17536f066adc156$var$WRIDX, rdptr);\n        }\n        return this.read();\n    }\n    isEmpty() {\n        return this.buf[$a17536f066adc156$var$RDIDX] == this.buf[$a17536f066adc156$var$WRIDX];\n    }\n}\n\n});\n\nparcelRegister(\"7qrGZ\", function(module, exports) {\n\n$parcel$export(module.exports, \"codePageASCII\", () => $568071407ca255c4$export$53f1026d7d1c23fb);\n$parcel$export(module.exports, \"codePage1252\", () => $568071407ca255c4$export$29f202393adbf96);\n$parcel$export(module.exports, \"codePageUTF8\", () => $568071407ca255c4$export$3d6ef5b62200d8d1);\n$parcel$export(module.exports, \"codePageUTF32\", () => $568071407ca255c4$export$ddea6250b326d061);\n$parcel$export(module.exports, \"twrCodePageToUnicodeCodePoint\", () => $568071407ca255c4$export$c7de3f2686797480);\n$parcel$export(module.exports, \"twrUnicodeCodePointToCodePageImpl\", () => $568071407ca255c4$export$b1748e2af4950b56);\n$parcel$export(module.exports, \"twrUserLanguageImpl\", () => $568071407ca255c4$export$99a2816c432302a9);\n$parcel$export(module.exports, \"twrRegExpTest1252Impl\", () => $568071407ca255c4$export$6e12283a61625fd2);\n$parcel$export(module.exports, \"to1252\", () => $568071407ca255c4$export$8644084c19ac418e);\n$parcel$export(module.exports, \"toASCII\", () => $568071407ca255c4$export$69111c4ea6e0c4a0);\n$parcel$export(module.exports, \"twrToLower1252Impl\", () => $568071407ca255c4$export$1619a0be8731b76a);\n$parcel$export(module.exports, \"twrToUpper1252Impl\", () => $568071407ca255c4$export$b8cd0608a44dce64);\n$parcel$export(module.exports, \"twrStrcollImpl\", () => $568071407ca255c4$export$2663d7470da86e92);\n$parcel$export(module.exports, \"twrTimeTmLocalImpl\", () => $568071407ca255c4$export$a0bf9983b7d1ed7c);\n$parcel$export(module.exports, \"twrUserLconvImpl\", () => $568071407ca255c4$export$714291919e374cc0);\n$parcel$export(module.exports, \"twrGetDtnamesImpl\", () => $568071407ca255c4$export$6e74b5e725f469d6);\n// these match C #defines in locale.h\nconst $568071407ca255c4$export$53f1026d7d1c23fb = 0;\nconst $568071407ca255c4$export$29f202393adbf96 = 1252;\nconst $568071407ca255c4$export$3d6ef5b62200d8d1 = 65001;\nconst $568071407ca255c4$export$ddea6250b326d061 = 12000;\nclass $568071407ca255c4$export$c7de3f2686797480 {\n    decoderUTF8 = new TextDecoder(\"utf-8\");\n    decoder1252 = new TextDecoder(\"windows-1252\");\n    convert(c, codePage) {\n        let outstr;\n        if (codePage == $568071407ca255c4$export$3d6ef5b62200d8d1) outstr = this.decoderUTF8.decode(new Uint8Array([\n            c\n        ]), {\n            stream: true\n        });\n        else if (codePage == $568071407ca255c4$export$29f202393adbf96) outstr = this.decoder1252.decode(new Uint8Array([\n            c\n        ]));\n        else if (codePage == $568071407ca255c4$export$53f1026d7d1c23fb) {\n            if (c > 127) outstr = \"\";\n            else outstr = String.fromCharCode(c);\n        } else if (codePage == $568071407ca255c4$export$ddea6250b326d061) outstr = String.fromCodePoint(c);\n        else throw new Error(\"unsupported CodePage: \" + codePage);\n        return outstr.codePointAt(0) || 0;\n    }\n}\nconst $568071407ca255c4$var$cpTranslate = new $568071407ca255c4$export$c7de3f2686797480();\nfunction $568071407ca255c4$export$b1748e2af4950b56(outstr, cp, codePage) {\n    return $568071407ca255c4$var$noasyncCopyString(this, outstr, String.fromCodePoint(cp), codePage);\n}\nfunction $568071407ca255c4$export$99a2816c432302a9() {\n    return $568071407ca255c4$var$noasyncPutString(this, navigator.language, $568071407ca255c4$export$53f1026d7d1c23fb);\n}\nfunction $568071407ca255c4$export$6e12283a61625fd2(regexpStrIdx, c) {\n    const regexpStr = this.getString(regexpStrIdx);\n    const regexp = new RegExp(regexpStr, \"u\");\n    const cstr = $568071407ca255c4$var$cpTranslate.decoder1252.decode(new Uint8Array([\n        c\n    ]));\n    const r = regexp.test(cstr);\n    if (r) return 1;\n    else return 0;\n}\nfunction $568071407ca255c4$export$8644084c19ac418e(instr) {\n    if (instr.codePointAt(0) == 8239) return 32; // turn narrow-no-break-space into space\n    // this first switch statment fixes what appears to be a bug in safari 15.6.1 (17613.3.9.1.16) (comparisons to the character string fail)\n    let cp = instr.codePointAt(0) || 0;\n    switch(cp){\n        case 338:\n            return 0x8C;\n        case 339:\n            return 0x9C;\n        case 352:\n            return 0x8A;\n        case 353:\n            return 0x9A;\n        case 376:\n            return 0x9F;\n        case 381:\n            return 0x8E;\n        case 382:\n            return 0x9E;\n        case 402:\n            return 0x83;\n        case 710:\n            return 0x88;\n    }\n    switch(instr.normalize()){\n        case \"\\u20AC\":\n            return 0x80;\n        case \"\\u201A\":\n            return 0x82;\n        case \"\\u0192\":\n            return 0x83;\n        case \"\\u201E\":\n            return 0x84;\n        case \"\\u2026\":\n            return 0x85;\n        case \"\\u2020\":\n            return 0x86;\n        case \"\\u2021\":\n            return 0x87;\n        case \"\\u02C6\":\n            return 0x88;\n        case \"\\u2030\":\n            return 0x89;\n        case \"\\u0160\":\n            return 0x8A;\n        case \"\\u2039\":\n            return 0x8B;\n        case \"\\u0152\":\n            return 0x8C;\n        case \"\\u017D\":\n            return 0x8E;\n        case \"\\u2018\":\n            return 0x91;\n        case \"\\u2019\":\n            return 0x92;\n        case \"\\u201C\":\n            return 0x93;\n        case \"\\u201D\":\n            return 0x94;\n        case \"\\u2022\":\n            return 0x95;\n        case \"\\u2013\":\n            return 0x96;\n        case \"\\u2014\":\n            return 0x97;\n        case \"\\u02DC\":\n            return 0x98;\n        case \"\\u2122\":\n            return 0x99;\n        case \"\\u0161\":\n            return 0x9A;\n        case \"\\u203A\":\n            return 0x9B;\n        case \"\\u0153\":\n            return 0x9C;\n        case \"\\u017E\":\n            return 0x9E;\n        case \"\\u0178\":\n            return 0x9F;\n    }\n    if (cp > 255) {\n        console.log(\"twr-wasm.to1252(): unable to convert: \", instr, cp);\n        cp = 0;\n    }\n    return cp;\n}\nfunction $568071407ca255c4$export$69111c4ea6e0c4a0(instr) {\n    if (instr == \"\\u0192\") return 102; // lowercase 'f'\n    if (instr.codePointAt(0) == 8239) return 32; // turn narrow-no-break-space into space\n    let cp = instr.codePointAt(0) || 0;\n    if (cp > 127) return 63; // ASCII for \"?\"\n    return cp;\n}\nfunction $568071407ca255c4$export$1619a0be8731b76a(c) {\n    const cstr = $568071407ca255c4$var$cpTranslate.decoder1252.decode(new Uint8Array([\n        c\n    ]));\n    const regexp = new RegExp(\"^\\\\p{Letter}$\", \"u\");\n    if (regexp.test(cstr)) {\n        const r = $568071407ca255c4$export$8644084c19ac418e(cstr.toLocaleLowerCase());\n        //console.log(\"twrToLower1252Impl: isLetter\", c, cstr, cstr.codePointAt(0), cstr.toLocaleLowerCase(), cstr.toLocaleLowerCase().codePointAt(0), r);\n        return r;\n    } else //console.log(\"twrToLower1252Impl: isNOTLetter\", c, cstr, cstr.codePointAt(0));\n    return c;\n}\nfunction $568071407ca255c4$export$b8cd0608a44dce64(c) {\n    const cstr = $568071407ca255c4$var$cpTranslate.decoder1252.decode(new Uint8Array([\n        c\n    ]));\n    if (cstr.codePointAt(0) == 402) return c; // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is ƒ\n    if (cstr.codePointAt(0) == 181) return c; // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is µ\n    if (cstr.codePointAt(0) == 223) return c; // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is ß'\n    if (cstr == \"\\xb5\") return c; // upper case version doesn't fit in 1252\n    if (cstr == \"\\u0192\") return c; // upper case version doesn't fit in 1252\n    if (cstr == \"\\xdf\") return c; // toLocaleUpperCase() will convert beta to SS\n    const regexp = new RegExp(\"^\\\\p{Letter}$\", \"u\");\n    if (regexp.test(cstr)) return $568071407ca255c4$export$8644084c19ac418e(cstr.toLocaleUpperCase());\n    else return c;\n}\nfunction $568071407ca255c4$export$2663d7470da86e92(lhs, rhs, codePage) {\n    const lhStr = this.getString(lhs, undefined, codePage);\n    const rhStr = this.getString(rhs, undefined, codePage);\n    // c strcmp(): A positive integer if str1 is greater than str2.\n    // 1 if string 1 (lh) comes after string 2 (rh)\n    const collator = new Intl.Collator();\n    const r = collator.compare(lhStr, rhStr);\n    return r;\n}\nfunction $568071407ca255c4$export$a0bf9983b7d1ed7c(tmIdx, epochSecs) {\n    const d = new Date(epochSecs * 1000);\n    this.setLong(tmIdx, d.getSeconds());\n    this.setLong(tmIdx + 4, d.getMinutes());\n    this.setLong(tmIdx + 8, d.getHours());\n    this.setLong(tmIdx + 12, d.getDate());\n    this.setLong(tmIdx + 16, d.getMonth());\n    this.setLong(tmIdx + 20, d.getFullYear() - 1900);\n    this.setLong(tmIdx + 24, d.getDay());\n    this.setLong(tmIdx + 28, $568071407ca255c4$var$getDayOfYear(d));\n    this.setLong(tmIdx + 32, $568071407ca255c4$var$isDst());\n    this.setLong(tmIdx + 36, -d.getTimezoneOffset() * 60);\n    this.setLong(tmIdx + 40, $568071407ca255c4$var$noasyncPutString(this, $568071407ca255c4$var$getTZ(d), $568071407ca255c4$export$53f1026d7d1c23fb));\n}\nfunction $568071407ca255c4$var$getDayOfYear(date) {\n    const start = new Date(date.getFullYear(), 0, 1);\n    const diff = date.getTime() - start.getTime(); // Difference in milliseconds\n    const oneDay = 86400000; // Number of milliseconds in one day\n    const day = Math.floor(diff / oneDay);\n    return day;\n}\nfunction $568071407ca255c4$var$isDst() {\n    const timeString = new Date().toLocaleTimeString(\"en-US\", {\n        timeZoneName: \"long\"\n    });\n    if (timeString.includes(\"Daylight\")) return 1;\n    else return 0;\n}\nfunction $568071407ca255c4$var$getTZ(date) {\n    const timeZone = date.toLocaleTimeString(\"en-US\", {\n        timeZoneName: \"short\"\n    }).split(\" \").pop();\n    return timeZone ? timeZone : \"UTC\";\n}\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\nfunction $568071407ca255c4$var$setAndPutString(mod, idx, sin, codePage) {\n    const stridx = $568071407ca255c4$var$noasyncPutString(mod, sin, codePage);\n    mod.setLong(idx, stridx);\n}\n// JS string into the webassembly module memory.  \n// Does not verify outbuf length. \n// Encode the Wasm string using codePage\n// Does NOT zero terminate string\nfunction $568071407ca255c4$var$noasyncCopyString(mod, outbuf, sin, codePage) {\n    const ru8 = mod.stringToU8(sin, codePage);\n    mod.mem8.set(ru8, outbuf);\n    return ru8.length;\n}\n// allocate and copy a JS string into the webassembly module memory, encode the Wasm string using codePage\nfunction $568071407ca255c4$var$noasyncPutString(mod, sin, codePage) {\n    const ru8 = mod.stringToU8(sin, codePage);\n    const malloc = mod.exports.malloc;\n    const strIndex = malloc(ru8.length + 1);\n    mod.mem8.set(ru8, strIndex);\n    mod.mem8[strIndex + ru8.length] = 0;\n    return strIndex;\n}\nfunction $568071407ca255c4$export$714291919e374cc0(lconvIdx, codePage) {\n    const locDec = $568071407ca255c4$var$getLocaleDecimalPoint();\n    const locSep = $568071407ca255c4$var$getLocaleThousandsSeparator();\n    $568071407ca255c4$var$setAndPutString(this, lconvIdx + 0, locDec, codePage);\n    $568071407ca255c4$var$setAndPutString(this, lconvIdx + 4, locSep, codePage);\n    $568071407ca255c4$var$setAndPutString(this, lconvIdx + 20, locDec, codePage);\n    $568071407ca255c4$var$setAndPutString(this, lconvIdx + 24, locSep, codePage);\n    $568071407ca255c4$var$setAndPutString(this, lconvIdx + 24, locSep, codePage);\n    $568071407ca255c4$var$setAndPutString(this, lconvIdx + 24, locSep, codePage);\n    $568071407ca255c4$var$setAndPutString(this, lconvIdx + 32, \"+\", codePage);\n    $568071407ca255c4$var$setAndPutString(this, lconvIdx + 36, \"-\", codePage);\n    $568071407ca255c4$var$setAndPutString(this, lconvIdx + 12, $568071407ca255c4$var$getLocalCurrencySymbol(), codePage);\n    $568071407ca255c4$var$setAndPutString(this, lconvIdx + 16, $568071407ca255c4$var$getLocalCurrencySymbol(), codePage);\n}\nfunction $568071407ca255c4$var$getLocaleDecimalPoint() {\n    const formatter = new Intl.NumberFormat();\n    //console.log(\"dec resolvedOptions\", formatter.resolvedOptions());\n    // Format a test number to find out the decimal point.\n    const formattedNumber = formatter.format(1.1);\n    //console.log(\"dec formattedNumber\", formattedNumber);\n    // Find the character between the numeric parts.\n    const decimalPoint = formattedNumber.replace(/[0-9]/g, \"\").charAt(0);\n    return decimalPoint;\n}\nfunction $568071407ca255c4$var$getLocaleThousandsSeparator() {\n    const formatter = new Intl.NumberFormat(undefined, {\n        minimumFractionDigits: 0 // Ensure no decimal part interferes\n    });\n    // Format a test number to include a thousands separator.\n    const formattedNumber = formatter.format(1000);\n    //console.log(\"sep formattedNumber\", formattedNumber);\n    // Extract the thousands separator by removing numeric characters and possible decimal points.\n    // This may need adjustment depending on whether other characters are present.\n    let thousandsSeparator = formattedNumber.replace(/[0-9]/g, \"\").charAt(0); // Assumes separator is the first character.\n    //console.log(\"sep code\",  thousandsSeparator.codePointAt(0));\n    return thousandsSeparator;\n}\n// this doesn't work, localeCurrency is not correct\nfunction $568071407ca255c4$var$getLocaleCurrencyDecimalPoint() {\n    // Create an initial NumberFormat object to detect the locale's currency\n    const tempFormatter = new Intl.NumberFormat(undefined, {\n        style: \"currency\",\n        currency: \"USD\"\n    });\n    const localeCurrency = tempFormatter.resolvedOptions().currency;\n    const formatter = new Intl.NumberFormat(undefined, {\n        style: \"currency\",\n        currency: localeCurrency\n    });\n    // Format a test number to find out the decimal point.\n    const formattedNumber = formatter.format(1.1);\n    // Find the character between the numeric parts.\n    // char(0) is the currency symbol\n    const decimalPoint = formattedNumber.replace(/[0-9]/g, \"\").charAt(1);\n    return decimalPoint;\n}\nfunction $568071407ca255c4$var$getLocalCurrencySymbol() {\n    switch(navigator.language){\n        case \"en-US\":\n        case \"en-CA\":\n        case \"fr-CA\":\n        case \"en-AU\":\n        case \"es-MX\":\n        case \"es-AR\":\n        case \"es-CL\":\n        case \"es-CO\":\n        case \"es-EC\":\n        case \"en-GY\":\n        case \"nl-SR\":\n        case \"es-UY\":\n        case \"en-BZ\":\n        case \"es-SV\":\n        case \"es-PA\":\n            return \"$\";\n        case \"es-BO\":\n        case \"es-VE\":\n            return \"Bs.\";\n        case \"es-PY\":\n            return \"\\u20B2\";\n        case \"es-PE\":\n            return \"S/\";\n        case \"es-CR\":\n            return \"\\u20A1\";\n        case \"es-GT\":\n            return \"Q\";\n        case \"es-HN\":\n            return \"L\";\n        case \"es-NI\":\n            return \"C$\";\n        case \"en-GB\":\n            return \"\\xa3\";\n        case \"en-IE\":\n        case \"de-DE\":\n        case \"fr-FR\":\n        case \"de-AT\":\n        case \"nl-BE\":\n        case \"fr-BE\":\n        case \"el-CY\":\n        case \"et-EE\":\n        case \"fi-FI\":\n        case \"sv-FI\":\n        case \"el-GR\":\n        case \"it-IT\":\n        case \"lv-LV\":\n        case \"lt-LT\":\n        case \"fr-LU\":\n        case \"de-LU\":\n        case \"lb-LU\":\n        case \"mt-MT\":\n        case \"nl-NL\":\n        case \"pt-PT\":\n        case \"sk-SK\":\n        case \"sl-SI\":\n        case \"es-ES\":\n            return \"\\u20AC\";\n        case \"ja-JP\":\n            return \"\\xa5\";\n        case \"zh-CN\":\n            return \"\\xa5\";\n        case \"de-CH\":\n        case \"fr-CH\":\n        case \"it-CH\":\n            return \"CHF\";\n        case \"sv-SE\":\n        case \"da-DK\":\n        case \"nb-NO\":\n            return \"kr\";\n        case \"ru-RU\":\n            return \"\\u20BD\";\n        case \"ko-KR\":\n            return \"\\u20A9\";\n        case \"en-IN\":\n            return \"\\u20B9\";\n        case \"pt-BR\":\n            return \"R$\";\n        case \"he-IL\":\n            return \"\\u20AA\";\n        case \"tr-TR\":\n            return \"\\u20BA\";\n        default:\n            return \"\";\n    }\n}\nfunction $568071407ca255c4$export$6e74b5e725f469d6(codePage) {\n    const malloc = this.exports.malloc;\n    const dtnamesStructIdx = malloc(160);\n    for(let i = 0; i < 7; i++)$568071407ca255c4$var$setAndPutString(this, dtnamesStructIdx + i * 4, $568071407ca255c4$var$getLocalizedDayName(i, \"long\"), codePage);\n    for(let i = 0; i < 7; i++)$568071407ca255c4$var$setAndPutString(this, dtnamesStructIdx + (i + 7) * 4, $568071407ca255c4$var$getLocalizedDayName(i, \"short\"), codePage);\n    for(let i = 0; i < 12; i++)$568071407ca255c4$var$setAndPutString(this, dtnamesStructIdx + (i + 14) * 4, $568071407ca255c4$var$getLocalizedMonthNames(i, \"long\"), codePage);\n    for(let i = 0; i < 12; i++)$568071407ca255c4$var$setAndPutString(this, dtnamesStructIdx + (i + 14 + 12) * 4, $568071407ca255c4$var$getLocalizedMonthNames(i, \"short\"), codePage);\n    $568071407ca255c4$var$setAndPutString(this, dtnamesStructIdx + 152, $568071407ca255c4$var$getLocalizedAM(), codePage);\n    $568071407ca255c4$var$setAndPutString(this, dtnamesStructIdx + 156, $568071407ca255c4$var$getLocalizedPM(), codePage);\n    return dtnamesStructIdx;\n}\nfunction $568071407ca255c4$var$getLocalizedDayName(n, weekdayType) {\n    // Create a Date object for the desired day of the week\n    const date = new Date();\n    date.setDate(date.getDate() - date.getDay() + n);\n    // Create an Intl.DateTimeFormat object with the desired locale and options\n    const formatter = new Intl.DateTimeFormat(undefined, {\n        weekday: weekdayType\n    });\n    // Format the date to get the full day name\n    return formatter.format(date);\n}\nfunction $568071407ca255c4$var$getLocalizedMonthNames(n, monthType) {\n    const formatter = new Intl.DateTimeFormat(undefined, {\n        month: monthType\n    });\n    const date = new Date(2000, n, 1);\n    return formatter.format(date);\n}\nfunction $568071407ca255c4$var$getLocalizedAM() {\n    // Create a Date object for a time in the morning\n    const morningDate = new Date(2000, 0, 1, 9, 0, 0);\n    // Create an Intl.DateTimeFormat object with the desired locale and options\n    const formatter = new Intl.DateTimeFormat(undefined, {\n        hour: \"numeric\",\n        hour12: true\n    });\n    // Format the date and get the parts\n    const formattedParts = formatter.formatToParts(morningDate);\n    // Find the part of the formatted string that corresponds to the day period (AM/PM)\n    const dayPeriodPart = formattedParts.find((part)=>part.type === \"dayPeriod\");\n    return dayPeriodPart ? dayPeriodPart.value : \"\";\n}\nfunction $568071407ca255c4$var$getLocalizedPM() {\n    // Create a Date object for a time in the afternoon\n    const afternoonDate = new Date(2000, 0, 1, 15, 0, 0);\n    // Create an Intl.DateTimeFormat object with the desired locale and options\n    const formatter = new Intl.DateTimeFormat(undefined, {\n        hour: \"numeric\",\n        hour12: true\n    });\n    // Format the date and get the parts\n    const formattedParts = formatter.formatToParts(afternoonDate);\n    // Find the part of the formatted string that corresponds to the day period (AM/PM)\n    const dayPeriodPart = formattedParts.find((part)=>part.type === \"dayPeriod\");\n    return dayPeriodPart ? dayPeriodPart.value : \"\";\n}\n\n});\n\nparcelRegister(\"4Jz48\", function(module, exports) {\n\n$parcel$export(module.exports, \"IOTypes\", () => $372690b1a012f88a$export$5d8b86200307417d);\n$parcel$export(module.exports, \"keyDown\", () => $372690b1a012f88a$export$d081dc64f99d208b);\n//TODO:\n//\tstruct IoDisplay: need to add a setc32 equiv for back/fore color\n// add io_get_type\n// i can't figure out how to have this param be a keyof instead of string, with separate params for Stream and Terminal:  getProp: (propName: string)=>number;\n// change printf, and other optimizations if they exist, to call io_putstr\n// implement or deprecate io_begin_draw \n// get rid of IoConsoleWindow, and just use IoConsole for everything?\n// add a typedef for struct IoConsole\n// remove from IModParams: imports:{[index:string]:Function},\n// implement \t//\tIModOpts.imports in twrWasmModuleInJSMain\n// add ability to determine if a console has the input focus\n// remove support for io:{[key:string]: IConsole};\n// add codepage as arg to charout.io_putc to make it more flexible and to align with how setc32 works in io_functions\n// add ability to set a max size for a div con, or to trim it.\n// add helloworld-b to index.html?\n// finish inkey\n// add io_setrange example/test case\n// get rid of this.io and just use ioIDtoNames?\n// must match IO_TYPEs in twr_io.h\nclass $372690b1a012f88a$export$5d8b86200307417d {\n    static CHARREAD = 1;\n    static CHARWRITE = 2;\n    static ADDRESSABLE_DISPLAY = 4;\n    static CANVAS2D = 8;\n    static EVENTS = 16;\n    // Private constructor to prevent instantiation\n    constructor(){}\n}\n///////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////\nfunction $372690b1a012f88a$var$keyEventProcess(ev) {\n    if (!ev.isComposing && !ev.metaKey && ev.key != \"Control\" && ev.key != \"Alt\") {\n        //console.log(\"keyDownDiv: \",ev.key, ev.code, ev.key.codePointAt(0), ev);\n        if (ev.key.length == 1) return ev.key.codePointAt(0);\n        else {\n            switch(ev.key){\n                case \"Backspace\":\n                    return 8;\n                case \"Enter\":\n                    return 10;\n                case \"Escape\":\n                    return 0x1B;\n                case \"Delete\":\n                    return 0x7F;\n                case \"ArrowLeft\":\n                    return 0x2190;\n                case \"ArrowUp\":\n                    return 0x2191;\n                case \"ArrowRight\":\n                    return 0x2192;\n                case \"ArrowDown\":\n                    return 0x2193;\n            }\n            console.log(\"keyEventProcess SKIPPED: \", ev.key, ev.code, ev.key.codePointAt(0), ev);\n        }\n    } else console.log(\"keyEventProcess SKIPPED-2: \", ev.key, ev.code, ev.key.codePointAt(0), ev);\n    return undefined;\n}\nfunction $372690b1a012f88a$export$d081dc64f99d208b(destinationCon, ev) {\n    if (!destinationCon.keys) throw new Error(\"keyDown requires twrModuleAsync\");\n    else {\n        const r = $372690b1a012f88a$var$keyEventProcess(ev);\n        if (r) destinationCon.keys.write(r);\n    }\n}\n\n});\n\nparcelRegister(\"6MgDX\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrConsoleRegistry\", () => $4ef422d250ddf10b$export$401f32ea04a2dc08);\n// this is global in the JS main thread address space\n// all consoles are registered here\nclass $4ef422d250ddf10b$export$401f32ea04a2dc08 {\n    static consoles = [];\n    // create a pairing between an instance of type IConsole and an integer ID\n    static registerConsole(con) {\n        $4ef422d250ddf10b$export$401f32ea04a2dc08.consoles.push(con);\n        return $4ef422d250ddf10b$export$401f32ea04a2dc08.consoles.length - 1;\n    }\n    static getConsole(id) {\n        if (id < 0 || id >= $4ef422d250ddf10b$export$401f32ea04a2dc08.consoles.length) throw new Error(\"Invalid console ID: \" + id);\n        return $4ef422d250ddf10b$export$401f32ea04a2dc08.consoles[id];\n    }\n    static getConsoleID(con) {\n        for(let i = 0; i < $4ef422d250ddf10b$export$401f32ea04a2dc08.consoles.length; i++)if ($4ef422d250ddf10b$export$401f32ea04a2dc08.consoles[i] == con) return i;\n        throw new Error(\"IConsole not in registry\");\n    }\n}\nclass $4ef422d250ddf10b$export$c966f466478010bf {\n    static consoles = [];\n    // create a pairing between an instance of type IConsole and an integer ID\n    static registerConsoleProxy(con) {\n        $4ef422d250ddf10b$export$c966f466478010bf.consoles[con.id] = con;\n        return con.id;\n    }\n    static getConsoleProxy(id) {\n        if (id < 0 || id >= $4ef422d250ddf10b$export$c966f466478010bf.consoles.length) throw new Error(\"Invalid console ID: \" + id);\n        return $4ef422d250ddf10b$export$c966f466478010bf.consoles[id];\n    }\n    static getConsoleID(con) {\n        for(let i = 0; i < $4ef422d250ddf10b$export$c966f466478010bf.consoles.length; i++)if ($4ef422d250ddf10b$export$c966f466478010bf.consoles[i] == con) return i;\n        throw new Error(\"IConsoleProxy not in registry\");\n    }\n}\n\n});\n\n\nparcelRegister(\"jhM3f\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmModuleBase\", () => $e0a4e0dab7348a9e$export$c83a0a3bffe07399);\n\nvar $8k9qF = parcelRequire(\"8k9qF\");\n\nvar $7qrGZ = parcelRequire(\"7qrGZ\");\nclass $e0a4e0dab7348a9e$export$c83a0a3bffe07399 {\n    memory;\n    mem8;\n    mem32;\n    memD;\n    exports;\n    isAsyncProxy = false;\n    floatUtil;\n    constructor(){\n        this.mem8 = new Uint8Array(); // avoid type errors\n        this.mem32 = new Uint32Array(); // avoid type errors\n        this.memD = new Float64Array(); // avoid type errors\n        this.floatUtil = new (0, $8k9qF.twrFloatUtil)(this);\n    //console.log(\"size of mem8 after constructor\",this.mem8.length);\n    }\n    /*********************************************************************/ /*********************************************************************/ // overridden by twrWasmModuleAsync\n    async loadWasm(pathToLoad, imports, ioNamesToID) {\n        //console.log(\"fileToLoad\",fileToLoad)\n        let response;\n        try {\n            response = await fetch(pathToLoad);\n        } catch (err) {\n            console.log(\"loadWasm() failed to fetch: \" + pathToLoad);\n            throw err;\n        }\n        if (!response.ok) throw new Error(\"fetch response error on file '\" + pathToLoad + \"'\\n\" + response.statusText);\n        try {\n            let wasmBytes = await response.arrayBuffer();\n            let instance = await WebAssembly.instantiate(wasmBytes, {\n                env: imports\n            });\n            this.exports = instance.instance.exports;\n            if (!this.exports) throw new Error(\"Unexpected error - undefined instance.exports\");\n            if (this.memory) throw new Error(\"unexpected error -- this.memory already set\");\n            this.memory = this.exports.memory;\n            if (!this.memory) throw new Error(\"Unexpected error - undefined exports.memory\");\n            this.mem8 = new Uint8Array(this.memory.buffer);\n            this.mem32 = new Uint32Array(this.memory.buffer);\n            this.memD = new Float64Array(this.memory.buffer);\n            // SharedArrayBuffer required for twrWasmModuleAsync/twrWasmModuleAsyncProxy\n            // instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error\n            // (don't check for instanceof SharedArrayBuffer, since it can cause an runtime error when SharedArrayBuffer does not exist)\n            if (this.isAsyncProxy) {\n                if (this.memory.buffer instanceof ArrayBuffer) console.log(\"twrWasmModuleAsync requires shared Memory. Add wasm-ld --shared-memory --no-check-features (see docs)\");\n                postMessage([\n                    \"setmemory\",\n                    this.memory\n                ]);\n            } else // here if twrWasmModule because twrWasmModuleAsync overrides this function, and twrWasmModuleAsyncProxy was handled above\n            if (!(this.memory.buffer instanceof ArrayBuffer)) console.log(\"twrWasmModule does not require shared Memory. Okay to remove wasm-ld --shared-memory --no-check-features\");\n            this.malloc = (size)=>{\n                return new Promise((resolve)=>{\n                    const m = this.exports.malloc;\n                    resolve(m(size));\n                });\n            };\n            this.init(ioNamesToID);\n        } catch (err) {\n            console.log(\"Wasm instantiate error: \" + err + (err.stack ? \"\\n\" + err.stack : \"\"));\n            throw err;\n        }\n    }\n    init(ioNamesToID) {\n        const twrInit = this.exports.twr_wasm_init;\n        twrInit(ioNamesToID.stdio, ioNamesToID.stderr, ioNamesToID.std2d == undefined ? -1 : ioNamesToID.std2d, this.mem8.length);\n    }\n    /*\n    * this is overridden by twrmodasync (although its worker side will call this version)\n    *\n    * callC takes an array where:\n    * the first entry is the name of the C function in the Wasm module to call (must be exported, typically via the --export clang flag)\n    * and the next entries are a variable number of arguments to pass to the C function, of type\n    * number - converted to int32 or float64 as appropriate\n    * string - converted to a an index (ptr) into a module Memory returned via stringToMem()\n    * URL - the file contents are loaded into module Memory via fetchAndPutURL(), and two C arguments are generated - index (pointer) to the memory, and length\n    * ArrayBuffer - the array is loaded into module memory via putArrayBuffer\n    */ async callC(params) {\n        const cparams = await this.preCallC(params);\n        let retval = await this.callCImpl(params[0], cparams);\n        await this.postCallC(cparams, params);\n        return retval;\n    }\n    async callCImpl(fname, cparams = []) {\n        if (!this.exports) throw new Error(\"this.exports undefined\");\n        if (!this.exports[fname]) throw new Error(\"callC: function '\" + fname + \"' not in export table.  Use --export wasm-ld flag.\");\n        const f = this.exports[fname];\n        let cr = f(...cparams);\n        return cr;\n    }\n    // convert an array of arguments to numbers by stuffing contents into malloc'd Wasm memory\n    async preCallC(params) {\n        if (!(params.constructor === Array)) throw new Error(\"callC: params must be array, first arg is function name\");\n        if (params.length == 0) throw new Error(\"callC: missing function name\");\n        let cparams = [];\n        let ci = 0;\n        for(let i = 1; i < params.length; i++){\n            const p = params[i];\n            switch(typeof p){\n                case \"number\":\n                case \"bigint\":\n                    cparams[ci++] = p;\n                    break;\n                case \"string\":\n                    cparams[ci++] = await this.putString(p);\n                    break;\n                case \"object\":\n                    if (p instanceof URL) {\n                        const r = await this.fetchAndPutURL(p);\n                        cparams[ci++] = r[0]; // mem index\n                        cparams[ci++] = r[1]; // len\n                        break;\n                    } else if (p instanceof ArrayBuffer) {\n                        const r = await this.putArrayBuffer(p);\n                        cparams[ci++] = r; // mem index\n                        break;\n                    }\n                default:\n                    throw new Error(\"callC: invalid object type passed in\");\n            }\n        }\n        return cparams;\n    }\n    // free the mallocs; copy array buffer data from malloc back to arraybuffer\n    async postCallC(cparams, params) {\n        let ci = 0;\n        for(let i = 1; i < params.length; i++){\n            const p = params[i];\n            switch(typeof p){\n                case \"number\":\n                case \"bigint\":\n                    ci++;\n                    break;\n                case \"string\":\n                    await this.callCImpl(\"free\", [\n                        cparams[ci]\n                    ]);\n                    ci++;\n                    break;\n                case \"object\":\n                    if (p instanceof URL) {\n                        await this.callCImpl(\"free\", [\n                            cparams[ci]\n                        ]);\n                        ci = ci + 2;\n                        break;\n                    } else if (p instanceof ArrayBuffer) {\n                        const u8 = new Uint8Array(p);\n                        const idx = cparams[ci];\n                        for(let j = 0; j < u8.length; j++)u8[j] = this.mem8[idx + j]; // mod.mem8 is a Uint8Array view of the module's WebAssembly Memory\n                        await this.callCImpl(\"free\", [\n                            idx\n                        ]);\n                        ci++;\n                        break;\n                    } else throw new Error(\"postCallC: internal error A\");\n                default:\n                    throw new Error(\"postCallC: internal error B\");\n            }\n        }\n        return cparams;\n    }\n    /*********************************************************************/ /*********************************************************************/ // convert a Javascript string into byte sequence that encodes the string using UTF8, or the requested codePage\n    stringToU8(sin, codePage = (0, $7qrGZ.codePageUTF8)) {\n        let ru8;\n        if (codePage == (0, $7qrGZ.codePageUTF8)) {\n            const encoder = new TextEncoder();\n            ru8 = encoder.encode(sin);\n        } else if (codePage == (0, $7qrGZ.codePage1252)) {\n            ru8 = new Uint8Array(sin.length);\n            for(let i = 0; i < sin.length; i++)ru8[i] = (0, $7qrGZ.to1252)(sin[i]);\n        } else if (codePage == (0, $7qrGZ.codePageASCII)) {\n            ru8 = new Uint8Array(sin.length);\n            for(let i = 0; i < sin.length; i++){\n                const r = (0, $7qrGZ.toASCII)(sin[i]);\n                ru8[i] = r;\n            }\n        } else throw new Error(\"unknown codePage: \" + codePage);\n        return ru8;\n    }\n    // copy a string into existing buffer in the webassembly module memory as utf8 (or specified codePage)\n    // result always null terminated\n    copyString(buffer, buffer_size, sin, codePage = (0, $7qrGZ.codePageUTF8)) {\n        if (buffer_size < 1) throw new Error(\"copyString buffer_size must have length > 0 (room for terminating 0): \" + buffer_size);\n        const ru8 = this.stringToU8(sin, codePage);\n        let i;\n        for(i = 0; i < ru8.length && i < buffer_size - 1; i++)this.mem8[buffer + i] = ru8[i];\n        this.mem8[buffer + i] = 0;\n    }\n    // allocate and copy a string into the webassembly module memory as utf8 (or the specified codePage)\n    async putString(sin, codePage = (0, $7qrGZ.codePageUTF8)) {\n        const ru8 = this.stringToU8(sin, codePage);\n        const strIndex = await this.malloc(ru8.length + 1);\n        this.mem8.set(ru8, strIndex);\n        this.mem8[strIndex + ru8.length] = 0;\n        return strIndex;\n    }\n    // allocate and copy a Uint8Array into Wasm mod memory\n    async putU8(u8a) {\n        let dest = await this.malloc(u8a.length);\n        this.mem8.set(u8a, dest);\n        return dest;\n    }\n    async putArrayBuffer(ab) {\n        const u8 = new Uint8Array(ab);\n        return this.putU8(u8);\n    }\n    // given a url, load its contents, and stuff into Wasm memory similar to Unint8Array\n    async fetchAndPutURL(fnin) {\n        if (!(typeof fnin === \"object\" && fnin instanceof URL)) throw new Error(\"fetchAndPutURL param must be URL\");\n        try {\n            let response = await fetch(fnin);\n            let buffer = await response.arrayBuffer();\n            let src = new Uint8Array(buffer);\n            let dest = await this.putU8(src);\n            return [\n                dest,\n                src.length\n            ];\n        } catch (err) {\n            console.log(\"fetchAndPutURL Error. URL: \" + fnin + \"\\n\" + err + (err.stack ? \"\\n\" + err.stack : \"\"));\n            throw err;\n        }\n    }\n    getLong(idx) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx) throw new Error(\"getLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length) throw new Error(\"invalid index passed to getLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        const long = this.mem32[idx32];\n        return long;\n    }\n    setLong(idx, value) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx) throw new Error(\"setLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length - 1) throw new Error(\"invalid index passed to setLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        this.mem32[idx32] = value;\n    }\n    getDouble(idx) {\n        const idx64 = Math.floor(idx / 8);\n        if (idx64 * 8 != idx) throw new Error(\"getLong passed non Float64 aligned address\");\n        const long = this.memD[idx64];\n        return long;\n    }\n    setDouble(idx, value) {\n        const idx64 = Math.floor(idx / 8);\n        if (idx64 * 8 != idx) throw new Error(\"setDouble passed non Float64 aligned address\");\n        this.memD[idx64] = value;\n    }\n    getShort(idx) {\n        if (idx < 0 || idx >= this.mem8.length) throw new Error(\"invalid index passed to getShort: \" + idx);\n        const short = this.mem8[idx] + this.mem8[idx + 1] * 256;\n        return short;\n    }\n    // get a string out of module memory\n    // null terminated, up until max of (optional) len bytes\n    // len may be longer than the number of characters, if characters are utf-8 encoded\n    getString(strIndex, len, codePage = (0, $7qrGZ.codePageUTF8)) {\n        if (strIndex < 0 || strIndex >= this.mem8.length) throw new Error(\"invalid strIndex passed to getString: \" + strIndex);\n        if (len) {\n            if (len < 0 || len + strIndex > this.mem8.length) throw new Error(\"invalid len  passed to getString: \" + len);\n        } else {\n            len = this.mem8.indexOf(0, strIndex);\n            if (len == -1) throw new Error(\"string is not null terminated\");\n            len = len - strIndex;\n        }\n        let encodeFormat;\n        if (codePage == (0, $7qrGZ.codePageUTF8)) encodeFormat = \"utf-8\";\n        else if (codePage == (0, $7qrGZ.codePage1252)) encodeFormat = \"windows-1252\";\n        else throw new Error(\"Unsupported codePage: \" + codePage);\n        const td = new TextDecoder(encodeFormat);\n        const u8todecode = new Uint8Array(this.mem8.buffer, strIndex, len);\n        // chrome throws exception when using TextDecoder on SharedArrayBuffer\n        // BUT, instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error, so don't check directly\n        if (this.mem8.buffer instanceof ArrayBuffer) {\n            const sout = td.decode(u8todecode);\n            return sout;\n        } else {\n            const regularArrayBuffer = new ArrayBuffer(len);\n            const regularUint8Array = new Uint8Array(regularArrayBuffer);\n            regularUint8Array.set(u8todecode);\n            const sout = td.decode(regularUint8Array);\n            return sout;\n        }\n    }\n    // get a byte array out of module memory when passed in index to [size, dataptr]\n    getU8Arr(idx) {\n        if (idx < 0 || idx >= this.mem8.length) throw new Error(\"invalid index passed to getU8: \" + idx);\n        const rv = new Uint32Array(this.mem8.slice(idx, idx + 8).buffer);\n        let size = rv[0];\n        let dataptr = rv[1];\n        if (dataptr < 0 || dataptr >= this.mem8.length) throw new Error(\"invalid idx.dataptr passed to getU8\");\n        if (size < 0 || size > this.mem8.length - dataptr) throw new Error(\"invalid idx.size passed to  getU8\");\n        const u8 = this.mem8.slice(dataptr, dataptr + size);\n        return u8;\n    }\n    // get a int32 array out of module memory when passed in index to [size, dataptr]\n    getU32Arr(idx) {\n        if (idx < 0 || idx >= this.mem8.length) throw new Error(\"invalid index passed to getU32: \" + idx);\n        const rv = new Uint32Array(this.mem8.slice(idx, idx + 8).buffer);\n        let size = rv[0];\n        let dataptr = rv[1];\n        if (dataptr < 0 || dataptr >= this.mem8.length) throw new Error(\"invalid idx.dataptr passed to getU32\");\n        if (size < 0 || size > this.mem8.length - dataptr) throw new Error(\"invalid idx.size passed to  getU32\");\n        if (size % 4 != 0) throw new Error(\"idx.size is not an integer number of 32 bit words\");\n        const u32 = new Uint32Array(this.mem8.slice(dataptr, dataptr + size).buffer);\n        return u32;\n    }\n}\n\n});\nparcelRegister(\"8k9qF\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrFloatUtil\", () => $60f78167b4604737$export$918ffb7e046a537b);\nclass $60f78167b4604737$export$918ffb7e046a537b {\n    mod;\n    constructor(mod){\n        this.mod = mod;\n    }\n    atod(strptr, len) {\n        const str = this.mod.getString(strptr, len);\n        const upper = str.trimStart().toUpperCase();\n        if (upper == \"INF\" || upper == \"+INF\" || upper == \"INFINITY\" || upper == \"+INFINITY\") return Number.POSITIVE_INFINITY;\n        else if (upper == \"-INF\" || upper == \"-INFINITY\") return Number.NEGATIVE_INFINITY;\n        else {\n            // allow D for exponent -- old microsoft format they still support in _fctv and I support in my awbasic\n            // parseFloat will handle 'Infinity' and'-Infinity' literal\n            // parseFloat appears to be case sensitive when parsing 'Infinity'\n            // parseFloat ignores leading whitespace\n            // parseFloat() is more lenient than Number() because it ignores trailing invalid characters\n            const r = Number.parseFloat(str.replaceAll(\"D\", \"e\").replaceAll(\"d\", \"e\"));\n            return r;\n        }\n    }\n    dtoa(buffer, buffer_size, value, max_precision) {\n        if (max_precision == -1) {\n            const r = value.toString();\n            this.mod.copyString(buffer, buffer_size, r);\n        } else {\n            let r = value.toString();\n            if (r.length > max_precision) r = value.toPrecision(max_precision);\n            this.mod.copyString(buffer, buffer_size, r);\n        }\n    }\n    toFixed(buffer, buffer_size, value, decdigits) {\n        const r = value.toFixed(decdigits);\n        this.mod.copyString(buffer, buffer_size, r);\n    }\n    toExponential(buffer, buffer_size, value, decdigits) {\n        const r = value.toExponential(decdigits);\n        this.mod.copyString(buffer, buffer_size, r);\n    }\n    // emulates the MS C lib function _fcvt_s, but doesn't support all ranges of number.\n    // Number.toFixed() has a max size of 100 fractional digits,  and values must be less than 1e+21\n    // Negative exponents must be now smaller than 1e-99\n    // fully-function C version also int he source, but this is the version enabled by default\n    fcvtS(buffer, sizeInBytes, value, fracpart_numdigits, dec, sign // int *\n    ) {\n        if (buffer == 0 || sign == 0 || dec == 0 || sizeInBytes < 1) return 1;\n        let digits;\n        let decpos;\n        let s = 0; // default to positive\n        if (Number.isNaN(value)) {\n            digits = \"1#QNAN00000000000000000000000000000\".slice(0, fracpart_numdigits + 1);\n            decpos = 1;\n        } else if (!Number.isFinite(value)) {\n            digits = \"1#INF00000000000000000000000000000\".slice(0, fracpart_numdigits + 1);\n            decpos = 1;\n        } else if (value == 0) {\n            digits = \"000000000000000000000000000000000000\".slice(0, fracpart_numdigits);\n            decpos = 0;\n        } else {\n            if (value < 0) {\n                s = 1; // negative\n                value = Math.abs(value);\n            }\n            if (fracpart_numdigits > 100 || value > 1e+21 || value < 1e-99) {\n                this.mod.copyString(buffer, sizeInBytes, \"\");\n                this.mod.mem32[dec] = 0;\n                return 1;\n            }\n            const roundValStr = value.toFixed(fracpart_numdigits);\n            let [intPart = \"\", fracPart = \"\"] = roundValStr.split(\".\");\n            if (intPart == \"0\") intPart = \"\";\n            if (intPart.length > 0) {\n                decpos = intPart.length;\n                digits = intPart + fracPart;\n            } else {\n                digits = fracPart.replace(/^0+/, \"\"); // remove leading zeros\n                decpos = digits.length - fracPart.length;\n            }\n        }\n        if (sizeInBytes - 1 < digits.length) return 1;\n        this.mod.copyString(buffer, sizeInBytes, digits);\n        this.mod.setLong(dec, decpos);\n        this.mod.setLong(sign, s);\n        return 0;\n    /*\n        this version 'works' with larger numbers than using toFixed, but doesn't round correctly\n\n        let decpos=0;\n        let digits:string;\n        if (value!=0) decpos=Math.floor(Math.log10(value))+1;\n    \n        if (decpos>0) { // has integer part\n            const intlen=Math.max(decpos, 0);\n            console.log(\"intlen=\",intlen, \"decpos=\",decpos);\n            const [nonExponent, exponent=0] = value.toPrecision(intlen+fracpart_numdigits).split('e');\n            digits=nonExponent.replace('.', '');\n            digits=digits.replace(/^0+/,\"\");  // remove leading zeros\n        }\n        else { // only a fraction\n            const intpart=Math.trunc(value);\n            const fracpart=value-intpart;\n            const prec=fracpart_numdigits- (-decpos);\n            console.log(\"prec=\",prec);\n            if (prec<1) {\n                digits=\"\";\n            }\n            else {\n                const [nonExponent, exponent=0] = fracpart.toPrecision(prec).split('e');\n                digits=nonExponent.replace('.', '');\n                digits=digits.replace(/^0+/,\"\");\n            }\n        }\n\n        console.log(\"fcvtS value\",value,\"fracpart_numdigits\",fracpart_numdigits);\n        console.log('digits=',digits);\n        console.log('dec=',decpos);\n        console.log(\"sign=\",s);\n    */ }\n}\n\n});\n\n\nparcelRegister(\"eDJ4i\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrConsoleCanvas\", () => $aa87aad92858d6c6$export$e1daeed5216ed90a);\n\nvar $dRr3I = parcelRequire(\"dRr3I\");\n\nvar $3k1GP = parcelRequire(\"3k1GP\");\n\nvar $4Jz48 = parcelRequire(\"4Jz48\");\n\nvar $6MgDX = parcelRequire(\"6MgDX\");\nvar $aa87aad92858d6c6$var$D2DType;\n(function(D2DType) {\n    D2DType[D2DType[\"D2D_FILLRECT\"] = 1] = \"D2D_FILLRECT\";\n    D2DType[D2DType[\"D2D_FILLCODEPOINT\"] = 5] = \"D2D_FILLCODEPOINT\";\n    D2DType[D2DType[\"D2D_SETLINEWIDTH\"] = 10] = \"D2D_SETLINEWIDTH\";\n    D2DType[D2DType[\"D2D_SETFILLSTYLERGBA\"] = 11] = \"D2D_SETFILLSTYLERGBA\";\n    D2DType[D2DType[\"D2D_SETFONT\"] = 12] = \"D2D_SETFONT\";\n    D2DType[D2DType[\"D2D_BEGINPATH\"] = 13] = \"D2D_BEGINPATH\";\n    D2DType[D2DType[\"D2D_MOVETO\"] = 14] = \"D2D_MOVETO\";\n    D2DType[D2DType[\"D2D_LINETO\"] = 15] = \"D2D_LINETO\";\n    D2DType[D2DType[\"D2D_FILL\"] = 16] = \"D2D_FILL\";\n    D2DType[D2DType[\"D2D_STROKE\"] = 17] = \"D2D_STROKE\";\n    D2DType[D2DType[\"D2D_SETSTROKESTYLERGBA\"] = 18] = \"D2D_SETSTROKESTYLERGBA\";\n    D2DType[D2DType[\"D2D_ARC\"] = 19] = \"D2D_ARC\";\n    D2DType[D2DType[\"D2D_STROKERECT\"] = 20] = \"D2D_STROKERECT\";\n    D2DType[D2DType[\"D2D_FILLTEXT\"] = 21] = \"D2D_FILLTEXT\";\n    D2DType[D2DType[\"D2D_IMAGEDATA\"] = 22] = \"D2D_IMAGEDATA\";\n    D2DType[D2DType[\"D2D_PUTIMAGEDATA\"] = 23] = \"D2D_PUTIMAGEDATA\";\n    D2DType[D2DType[\"D2D_BEZIERTO\"] = 24] = \"D2D_BEZIERTO\";\n    D2DType[D2DType[\"D2D_MEASURETEXT\"] = 25] = \"D2D_MEASURETEXT\";\n    D2DType[D2DType[\"D2D_SAVE\"] = 26] = \"D2D_SAVE\";\n    D2DType[D2DType[\"D2D_RESTORE\"] = 27] = \"D2D_RESTORE\";\n    D2DType[D2DType[\"D2D_CREATERADIALGRADIENT\"] = 28] = \"D2D_CREATERADIALGRADIENT\";\n    D2DType[D2DType[\"D2D_SETCOLORSTOP\"] = 29] = \"D2D_SETCOLORSTOP\";\n    D2DType[D2DType[\"D2D_SETFILLSTYLEGRADIENT\"] = 30] = \"D2D_SETFILLSTYLEGRADIENT\";\n    D2DType[D2DType[\"D2D_RELEASEID\"] = 31] = \"D2D_RELEASEID\";\n    D2DType[D2DType[\"D2D_CREATELINEARGRADIENT\"] = 32] = \"D2D_CREATELINEARGRADIENT\";\n    D2DType[D2DType[\"D2D_SETFILLSTYLE\"] = 33] = \"D2D_SETFILLSTYLE\";\n    D2DType[D2DType[\"D2D_SETSTROKESTYLE\"] = 34] = \"D2D_SETSTROKESTYLE\";\n    D2DType[D2DType[\"D2D_CLOSEPATH\"] = 35] = \"D2D_CLOSEPATH\";\n    D2DType[D2DType[\"D2D_RESET\"] = 36] = \"D2D_RESET\";\n    D2DType[D2DType[\"D2D_CLEARRECT\"] = 37] = \"D2D_CLEARRECT\";\n    D2DType[D2DType[\"D2D_SCALE\"] = 38] = \"D2D_SCALE\";\n    D2DType[D2DType[\"D2D_TRANSLATE\"] = 39] = \"D2D_TRANSLATE\";\n    D2DType[D2DType[\"D2D_ROTATE\"] = 40] = \"D2D_ROTATE\";\n    D2DType[D2DType[\"D2D_GETTRANSFORM\"] = 41] = \"D2D_GETTRANSFORM\";\n    D2DType[D2DType[\"D2D_SETTRANSFORM\"] = 42] = \"D2D_SETTRANSFORM\";\n    D2DType[D2DType[\"D2D_RESETTRANSFORM\"] = 43] = \"D2D_RESETTRANSFORM\";\n    D2DType[D2DType[\"D2D_STROKETEXT\"] = 44] = \"D2D_STROKETEXT\";\n    D2DType[D2DType[\"D2D_ROUNDRECT\"] = 45] = \"D2D_ROUNDRECT\";\n    D2DType[D2DType[\"D2D_ELLIPSE\"] = 46] = \"D2D_ELLIPSE\";\n    D2DType[D2DType[\"D2D_QUADRATICCURVETO\"] = 47] = \"D2D_QUADRATICCURVETO\";\n    D2DType[D2DType[\"D2D_SETLINEDASH\"] = 48] = \"D2D_SETLINEDASH\";\n    D2DType[D2DType[\"D2D_GETLINEDASH\"] = 49] = \"D2D_GETLINEDASH\";\n    D2DType[D2DType[\"D2D_ARCTO\"] = 50] = \"D2D_ARCTO\";\n    D2DType[D2DType[\"D2D_GETLINEDASHLENGTH\"] = 51] = \"D2D_GETLINEDASHLENGTH\";\n})($aa87aad92858d6c6$var$D2DType || ($aa87aad92858d6c6$var$D2DType = {}));\nclass $aa87aad92858d6c6$export$e1daeed5216ed90a {\n    ctx;\n    id;\n    element;\n    props;\n    cmdCompleteSignal;\n    canvasKeys;\n    isAsyncMod;\n    precomputedObjects;\n    constructor(element){\n        this.isAsyncMod = false; // set to true if getProxyParams called\n        this.precomputedObjects = {};\n        if (!element.getContext) throw new Error(\"attempted to create new twrCanvas with an element that is not a valid HTMLCanvasElement\");\n        this.element = element;\n        const c = element.getContext(\"2d\");\n        if (!c) throw new Error(\"canvas 2D context not found in twrCanvasConstructor\");\n        this.ctx = c;\n        // these two lines are for backwards compatibility with prior version of twr-wasm\n        c.font = \"16 px Courier New\";\n        c.textBaseline = \"top\";\n        this.props = {\n            canvasHeight: element.height,\n            canvasWidth: element.width,\n            type: (0, $4Jz48.IOTypes).CANVAS2D\n        };\n        this.id = (0, $6MgDX.twrConsoleRegistry).registerConsole(this);\n    }\n    // these are the parameters needed to create a twrConsoleCanvasProxy, paired to us\n    getProxyParams() {\n        this.cmdCompleteSignal = new (0, $3k1GP.twrSignal)();\n        this.canvasKeys = new (0, $dRr3I.twrSharedCircularBuffer)(); // tsconfig, lib must be set to 2017 or higher\n        this.isAsyncMod = true;\n        return [\n            \"twrConsoleCanvasProxy\",\n            this.id,\n            this.props,\n            this.cmdCompleteSignal.sharedArray,\n            this.canvasKeys.sharedArray\n        ];\n    }\n    getProp(name) {\n        return this.props[name];\n    }\n    // process messages sent from twrConsoleCanvasProxy\n    // these are used to \"remote procedure call\" from the worker thread to the JS Main thread\n    processMessage(msgType, data, callingModule) {\n        const [id, ...params] = data;\n        if (id != this.id) throw new Error(\"internal error\"); // should never happen\n        switch(msgType){\n            case \"canvas2d-drawseq\":\n                {\n                    const [ds] = params;\n                    this.drawSeq(ds, callingModule);\n                    break;\n                }\n            default:\n                return false;\n        }\n        return true;\n    }\n    /* see draw2d.h for structs that match */ drawSeq(ds, owner) {\n        //console.log(\"twr::Canvas enter drawSeq\");\n        if (!this.ctx) return;\n        const insHdrSize = 16;\n        let currentInsHdr = owner.getLong(ds); /* ds->start */ \n        const lastInsHdr = owner.getLong(ds + 4); /* ds->last */ \n        let currentInsParams = currentInsHdr + insHdrSize;\n        //console.log(\"instruction start, last \",ins.toString(16), lastins.toString(16));\n        let nextInsHdr;\n        //let insCount=0;\n        while(true){\n            //insCount++;\n            const type = owner.getLong(currentInsHdr + 4); /* hdr->type */ \n            switch(type){\n                case $aa87aad92858d6c6$var$D2DType.D2D_FILLRECT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const w = owner.getDouble(currentInsParams + 16);\n                        const h = owner.getDouble(currentInsParams + 24);\n                        this.ctx.fillRect(x, y, w, h);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_STROKERECT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const w = owner.getDouble(currentInsParams + 16);\n                        const h = owner.getDouble(currentInsParams + 24);\n                        this.ctx.strokeRect(x, y, w, h);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_FILLCODEPOINT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const c = owner.getLong(currentInsParams + 16);\n                        let txt = String.fromCodePoint(c);\n                        this.ctx.fillText(txt, x, y);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_FILLTEXT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const codePage = owner.getLong(currentInsParams + 20);\n                        const strPointer = owner.getLong(currentInsParams + 16);\n                        const str = owner.getString(strPointer, undefined, codePage);\n                        //console.log(\"filltext \",x,y,str)\n                        this.ctx.fillText(str, x, y);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_MEASURETEXT:\n                    {\n                        const codePage = owner.getLong(currentInsParams + 8);\n                        const str = owner.getString(owner.getLong(currentInsParams), undefined, codePage);\n                        const tmidx = owner.getLong(currentInsParams + 4);\n                        const tm = this.ctx.measureText(str);\n                        owner.setDouble(tmidx + 0, tm.actualBoundingBoxAscent);\n                        owner.setDouble(tmidx + 8, tm.actualBoundingBoxDescent);\n                        owner.setDouble(tmidx + 16, tm.actualBoundingBoxLeft);\n                        owner.setDouble(tmidx + 24, tm.actualBoundingBoxRight);\n                        owner.setDouble(tmidx + 32, tm.fontBoundingBoxAscent);\n                        owner.setDouble(tmidx + 40, tm.fontBoundingBoxDescent);\n                        owner.setDouble(tmidx + 48, tm.width);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_SETFONT:\n                    {\n                        const fontPointer = owner.getLong(currentInsParams);\n                        const str = owner.getString(fontPointer);\n                        this.ctx.font = str;\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_SETFILLSTYLERGBA:\n                    {\n                        const color = owner.getLong(currentInsParams);\n                        const cssColor = \"#\" + (\"00000000\" + color.toString(16)).slice(-8);\n                        this.ctx.fillStyle = cssColor;\n                    //console.log(\"fillstyle: \", this.ctx.fillStyle, \":\", cssColor,\":\", color)\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_SETSTROKESTYLERGBA:\n                    {\n                        const color = owner.getLong(currentInsParams);\n                        const cssColor = \"#\" + (\"00000000\" + color.toString(16)).slice(-8);\n                        this.ctx.strokeStyle = cssColor;\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_SETFILLSTYLE:\n                    {\n                        const cssColorPointer = owner.getLong(currentInsParams);\n                        const cssColor = owner.getString(cssColorPointer);\n                        this.ctx.fillStyle = cssColor;\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_SETSTROKESTYLE:\n                    {\n                        const cssColorPointer = owner.getLong(currentInsParams);\n                        const cssColor = owner.getString(cssColorPointer);\n                        this.ctx.strokeStyle = cssColor;\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_SETLINEWIDTH:\n                    {\n                        const width = owner.getDouble(currentInsParams);\n                        this.ctx.lineWidth = width;\n                    //console.log(\"twrCanvas D2D_SETLINEWIDTH: \", this.ctx.lineWidth);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_MOVETO:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        this.ctx.moveTo(x, y);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_LINETO:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        this.ctx.lineTo(x, y);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_BEZIERTO:\n                    {\n                        const cp1x = owner.getDouble(currentInsParams);\n                        const cp1y = owner.getDouble(currentInsParams + 8);\n                        const cp2x = owner.getDouble(currentInsParams + 16);\n                        const cp2y = owner.getDouble(currentInsParams + 24);\n                        const x = owner.getDouble(currentInsParams + 32);\n                        const y = owner.getDouble(currentInsParams + 40);\n                        this.ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_BEGINPATH:\n                    this.ctx.beginPath();\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_FILL:\n                    this.ctx.fill();\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_SAVE:\n                    this.ctx.save();\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_RESTORE:\n                    this.ctx.restore();\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_STROKE:\n                    this.ctx.stroke();\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_ARC:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const radius = owner.getDouble(currentInsParams + 16);\n                        const startAngle = owner.getDouble(currentInsParams + 24);\n                        const endAngle = owner.getDouble(currentInsParams + 32);\n                        const counterClockwise = owner.getLong(currentInsParams + 40) != 0;\n                        this.ctx.arc(x, y, radius, startAngle, endAngle, counterClockwise);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_IMAGEDATA:\n                    {\n                        const start = owner.getLong(currentInsParams);\n                        const length = owner.getLong(currentInsParams + 4);\n                        const width = owner.getLong(currentInsParams + 8);\n                        const height = owner.getLong(currentInsParams + 12);\n                        const id = owner.getLong(currentInsParams + 16);\n                        if (id in this.precomputedObjects) console.log(\"warning: D2D_IMAGEDATA ID already exists.\");\n                        if (this.isAsyncMod) this.precomputedObjects[id] = {\n                            mem8: new Uint8Array(owner.memory.buffer, start, length),\n                            width: width,\n                            height: height\n                        };\n                        else {\n                            const z = new Uint8ClampedArray(owner.memory.buffer, start, length);\n                            this.precomputedObjects[id] = new ImageData(z, width, height);\n                        }\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_CREATERADIALGRADIENT:\n                    {\n                        const x0 = owner.getDouble(currentInsParams);\n                        const y0 = owner.getDouble(currentInsParams + 8);\n                        const radius0 = owner.getDouble(currentInsParams + 16);\n                        const x1 = owner.getDouble(currentInsParams + 24);\n                        const y1 = owner.getDouble(currentInsParams + 32);\n                        const radius1 = owner.getDouble(currentInsParams + 40);\n                        const id = owner.getLong(currentInsParams + 48);\n                        let gradient = this.ctx.createRadialGradient(x0, y0, radius0, x1, y1, radius1);\n                        if (id in this.precomputedObjects) console.log(\"warning: D2D_CREATERADIALGRADIENT ID already exists.\");\n                        this.precomputedObjects[id] = gradient;\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_CREATELINEARGRADIENT:\n                    {\n                        const x0 = owner.getDouble(currentInsParams);\n                        const y0 = owner.getDouble(currentInsParams + 8);\n                        const x1 = owner.getDouble(currentInsParams + 16);\n                        const y1 = owner.getDouble(currentInsParams + 24);\n                        const id = owner.getLong(currentInsParams + 32);\n                        let gradient = this.ctx.createLinearGradient(x0, y0, x1, y1);\n                        if (id in this.precomputedObjects) console.log(\"warning: D2D_CREATELINEARGRADIENT ID already exists.\");\n                        this.precomputedObjects[id] = gradient;\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_SETCOLORSTOP:\n                    {\n                        const id = owner.getLong(currentInsParams);\n                        const pos = owner.getLong(currentInsParams + 4);\n                        const cssColorPointer = owner.getLong(currentInsParams + 8);\n                        const cssColor = owner.getString(cssColorPointer);\n                        if (!(id in this.precomputedObjects)) throw new Error(\"D2D_SETCOLORSTOP with invalid ID: \" + id);\n                        const gradient = this.precomputedObjects[id];\n                        gradient.addColorStop(pos, cssColor);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_SETFILLSTYLEGRADIENT:\n                    {\n                        const id = owner.getLong(currentInsParams);\n                        if (!(id in this.precomputedObjects)) throw new Error(\"D2D_SETFILLSTYLEGRADIENT with invalid ID: \" + id);\n                        const gradient = this.precomputedObjects[id];\n                        this.ctx.fillStyle = gradient;\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_RELEASEID:\n                    {\n                        const id = owner.getLong(currentInsParams);\n                        if (this.precomputedObjects[id]) delete this.precomputedObjects[id];\n                        else console.log(\"warning: D2D_RELEASEID with undefined ID \", id);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_PUTIMAGEDATA:\n                    {\n                        const id = owner.getLong(currentInsParams);\n                        const dx = owner.getLong(currentInsParams + 4);\n                        const dy = owner.getLong(currentInsParams + 8);\n                        const dirtyX = owner.getLong(currentInsParams + 12);\n                        const dirtyY = owner.getLong(currentInsParams + 16);\n                        const dirtyWidth = owner.getLong(currentInsParams + 20);\n                        const dirtyHeight = owner.getLong(currentInsParams + 24);\n                        if (!(id in this.precomputedObjects)) throw new Error(\"D2D_PUTIMAGEDATA with invalid ID: \" + id);\n                        //console.log(\"D2D_PUTIMAGEDATA\",start, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight, this.imageData[start]);\n                        let imgData;\n                        if (this.isAsyncMod) {\n                            //console.log(\"D2D_PUTIMAGEDATA wasmModuleAsync\");\n                            const z = this.precomputedObjects[id]; // Uint8Array\n                            const ca = Uint8ClampedArray.from(z.mem8); // shallow copy\n                            imgData = new ImageData(ca, z.width, z.height);\n                        } else imgData = this.precomputedObjects[id];\n                        if (dirtyWidth == 0 && dirtyHeight == 0) this.ctx.putImageData(imgData, dx, dy);\n                        else this.ctx.putImageData(imgData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_CLOSEPATH:\n                    this.ctx.closePath();\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_RESET:\n                    this.ctx.reset();\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_CLEARRECT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const w = owner.getDouble(currentInsParams + 16);\n                        const h = owner.getDouble(currentInsParams + 24);\n                        this.ctx.clearRect(x, y, w, h);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_SCALE:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        this.ctx.scale(x, y);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_TRANSLATE:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        this.ctx.translate(x, y);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_ROTATE:\n                    {\n                        const angle = owner.getDouble(currentInsParams);\n                        this.ctx.rotate(angle);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_GETTRANSFORM:\n                    {\n                        const matrix_ptr = owner.getLong(currentInsParams);\n                        const transform = this.ctx.getTransform();\n                        owner.setDouble(matrix_ptr + 0, transform.a);\n                        owner.setDouble(matrix_ptr + 8, transform.b);\n                        owner.setDouble(matrix_ptr + 16, transform.c);\n                        owner.setDouble(matrix_ptr + 24, transform.d);\n                        owner.setDouble(matrix_ptr + 32, transform.e);\n                        owner.setDouble(matrix_ptr + 40, transform.f);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_SETTRANSFORM:\n                    {\n                        const a = owner.getDouble(currentInsParams);\n                        const b = owner.getDouble(currentInsParams + 8);\n                        const c = owner.getDouble(currentInsParams + 16);\n                        const d = owner.getDouble(currentInsParams + 24);\n                        const e = owner.getDouble(currentInsParams + 32);\n                        const f = owner.getDouble(currentInsParams + 40);\n                        this.ctx.setTransform(a, b, c, d, e, f);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_RESETTRANSFORM:\n                    this.ctx.resetTransform();\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_STROKETEXT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const codePage = owner.getLong(currentInsParams + 20);\n                        const strPointer = owner.getLong(currentInsParams + 16);\n                        const str = owner.getString(strPointer, undefined, codePage);\n                        this.ctx.strokeText(str, x, y);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_ROUNDRECT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const width = owner.getDouble(currentInsParams + 16);\n                        const height = owner.getDouble(currentInsParams + 24);\n                        const radii = owner.getDouble(currentInsParams + 32);\n                        this.ctx.roundRect(x, y, width, height, radii);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_ELLIPSE:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const radiusX = owner.getDouble(currentInsParams + 16);\n                        const radiusY = owner.getDouble(currentInsParams + 24);\n                        const rotation = owner.getDouble(currentInsParams + 32);\n                        const startAngle = owner.getDouble(currentInsParams + 40);\n                        const endAngle = owner.getDouble(currentInsParams + 48);\n                        const counterClockwise = owner.getLong(currentInsParams + 56) != 0;\n                        this.ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterClockwise);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_QUADRATICCURVETO:\n                    {\n                        const cpx = owner.getDouble(currentInsParams);\n                        const cpy = owner.getDouble(currentInsParams + 8);\n                        const x = owner.getDouble(currentInsParams + 16);\n                        const y = owner.getDouble(currentInsParams + 24);\n                        this.ctx.quadraticCurveTo(cpx, cpy, x, y);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_SETLINEDASH:\n                    {\n                        const segment_len = owner.getLong(currentInsParams);\n                        const seg_ptr = owner.getLong(currentInsParams + 4);\n                        let segments = [];\n                        for(let i = 0; i < segment_len; i++)segments[i] = owner.getDouble(seg_ptr + i * 8);\n                        this.ctx.setLineDash(segments);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_GETLINEDASH:\n                    {\n                        const segments = this.ctx.getLineDash();\n                        const buffer_length = owner.getLong(currentInsParams);\n                        const buffer_ptr = owner.getLong(currentInsParams + 4);\n                        const segment_length_ptr = currentInsParams + 8;\n                        owner.setLong(segment_length_ptr, segments.length);\n                        if (segments.length > 0) {\n                            for(let i = 0; i < Math.min(segments.length, buffer_length); i++)owner.setDouble(buffer_ptr + i * 8, segments[i]);\n                            if (segments.length > buffer_length) console.log(\"warning: D2D_GETLINEDASH exceeded given max_length, truncating excess\");\n                        }\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_ARCTO:\n                    {\n                        const x1 = owner.getDouble(currentInsParams);\n                        const y1 = owner.getDouble(currentInsParams + 8);\n                        const x2 = owner.getDouble(currentInsParams + 16);\n                        const y2 = owner.getDouble(currentInsParams + 24);\n                        const radius = owner.getDouble(currentInsParams + 32);\n                        this.ctx.arcTo(x1, y1, x2, y2, radius);\n                    }\n                    break;\n                case $aa87aad92858d6c6$var$D2DType.D2D_GETLINEDASHLENGTH:\n                    owner.setLong(currentInsParams, this.ctx.getLineDash().length);\n                    break;\n                default:\n                    throw new Error(\"unimplemented or unknown Sequence Type in drawSeq: \" + type);\n            }\n            nextInsHdr = owner.getLong(currentInsHdr); /* hdr->next */ \n            if (nextInsHdr == 0) {\n                if (currentInsHdr != lastInsHdr) throw new Error(\"assert type error in twrcanvas, ins!=lastins\");\n                break;\n            }\n            currentInsHdr = nextInsHdr;\n            currentInsParams = currentInsHdr + insHdrSize;\n        }\n        if (this.cmdCompleteSignal) this.cmdCompleteSignal.signal();\n    //console.log(\"Canvas.drawSeq() completed  with instruction count of \", insCount);\n    }\n}\nclass $aa87aad92858d6c6$export$97cec2c338f46b48 {\n    canvasKeys;\n    drawCompleteSignal;\n    props;\n    id;\n    constructor(params){\n        const [className, id, props, signalBuffer, canvasKeysBuffer] = params;\n        this.drawCompleteSignal = new (0, $3k1GP.twrSignal)(signalBuffer);\n        this.canvasKeys = new (0, $dRr3I.twrSharedCircularBuffer)(canvasKeysBuffer);\n        this.props = props;\n        this.id = id;\n    //console.log(\"Create New twrCanvasProxy: \",this.props)\n    }\n    charIn() {\n        //ctx.commit(); not avail in chrome\n        //postMessage([\"debug\", 'x']);\n        return this.canvasKeys.readWait(); // wait for a key, then read it\n    }\n    inkey() {\n        if (this.canvasKeys.isEmpty()) return 0;\n        else return this.charIn();\n    }\n    // note that this implementation does not allow a property to change post creation of an instance of this class\n    getProp(propName) {\n        return this.props[propName];\n    }\n    drawSeq(ds) {\n        this.drawCompleteSignal.reset();\n        postMessage([\n            \"canvas2d-drawseq\",\n            [\n                this.id,\n                ds\n            ]\n        ]);\n        this.drawCompleteSignal.wait();\n    }\n}\n\n});\nparcelRegister(\"3k1GP\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrSignal\", () => $26b48ce2cdfbca9f$export$e37a7b7b851b97f3);\n//\n// This class implements a simple signal/wait mechanism\n// It is used by the WebWorker thread to block/wait, and the main JS thread to signal when to unblock\n//\nvar $26b48ce2cdfbca9f$var$twrSignalState;\n(function(twrSignalState) {\n    twrSignalState[twrSignalState[\"WAITING\"] = 0] = \"WAITING\";\n    twrSignalState[twrSignalState[\"SIGNALED\"] = 1] = \"SIGNALED\";\n})($26b48ce2cdfbca9f$var$twrSignalState || ($26b48ce2cdfbca9f$var$twrSignalState = {}));\nclass $26b48ce2cdfbca9f$export$e37a7b7b851b97f3 {\n    sharedArray;\n    buf;\n    constructor(sa){\n        if (typeof window !== \"undefined\") {\n            if (!crossOriginIsolated && !(window.location.protocol === \"file:\")) throw new Error(\"twrSignal constructor, crossOriginIsolated=\" + crossOriginIsolated + \". See SharedArrayBuffer docs.\");\n        }\n        if (sa) this.sharedArray = sa;\n        else this.sharedArray = new SharedArrayBuffer(4);\n        this.buf = new Int32Array(this.sharedArray);\n        this.buf[0] = $26b48ce2cdfbca9f$var$twrSignalState.WAITING;\n    }\n    signal() {\n        this.buf[0] = $26b48ce2cdfbca9f$var$twrSignalState.SIGNALED;\n        //console.log(\"about to signal\");\n        Atomics.notify(this.buf, 0);\n    }\n    wait() {\n        if (this.buf[0] == $26b48ce2cdfbca9f$var$twrSignalState.WAITING) //console.log(\"waiting...\");\n        Atomics.wait(this.buf, 0, $26b48ce2cdfbca9f$var$twrSignalState.WAITING);\n    }\n    isSignaled() {\n        return this.buf[0] == $26b48ce2cdfbca9f$var$twrSignalState.SIGNALED;\n    }\n    reset() {\n        this.buf[0] = $26b48ce2cdfbca9f$var$twrSignalState.WAITING;\n    }\n}\n\n});\n\n\nparcelRegister(\"a7Sa2\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrConsoleTerminal\", () => $75f49210bbda5451$export$3217cba298dc07f7);\n\nvar $dRr3I = parcelRequire(\"dRr3I\");\n\nvar $7qrGZ = parcelRequire(\"7qrGZ\");\n\nvar $4Jz48 = parcelRequire(\"4Jz48\");\n\nvar $6MgDX = parcelRequire(\"6MgDX\");\nconst $75f49210bbda5451$var$TRS80_GRAPHIC_MARKER = 0xE000;\nconst $75f49210bbda5451$var$TRS80_GRAPHIC_MARKER_MASK = 0xFF00;\nconst $75f49210bbda5451$var$TRS80_GRAPHIC_CHAR_MASK = 0x003F; // would be 0xC0 if we included the graphics marker bit 0x80\nclass $75f49210bbda5451$export$3217cba298dc07f7 {\n    element;\n    id;\n    ctx;\n    keys;\n    returnValue;\n    props;\n    size;\n    cellWidth;\n    cellHeight;\n    cellW1;\n    cellW2;\n    cellH1;\n    cellH2;\n    cellH3;\n    isCursorVisible;\n    videoMem;\n    foreColorMem;\n    backColorMem;\n    cpTranslate;\n    constructor(canvasElement, params = {}){\n        const { foreColor: foreColor = \"white\", backColor: backColor = \"black\", fontSize: fontSize = 16, widthInChars: widthInChars = 80, heightInChars: heightInChars = 25 } = params;\n        this.element = canvasElement;\n        // canvasElement is where we will draw the terminal\n        if (!canvasElement.getContext) throw new Error(\"canvasElement.getContext invalid\");\n        let c = canvasElement.getContext(\"2d\");\n        if (!c) throw new Error(\"canvasElement.getContext('2d') failed\");\n        c.font = fontSize.toString() + \"px Courier New\";\n        c.textBaseline = \"top\";\n        const sampleText = \"          \";\n        //const sampleText=String.fromCharCode(2593).repeat(6);   // this shaded block is typically full width in a font\n        const tm = c.measureText(sampleText);\n        const charWidth = Math.ceil(tm.width / sampleText.length); // ceil rounds up (eg .9 -> 1)\n        let fM = c.measureText(\"X\");\n        const charHeight = Math.ceil(fM.fontBoundingBoxAscent + fM.fontBoundingBoxDescent);\n        canvasElement.width = charWidth * widthInChars;\n        canvasElement.height = charHeight * heightInChars;\n        const canvasHeight = canvasElement.height;\n        const canvasWidth = canvasElement.width;\n        //console.log(\"this.props.canvasHeight, this.props.canvasWidth\",this.props.canvasHeight,this.props.canvasWidth);\n        // reset after dims changed.  Not sure if ctx is needed to reset, but others do\n        let c2 = canvasElement.getContext(\"2d\");\n        if (!c2) throw new Error(\"canvas 2D context not found in twrCanvas.constructor (2nd time)\");\n        this.ctx = c2;\n        this.ctx.font = fontSize.toString() + \"px Courier New\";\n        this.ctx.textBaseline = \"top\";\n        c2.fillStyle = backColor;\n        const backColorAsRGB = Number(\"0x\" + c2.fillStyle.slice(1));\n        c2.fillStyle = foreColor;\n        const foreColorAsRGB = Number(\"0x\" + c2.fillStyle.slice(1));\n        const cursorPos = 0;\n        const type = (0, $4Jz48.IOTypes).CHARWRITE | (0, $4Jz48.IOTypes).CHARREAD | (0, $4Jz48.IOTypes).ADDRESSABLE_DISPLAY;\n        this.props = {\n            type: type,\n            cursorPos: cursorPos,\n            foreColorAsRGB: foreColorAsRGB,\n            backColorAsRGB: backColorAsRGB,\n            fontSize: fontSize,\n            widthInChars: widthInChars,\n            heightInChars: heightInChars,\n            canvasHeight: canvasHeight,\n            canvasWidth: canvasWidth,\n            charWidth: charWidth,\n            charHeight: charHeight\n        };\n        this.isCursorVisible = false;\n        this.size = this.props.widthInChars * this.props.heightInChars;\n        this.videoMem = new Array(this.size);\n        this.foreColorMem = new Array(this.size);\n        this.backColorMem = new Array(this.size);\n        this.cellWidth = this.props.charWidth;\n        this.cellHeight = this.props.charHeight;\n        if (this.cellWidth <= 0) throw new Error(\"invalid cellWidth\");\n        if (this.cellHeight <= 0) throw new Error(\"invalid cellHeight\");\n        // Calc each cell separately to avoid rounding errors\n        this.cellW1 = Math.floor(this.cellWidth / 2);\n        this.cellW2 = this.cellWidth - this.cellW1;\n        this.cellH1 = Math.floor(this.cellHeight / 3);\n        this.cellH2 = this.cellH1;\n        this.cellH3 = this.cellHeight - this.cellH1 - this.cellH2;\n        this.cls();\n        this.cpTranslate = new (0, $7qrGZ.twrCodePageToUnicodeCodePoint)();\n        this.id = (0, $6MgDX.twrConsoleRegistry).registerConsole(this);\n    }\n    // ProxyParams are used as the constructor options to create the Proxy class as returned by getProxyClassName, \n    // in the twrModAsyncProxy WebWorker thread\n    getProxyParams() {\n        if (this.returnValue || this.keys) throw new Error(\"internal error -- getProxyParams unexpectedly called twice.\");\n        // these are used to communicate with twrConsoleTerminalProxy (if it exists)\n        // tsconfig, lib must be set to 2017 or higher for SharedArrayBuffer usage\n        this.returnValue = new (0, $dRr3I.twrSharedCircularBuffer)();\n        this.keys = new (0, $dRr3I.twrSharedCircularBuffer)();\n        return [\n            \"twrConsoleTerminalProxy\",\n            this.id,\n            this.returnValue.sharedArray,\n            this.keys.sharedArray\n        ];\n    }\n    getProp(propName) {\n        return this.props[propName];\n    }\n    keyDown(ev) {\n        (0, $4Jz48.keyDown)(this, ev);\n    }\n    // these messages are sent by twrConsoleTerminalProxy to cause functions to execute in the JS Main Thread\n    processMessage(msgType, data) {\n        const [id, ...params] = data;\n        if (id != this.id) throw new Error(\"internal error\"); // should never happen\n        switch(msgType){\n            case \"term-getprop\":\n                const [propName] = params;\n                const propVal = this.getProp(propName);\n                this.returnValue.write(propVal);\n                break;\n            case \"term-point\":\n                {\n                    const [x, y] = params;\n                    const r = this.point(x, y);\n                    this.returnValue.write(r ? 1 : 0); // wait for result, then read it\n                }\n                break;\n            case \"term-charout\":\n                {\n                    const [ch, codePage] = params;\n                    this.charOut(ch, codePage);\n                }\n                break;\n            case \"term-putstr\":\n                {\n                    const [str] = params;\n                    this.putStr(str);\n                }\n                break;\n            case \"term-cls\":\n                this.cls();\n                break;\n            case \"term-setrange\":\n                {\n                    const [start, values] = params;\n                    this.setRange(start, values);\n                }\n                break;\n            case \"term-setc32\":\n                {\n                    const [location, char] = params;\n                    this.setC32(location, char);\n                }\n                break;\n            case \"term-setreset\":\n                {\n                    const [x, y, isset] = params;\n                    this.setReset(x, y, isset);\n                }\n                break;\n            case \"term-setcursor\":\n                {\n                    const [pos] = params;\n                    this.setCursor(pos);\n                }\n                break;\n            case \"term-setcursorxy\":\n                {\n                    const [x, y] = params;\n                    this.setCursorXY(x, y);\n                }\n                break;\n            case \"term-setcolors\":\n                {\n                    const [foreground, background] = params;\n                    this.setColors(foreground, background);\n                }\n                break;\n            case \"term-focus\":\n                this.element.focus();\n                break;\n            default:\n                return false;\n        }\n        return true;\n    }\n    RGB_TO_RGBA(x) {\n        return x << 8 | 0xFF; // JavaScript uses 32-bit signed integers for bitwise operations, which means the leftmost bit is the sign bit. \n    }\n    eraseLine() {\n        for(let i = this.props.cursorPos; i < Math.floor(this.props.cursorPos / this.props.widthInChars) * this.props.widthInChars + this.props.widthInChars; i++)this.setC32(i, 32);\n    }\n    charOut(c, codePage) {\n        if (c == 13 || c == 10) {\n            if (this.isCursorVisible) this.setC32(this.props.cursorPos, 32);\n            this.props.cursorPos = Math.floor(this.props.cursorPos / this.props.widthInChars);\n            this.props.cursorPos = this.props.cursorPos * this.props.widthInChars;\n            this.props.cursorPos = this.props.cursorPos + this.props.widthInChars;\n            /* if return put us on a new line that isn't a scroll, erase the line */ if (this.props.cursorPos < this.size) this.eraseLine();\n        } else if (c == 8) {\n            if (this.props.cursorPos > 0) {\n                if (this.isCursorVisible) this.setC32(this.props.cursorPos, 32);\n                this.props.cursorPos--;\n                this.setC32(this.props.cursorPos, 32);\n            }\n        } else if (c == 0xE) this.isCursorVisible = true;\n        else if (c == 0xF) {\n            this.setC32(this.props.cursorPos, 32);\n            this.isCursorVisible = false;\n        } else if (c == 24) {\n            if (this.props.cursorPos > 0) this.props.cursorPos--;\n        } else if (c == 25) {\n            if (this.props.cursorPos < this.size - 1) this.props.cursorPos++;\n        } else if (c == 26) {\n            if (this.props.cursorPos < this.props.widthInChars * (this.props.heightInChars - 1)) this.props.cursorPos += this.props.widthInChars;\n        } else if (c == 27) {\n            if (this.props.cursorPos >= this.props.widthInChars) this.props.cursorPos -= this.props.widthInChars;\n        } else if (c == 28) this.props.cursorPos = 0;\n        else if (c == 29) this.props.cursorPos = this.props.cursorPos / this.props.widthInChars * this.props.widthInChars;\n        else if (c == 30) this.eraseLine();\n        else if (c == 31) for(let i = this.props.cursorPos; i < this.size; i++)this.setC32(i, 32);\n        else {\n            const c32 = this.cpTranslate.convert(c, codePage);\n            if (c32 != 0) {\n                this.setC32(this.props.cursorPos, c32);\n                this.props.cursorPos++;\n            }\n        }\n        // Do we need to scroll?\n        if (this.props.cursorPos == this.size) {\n            this.props.cursorPos = this.props.widthInChars * (this.props.heightInChars - 1);\n            for(let i = 0; i < this.props.widthInChars * (this.props.heightInChars - 1); i++){\n                this.videoMem[i] = this.videoMem[i + this.props.widthInChars];\n                this.backColorMem[i] = this.backColorMem[i + this.props.widthInChars];\n                this.foreColorMem[i] = this.foreColorMem[i + this.props.widthInChars];\n            }\n            for(let i = 0; i < this.props.widthInChars; i++){\n                this.videoMem[this.size - i - 1] = 32;\n                this.backColorMem[this.size - i - 1] = this.props.backColorAsRGB;\n                this.foreColorMem[this.size - i - 1] = this.props.foreColorAsRGB;\n            }\n            this.drawRange(0, this.size - 1);\n        }\n        if (this.isCursorVisible) this.setC32(this.props.cursorPos, 9611); // 9611 is graphic block -- same cursor i use in class twrDiv\n        if (this.props.cursorPos >= this.size) throw new Error(\"twrTerm: assert: this.props.cursorPos >= this.size\");\n    }\n    //*************************************************\n    putStr(str) {\n        for(let i = 0; i < str.length; i++)this.charOut(str.codePointAt(i) || 0, (0, $7qrGZ.codePageUTF32));\n    }\n    //*************************************************\n    setC32(location, c32) {\n        if (!(location >= 0 && location < this.size)) throw new Error(\"Invalid location passed to setc32\");\n        this.videoMem[location] = c32;\n        this.backColorMem[location] = this.props.backColorAsRGB;\n        this.foreColorMem[location] = this.props.foreColorAsRGB;\n        // draw one before and one after to fix any character rendering overlap.  \n        // Can happen with anti-aliasing on graphic chars that fill the cell\n        let start = location - 1;\n        if (start < 0) start = 0;\n        let end = location + 1;\n        if (end >= this.size) end = this.size - 1;\n        this.drawRange(start, end);\n        // draw one line above and below as well to fix any character rendering overlap.  \n        // the block cursor typically can cause an issue\n        const startSave = start;\n        const endSave = end;\n        start = start - this.props.widthInChars;\n        end = end - this.props.widthInChars;\n        if (start < 0) start = 0;\n        if (end < 0) end = 0;\n        this.drawRange(start, end);\n        start = startSave + this.props.widthInChars;\n        end = endSave + this.props.widthInChars;\n        if (start >= this.size) start = this.size - 1;\n        if (end >= this.size) end = this.size - 1;\n        this.drawRange(start, end);\n    }\n    //*************************************************\n    cls() {\n        for(let i = 0; i < this.size; i++){\n            this.videoMem[i] = 32;\n            this.backColorMem[i] = this.props.backColorAsRGB;\n            this.foreColorMem[i] = this.props.foreColorAsRGB;\n        }\n        this.props.cursorPos = 0;\n        this.isCursorVisible = false;\n        this.drawRange(0, this.size - 1);\n    }\n    setFillStyleRGB(color) {\n        // const cssColor= \"#\"+(\"00000000\" + color.toString(16)).slice(-8);  RGBA\n        const cssColor = `#${color.toString(16).padStart(6, \"0\")}`;\n        this.ctx.fillStyle = cssColor;\n    }\n    drawTrs80Graphic(offset, val, fgc, bgc) {\n        let x, y;\n        x = offset % this.props.widthInChars * this.cellWidth;\n        y = Math.floor(offset / this.props.widthInChars) * this.cellHeight;\n        this.setFillStyleRGB(bgc);\n        this.ctx.fillRect(x, y, this.cellWidth, this.cellHeight);\n        if (val == 32) return;\n        this.setFillStyleRGB(fgc);\n        if (val & 1) this.ctx.fillRect(x, y, this.cellW1, this.cellH1);\n        y = y + this.cellH1;\n        if (val & 4) this.ctx.fillRect(x, y, this.cellW1, this.cellH2);\n        y = y + this.cellH2;\n        if (val & 16) this.ctx.fillRect(x, y, this.cellW1, this.cellH3);\n        x = x + this.cellW1;\n        if (val & 32) this.ctx.fillRect(x, y, this.cellW2, this.cellH3);\n        y = y - this.cellH2;\n        if (val & 8) this.ctx.fillRect(x, y, this.cellW2, this.cellH2);\n        y = y - this.cellH1;\n        if (val & 2) this.ctx.fillRect(x, y, this.cellW2, this.cellH1);\n    }\n    //**************************************************\n    drawCell(offset, value, fgc, bgc) {\n        if ((value & $75f49210bbda5451$var$TRS80_GRAPHIC_MARKER_MASK) == $75f49210bbda5451$var$TRS80_GRAPHIC_MARKER || value == 32) this.drawTrs80Graphic(offset, value & $75f49210bbda5451$var$TRS80_GRAPHIC_CHAR_MASK, fgc, bgc);\n        else {\n            let x, y;\n            x = offset % this.props.widthInChars * this.cellWidth;\n            y = Math.floor(offset / this.props.widthInChars) * this.cellHeight;\n            this.setFillStyleRGB(bgc);\n            this.ctx.fillRect(x, y, this.cellWidth, this.cellHeight);\n            if (value != 32) {\n                this.setFillStyleRGB(fgc);\n                const txt = String.fromCodePoint(value);\n                this.ctx.fillText(txt, x, y);\n            }\n        }\n    }\n    //*************************************************\n    // !!TODO add ability to setRange colors\n    // !! should this take a bytearray?\n    // !! need to add \"getRange\" to match\n    setRange(start, values) {\n        let k = 0;\n        for(let i = start; i < start + values.length; i++)this.videoMem[i] = values[k++];\n        this.drawRange(start, start + values.length - 1);\n    }\n    drawRange(start, end) {\n        for(let i = start; i <= end; i++)this.drawCell(i, this.videoMem[i], this.foreColorMem[i], this.backColorMem[i]);\n    }\n    /*************************************************/ setReset(x, y, isset) {\n        const loc = Math.floor(x / 2) + this.props.widthInChars * Math.floor(y / 3);\n        const cellx = x % 2;\n        const celly = y % 3;\n        if (x < 0 || x > this.props.widthInChars * 2) throw new Error(\"setReset: invalid x value\");\n        if (y < 0 || y > this.props.heightInChars * 3) throw new Error(\"setReset: invalid y value\");\n        if (!((this.videoMem[loc] & $75f49210bbda5451$var$TRS80_GRAPHIC_MARKER_MASK) == $75f49210bbda5451$var$TRS80_GRAPHIC_MARKER)) {\n            this.videoMem[loc] = $75f49210bbda5451$var$TRS80_GRAPHIC_MARKER; /* set to a cleared graphics value */ \n            this.backColorMem[loc] = this.props.backColorAsRGB;\n            this.foreColorMem[loc] = this.props.foreColorAsRGB;\n        }\n        if (isset) this.videoMem[loc] |= 1 << celly * 2 + cellx;\n        else this.videoMem[loc] &= ~(1 << celly * 2 + cellx);\n        this.drawRange(loc, loc);\n    }\n    //*************************************************\n    point(x, y) {\n        const loc = Math.floor(x / 2) + this.props.widthInChars * Math.floor(y / 3);\n        const cellx = x % 2;\n        const celly = y % 3;\n        if (x < 0 || x > this.props.widthInChars * 2) throw new Error(\"Point: invalid x value\");\n        if (y < 0 || y > this.props.heightInChars * 3) throw new Error(\"Point: invalid y value\");\n        if (!((this.videoMem[loc] & $75f49210bbda5451$var$TRS80_GRAPHIC_MARKER_MASK) == $75f49210bbda5451$var$TRS80_GRAPHIC_MARKER)) return false; /* not a graphic cell, so false */ \n        if (this.videoMem[loc] & 1 << celly * 2 + cellx) return true;\n        else return false;\n    }\n    //*************************************************\n    setCursor(location) {\n        if (location < 0 || location >= this.size) throw new Error(\"setCursor: invalid location: \" + location);\n        this.props.cursorPos = location;\n    }\n    //*************************************************\n    setCursorXY(x, y) {\n        if (x < 0 || y < 0 || this.props.widthInChars * y + x >= this.size) throw new Error(\"setCursorXY: invalid parameter(s)\");\n        this.setCursor(this.props.widthInChars * y + x);\n    }\n    //*************************************************\n    setColors(foreground, background) {\n        this.props.foreColorAsRGB = foreground;\n        this.props.backColorAsRGB = background;\n    }\n}\nclass $75f49210bbda5451$export$6dc37146168f9b6c {\n    keys;\n    returnValue;\n    id;\n    constructor(params){\n        const [className, id, returnBuffer, keysBuffer] = params;\n        this.keys = new (0, $dRr3I.twrSharedCircularBuffer)(keysBuffer);\n        this.returnValue = new (0, $dRr3I.twrSharedCircularBuffer)(returnBuffer);\n        this.id = id;\n    }\n    getProp(propName) {\n        postMessage([\n            \"term-getprop\",\n            [\n                this.id,\n                propName\n            ]\n        ]);\n        return this.returnValue.readWait(); // wait for result, then read it\n    }\n    charIn() {\n        return this.keys.readWait(); // wait for a key, then read it\n    }\n    point(x, y) {\n        postMessage([\n            \"term-point\",\n            [\n                this.id,\n                x,\n                y\n            ]\n        ]);\n        return this.returnValue.readWait() != 0; // wait for result, then read it\n    }\n    charOut(ch, codePoint) {\n        postMessage([\n            \"term-charout\",\n            [\n                this.id,\n                ch,\n                codePoint\n            ]\n        ]);\n    }\n    putStr(str) {\n        postMessage([\n            \"term-putstr\",\n            [\n                this.id,\n                str\n            ]\n        ]);\n    }\n    cls() {\n        postMessage([\n            \"term-cls\",\n            [\n                this.id\n            ]\n        ]);\n    }\n    setRange(start, values) {\n        postMessage([\n            \"term-setrange\",\n            [\n                this.id,\n                start,\n                values\n            ]\n        ]);\n    }\n    setC32(location, char) {\n        postMessage([\n            \"term-setc32\",\n            [\n                this.id,\n                location,\n                char\n            ]\n        ]);\n    }\n    setReset(x, y, isset) {\n        postMessage([\n            \"term-setreset\",\n            [\n                this.id,\n                x,\n                y,\n                isset\n            ]\n        ]);\n    }\n    setCursor(pos) {\n        postMessage([\n            \"term-setcursor\",\n            [\n                this.id,\n                pos\n            ]\n        ]);\n    }\n    setCursorXY(x, y) {\n        postMessage([\n            \"term-setcursorxy\",\n            [\n                this.id,\n                x,\n                y\n            ]\n        ]);\n    }\n    setColors(foreground, background) {\n        postMessage([\n            \"term-setcolors\",\n            [\n                this.id,\n                foreground,\n                background\n            ]\n        ]);\n    }\n    setFocus() {\n        postMessage([\n            \"term-focus\",\n            [\n                this.id\n            ]\n        ]);\n    }\n}\n\n});\n\nparcelRegister(\"9kgjF\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrConsoleDebug\", () => $6ca2a3642a328c4c$export$e501d006d4cbf5f7);\n\nvar $4Jz48 = parcelRequire(\"4Jz48\");\n\nvar $7qrGZ = parcelRequire(\"7qrGZ\");\n\nvar $6MgDX = parcelRequire(\"6MgDX\");\nclass $6ca2a3642a328c4c$export$e501d006d4cbf5f7 {\n    logline = \"\";\n    element = undefined;\n    id;\n    cpTranslate;\n    constructor(){\n        this.id = (0, $6MgDX.twrConsoleRegistry).registerConsole(this);\n        this.cpTranslate = new (0, $7qrGZ.twrCodePageToUnicodeCodePoint)();\n    }\n    charOut(ch, codePage) {\n        const char = this.cpTranslate.convert(ch, codePage);\n        if (char == 10 || char == 0x03) {\n            console.log(this.logline); // ideally without a linefeed, but there is no way to not have a LF with console.log API.\n            this.logline = \"\";\n        } else {\n            this.logline = this.logline + String.fromCodePoint(char);\n            if (this.logline.length >= 300) {\n                console.log(this.logline);\n                this.logline = \"\";\n            }\n        }\n    }\n    getProp(propName) {\n        if (propName === \"type\") return (0, $4Jz48.IOTypes).CHARWRITE;\n        console.log(\"twrConsoleDebug.getProp passed unknown property name: \", propName);\n        return 0;\n    }\n    getProxyParams() {\n        return [\n            \"twrConsoleDebugProxy\",\n            this.id\n        ];\n    }\n    keyDown(ev) {\n        throw new Error(\"twrConsoleDebug does not support character input\");\n    }\n    processMessage(msgType, data, callingModule) {\n        const [id, ...params] = data;\n        if (id != this.id) throw new Error(\"internal error\"); // should never happen\n        switch(msgType){\n            case \"debug-charout\":\n                {\n                    const [ch, codePage] = params;\n                    this.charOut(ch, codePage);\n                }\n                break;\n            case \"debug-putstr\":\n                {\n                    const [str] = params;\n                    this.putStr(str);\n                }\n                break;\n            default:\n                return false;\n        }\n        return true;\n    }\n    putStr(str) {\n        for(let i = 0; i < str.length; i++)this.charOut(str.codePointAt(i) || 0, (0, $7qrGZ.codePageUTF32));\n    }\n}\nclass $6ca2a3642a328c4c$export$bcb1e5070a093206 {\n    id;\n    constructor(params){\n        this.id = params[1];\n    }\n    charIn() {\n        return 0;\n    }\n    setFocus() {}\n    charOut(ch, codePoint) {\n        postMessage([\n            \"debug-charout\",\n            [\n                this.id,\n                ch,\n                codePoint\n            ]\n        ]);\n    }\n    putStr(str) {\n        postMessage([\n            \"debug-putstr\",\n            [\n                this.id,\n                str\n            ]\n        ]);\n    }\n    getProp(propName) {\n        if (propName === \"type\") return (0, $4Jz48.IOTypes).CHARWRITE;\n        console.log(\"twrConsoleDebugProxy.getProp passed unknown property name: \", propName);\n        return 0;\n    }\n} // ************************************************************************\n // debugLog doesn't currently wait for the message to log, it returns immediately.\n // I could move this to be in the twrWaitingCalls class\n\n});\n\n\nparcelRegister(\"5savl\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrTimeEpochImpl\", () => $3f87b74122de4998$export$a952b8f8c62754b8);\n// return ms since epoch as double\nfunction $3f87b74122de4998$export$a952b8f8c62754b8() {\n    return Date.now();\n}\n\n});\n\n\nparcelRegister(\"U6Thw\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmModuleAsync\", () => $0a8a936a2dc396bf$export$678fe6e36ab9a6ff);\n\nvar $1Yd7N = parcelRequire(\"1Yd7N\");\n\nvar $eEBf6 = parcelRequire(\"eEBf6\");\n\nvar $4Jz48 = parcelRequire(\"4Jz48\");\n\nvar $6MgDX = parcelRequire(\"6MgDX\");\n\nclass $0a8a936a2dc396bf$export$678fe6e36ab9a6ff extends (0, $1Yd7N.twrWasmModuleInJSMain) {\n    myWorker;\n    malloc;\n    loadWasmResolve;\n    loadWasmReject;\n    callCResolve;\n    callCReject;\n    initLW = false;\n    waitingcalls;\n    // d2dcanvas?:twrCanvas; - defined in twrWasmModuleInJSMain\n    // io:{[key:string]: IConsole}; - defined in twrWasmModuleInJSMain\n    constructor(opts){\n        super(opts);\n        this.malloc = (size)=>{\n            throw new Error(\"Error - un-init malloc called.\");\n        };\n        if (!window.Worker) throw new Error(\"This browser doesn't support web workers.\");\n        this.myWorker = new Worker((parcelRequire(\"ex8lJ\")));\n        this.myWorker.onerror = (event)=>{\n            console.log(\"this.myWorker.onerror (undefined message typically means Worker failed to load)\");\n            console.log(\"event.message: \" + event.message);\n            throw event;\n        };\n        this.myWorker.onmessage = this.processMsg.bind(this);\n        this.waitingcalls = new (0, $eEBf6.twrWaitingCalls)(); // handle's calls that cross the worker thread - main js thread boundary\n    }\n    // overrides base implementation\n    async loadWasm(pathToLoad) {\n        if (this.initLW) throw new Error(\"twrWasmAsyncModule::loadWasm can only be called once per twrWasmAsyncModule instance\");\n        this.initLW = true;\n        return new Promise((resolve, reject)=>{\n            this.loadWasmResolve = resolve;\n            this.loadWasmReject = reject;\n            this.malloc = (size)=>{\n                return this.callCImpl(\"malloc\", [\n                    size\n                ]);\n            };\n            // base class twrWasmModuleInJSMain member variables include:\n            // d2dcanvas:twrCanvas, io:{ [key:string]:IConsole }\n            // io.stdio & io.stderr are required to exist and be valid\n            // d2dcanvas is optional \n            // everything needed to create Proxy versions of all IConsoles, and create the proxy registry\n            let conProxyParams = [];\n            for(let i = 0; i < (0, $6MgDX.twrConsoleRegistry).consoles.length; i++)conProxyParams.push((0, $6MgDX.twrConsoleRegistry).consoles[i].getProxyParams());\n            const allProxyParams = {\n                conProxyParams: conProxyParams,\n                ioNamesToID: this.ioNamesToID,\n                waitingCallsProxyParams: this.waitingcalls.getProxyParams()\n            };\n            const urlToLoad = new URL(pathToLoad, document.URL);\n            const startMsg = {\n                urlToLoad: urlToLoad.href,\n                allProxyParams: allProxyParams\n            };\n            this.myWorker.postMessage([\n                \"startup\",\n                startMsg\n            ]);\n        });\n    }\n    async callC(params) {\n        const cparams = await this.preCallC(params); // will also validate params[0]\n        const retval = await this.callCImpl(params[0], cparams);\n        await this.postCallC(cparams, params);\n        return retval;\n    }\n    async callCImpl(fname, cparams = []) {\n        return new Promise((resolve, reject)=>{\n            this.callCResolve = resolve;\n            this.callCReject = reject;\n            this.myWorker.postMessage([\n                \"callC\",\n                fname,\n                cparams\n            ]);\n        });\n    }\n    // this function is deprecated and here for backward compatibility\n    keyDownDiv(ev) {\n        let destinationCon;\n        if (this.io.stdio.element && this.io.stdio.element.id === \"twr_iodiv\") destinationCon = this.io.stdio;\n        else if (this.io.stderr.element && this.io.stderr.element.id === \"twr_iodiv\") destinationCon = this.io.stdio;\n        else return;\n        (0, $4Jz48.keyDown)(destinationCon, ev);\n    }\n    // this function is deprecated and here for backward compatibility\n    keyDownCanvas(ev) {\n        let destinationCon;\n        if (this.io.stdio.element && this.io.stdio.element.id === \"twr_iocanvas\") destinationCon = this.io.stdio;\n        else if (this.io.stderr.element && this.io.stderr.element.id === \"twr_iocanvas\") destinationCon = this.io.stdio;\n        else return;\n        (0, $4Jz48.keyDown)(destinationCon, ev);\n    }\n    processMsg(event) {\n        const msgType = event.data[0];\n        const d = event.data[1];\n        //console.log(\"twrWasmAsyncModule - got message: \"+event.data)\n        switch(msgType){\n            case \"setmemory\":\n                this.memory = d;\n                if (!this.memory) throw new Error(\"unexpected error - undefined memory\");\n                this.mem8 = new Uint8Array(this.memory.buffer);\n                this.mem32 = new Uint32Array(this.memory.buffer);\n                this.memD = new Float64Array(this.memory.buffer);\n                break;\n            case \"startupFail\":\n                if (this.loadWasmReject) this.loadWasmReject(d);\n                else throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined loadWasmReject)\");\n                break;\n            case \"startupOkay\":\n                if (this.loadWasmResolve) this.loadWasmResolve(undefined);\n                else throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined loadWasmResolve)\");\n                break;\n            case \"callCFail\":\n                if (this.callCReject) this.callCReject(d);\n                else throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined callCReject)\");\n                break;\n            case \"callCOkay\":\n                if (this.callCResolve) this.callCResolve(d);\n                else throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined callCResolve)\");\n                break;\n            default:\n                if (!this.waitingcalls) throw new Error(\"internal error: this.waitingcalls undefined.\");\n                if (this.waitingcalls.processMessage(msgType, d)) break;\n                // here if a console  message\n                // console messages are an array with the first entry as the console ID\n                const con = (0, $6MgDX.twrConsoleRegistry).getConsole(d[0]);\n                if (con.processMessage(msgType, d, this)) break;\n                throw new Error(\"twrWasmAsyncModule - unknown and unexpected msgType: \" + msgType);\n        }\n    }\n}\n\n});\nparcelRegister(\"eEBf6\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWaitingCalls\", () => $aab1b0b9b5c6c7e8$export$9e37856d1928d388);\n\nvar $3k1GP = parcelRequire(\"3k1GP\");\nclass $aab1b0b9b5c6c7e8$export$9e37856d1928d388 {\n    callCompleteSignal;\n    parameters;\n    constructor(){\n        this.callCompleteSignal = new (0, $3k1GP.twrSignal)();\n        this.parameters = new Uint32Array(new SharedArrayBuffer(4));\n    }\n    startSleep(ms) {\n        setTimeout(()=>{\n            this.callCompleteSignal.signal();\n        }, ms);\n    }\n    getProxyParams() {\n        return [\n            this.callCompleteSignal.sharedArray,\n            this.parameters.buffer\n        ];\n    }\n    processMessage(msgType, data) {\n        switch(msgType){\n            case \"sleep\":\n                const [ms] = data;\n                this.startSleep(ms);\n                break;\n            default:\n                return false;\n        }\n        return true;\n    }\n}\nclass $aab1b0b9b5c6c7e8$export$78d2a4633fe89379 {\n    callCompleteSignal;\n    parameters;\n    constructor(params){\n        this.callCompleteSignal = new (0, $3k1GP.twrSignal)(params[0]);\n        this.parameters = new Uint32Array(params[1]);\n    }\n    sleep(ms) {\n        this.callCompleteSignal.reset();\n        postMessage([\n            \"sleep\",\n            [\n                ms\n            ]\n        ]);\n        this.callCompleteSignal.wait();\n    }\n}\n\n});\n\nparcelRegister(\"ex8lJ\", function(module, exports) {\n\nvar $hoqmg = parcelRequire(\"hoqmg\");\nlet $a94a9fc609ab5168$var$url = new URL(\"twrmodasyncproxy.c3081bc6.js\", import.meta.url);\nmodule.exports = $hoqmg($a94a9fc609ab5168$var$url.toString(), $a94a9fc609ab5168$var$url.origin, true);\n\n});\nparcelRegister(\"hoqmg\", function(module, exports) {\n\"use strict\";\nmodule.exports = function(workerUrl, origin, isESM) {\n    if (origin === self.location.origin) // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n    else {\n        // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n        var source = isESM ? \"import \" + JSON.stringify(workerUrl) + \";\" : \"importScripts(\" + JSON.stringify(workerUrl) + \");\";\n        return URL.createObjectURL(new Blob([\n            source\n        ], {\n            type: \"application/javascript\"\n        }));\n    }\n};\n\n});\n\n\n\n\n\nparcelRequire(\"57pKS\");\n\n//# sourceMappingURL=lib-js.0f7166eb.js.map\n","import {twrWasmModule} from \"./twrmod.js\";\r\nimport {twrWasmModuleAsync} from \"./twrmodasync.js\";\r\nimport {IModOpts} from \"./twrmodbase.js\"\r\nimport {twrConsoleDiv} from \"./twrcondiv.js\"\r\nimport {twrConsoleTerminal} from \"./twrconterm.js\"\r\nimport {twrConsoleDebug} from \"./twrcondebug.js\"\r\nimport {twrConsoleCanvas} from \"./twrcanvas.js\"\r\n\r\nexport {IModOpts};\r\nexport {twrWasmModule};\r\nexport {twrWasmModuleAsync};\r\nexport {twrConsoleDiv};\r\nexport {twrConsoleTerminal};\r\nexport {twrConsoleDebug};\r\nexport {twrConsoleCanvas};\r\n\r\n","import { twrWasmModuleInJSMain } from \"./twrmodjsmain.js\";\nimport { twrTimeEpochImpl } from \"./twrdate.js\";\nimport { twrTimeTmLocalImpl, twrUserLconvImpl, twrUserLanguageImpl, twrRegExpTest1252Impl, twrToLower1252Impl, twrToUpper1252Impl } from \"./twrlocale.js\";\nimport { twrStrcollImpl, twrUnicodeCodePointToCodePageImpl, twrCodePageToUnicodeCodePoint, twrGetDtnamesImpl } from \"./twrlocale.js\";\nimport { twrConsoleRegistry } from \"./twrconreg.js\";\nexport class twrWasmModule extends twrWasmModuleInJSMain {\n    malloc;\n    imports;\n    cpTranslate;\n    constructor(opts = {}) {\n        super(opts);\n        this.malloc = (size) => { throw new Error(\"error - un-init malloc called\"); };\n        this.cpTranslate = new twrCodePageToUnicodeCodePoint();\n        const canvasErrorFunc = (...args) => {\n            throw new Error(\"A 2D draw function was called, but a valid twrCanvas is not defined.\");\n        };\n        const conCall = (funcName, jsid, ...args) => {\n            const con = twrConsoleRegistry.getConsole(jsid);\n            const f = con[funcName];\n            if (!f)\n                throw new Error(`Likely using an incorrect console type. jsid=${jsid}, funcName=${funcName}`);\n            return f.call(con, ...args);\n        };\n        const conSetRange = (jsid, chars, start, len) => {\n            let values = [];\n            for (let i = start; i < start + len; i++) {\n                values.push(this.getLong(i));\n            }\n            conCall(\"setRange\", jsid, start, values);\n        };\n        const conPutStr = (jsid, chars, codePage) => {\n            conCall(\"putStr\", jsid, this.getString(chars), codePage);\n        };\n        const conGetProp = (jsid, pn) => {\n            const propName = this.getString(pn);\n            return conCall(\"getProp\", jsid, propName);\n        };\n        const conDrawSeq = (jsid, ds) => {\n            conCall(\"drawSeq\", jsid, ds, this);\n        };\n        const twrGetConIDFromNameImpl = (nameIdx) => {\n            const name = this.getString(nameIdx);\n            const id = this.ioNamesToID[name];\n            if (id)\n                return id;\n            else\n                return -1;\n        };\n        this.imports = {\n            twrTimeEpoch: twrTimeEpochImpl,\n            twrTimeTmLocal: twrTimeTmLocalImpl.bind(this),\n            twrUserLconv: twrUserLconvImpl.bind(this),\n            twrUserLanguage: twrUserLanguageImpl.bind(this),\n            twrRegExpTest1252: twrRegExpTest1252Impl.bind(this),\n            twrToLower1252: twrToLower1252Impl.bind(this),\n            twrToUpper1252: twrToUpper1252Impl.bind(this),\n            twrStrcoll: twrStrcollImpl.bind(this),\n            twrUnicodeCodePointToCodePage: twrUnicodeCodePointToCodePageImpl.bind(this),\n            twrCodePageToUnicodeCodePoint: this.cpTranslate.convert.bind(this.cpTranslate),\n            twrGetDtnames: twrGetDtnamesImpl.bind(this),\n            twrGetConIDFromName: twrGetConIDFromNameImpl,\n            twrConCharOut: conCall.bind(null, \"charOut\"),\n            twrConCharIn: this.null,\n            twrSetFocus: this.null,\n            twrConGetProp: conGetProp,\n            twrConCls: conCall.bind(null, \"cls\"),\n            twrConSetC32: conCall.bind(null, \"setC32\"),\n            twrConSetReset: conCall.bind(null, \"setReset\"),\n            twrConPoint: conCall.bind(null, \"point\"),\n            twrConSetCursor: conCall.bind(null, \"setCursor\"),\n            twrConSetColors: conCall.bind(null, \"setColors\"),\n            twrConSetRange: conSetRange,\n            twrConPutStr: conPutStr,\n            twrConDrawSeq: conDrawSeq,\n            twrCanvasCharIn: this.null,\n            twrCanvasInkey: this.null,\n            twrSleep: this.null,\n            twrSin: Math.sin,\n            twrCos: Math.cos,\n            twrTan: Math.tan,\n            twrFAbs: Math.abs,\n            twrACos: Math.acos,\n            twrASin: Math.asin,\n            twrATan: Math.atan,\n            twrExp: Math.exp,\n            twrFloor: Math.floor,\n            twrCeil: Math.ceil,\n            twrFMod: function (x, y) { return x % y; },\n            twrLog: Math.log,\n            twrPow: Math.pow,\n            twrSqrt: Math.sqrt,\n            twrTrunc: Math.trunc,\n            twrDtoa: this.floatUtil.dtoa.bind(this.floatUtil),\n            twrToFixed: this.floatUtil.toFixed.bind(this.floatUtil),\n            twrToExponential: this.floatUtil.toExponential.bind(this.floatUtil),\n            twrAtod: this.floatUtil.atod.bind(this.floatUtil),\n            twrFcvtS: this.floatUtil.fcvtS.bind(this.floatUtil),\n        };\n    }\n    async loadWasm(pathToLoad) {\n        return super.loadWasm(pathToLoad, this.imports, this.ioNamesToID);\n    }\n    null(inval) {\n        throw new Error(\"call to unimplemented twrXXX import in twrWasmModule.  Use twrWasmModuleAsync ?\");\n    }\n}\n//# sourceMappingURL=twrmod.js.map","import {IModOpts} from \"./twrmodbase.js\";\r\nimport {twrWasmModuleInJSMain} from \"./twrmodjsmain.js\"\r\nimport {twrTimeEpochImpl} from \"./twrdate.js\"\r\nimport {twrTimeTmLocalImpl, twrUserLconvImpl, twrUserLanguageImpl, twrRegExpTest1252Impl,twrToLower1252Impl, twrToUpper1252Impl} from \"./twrlocale.js\"\r\nimport {twrStrcollImpl, twrUnicodeCodePointToCodePageImpl, twrCodePageToUnicodeCodePoint, twrGetDtnamesImpl} from \"./twrlocale.js\"\r\nimport {IConsole} from \"./twrcon.js\"\r\nimport {twrConsoleRegistry} from \"./twrconreg.js\"\r\n\r\nexport class twrWasmModule extends twrWasmModuleInJSMain {\r\n   malloc:(size:number)=>Promise<number>;\r\n   imports:WebAssembly.ModuleImports;\r\n   cpTranslate:twrCodePageToUnicodeCodePoint;\r\n\r\n\r\n   constructor(opts:IModOpts={}) {\r\n      super(opts);\r\n      this.malloc=(size:number)=>{throw new Error(\"error - un-init malloc called\")};\r\n\t\tthis.cpTranslate=new twrCodePageToUnicodeCodePoint();\r\n\r\n      const canvasErrorFunc = (...args: any[]):any => {\r\n         throw new Error(\"A 2D draw function was called, but a valid twrCanvas is not defined.\");\r\n      }\r\n\r\n      const conCall = (funcName: keyof IConsole, jsid:number, ...args: any[]):any => {\r\n         const con=twrConsoleRegistry.getConsole(jsid);\r\n         const f=con[funcName] as (...args: any[]) => any;\r\n         if (!f) throw new Error(`Likely using an incorrect console type. jsid=${jsid}, funcName=${funcName}`);\r\n         return f.call(con, ...args);\r\n      }\r\n\r\n      const conSetRange = (jsid:number, chars:number, start:number, len:number) => {\r\n         let values=[];\r\n         for (let i=start; i<start+len; i++) {\r\n            values.push(this.getLong(i));\r\n         }\r\n         conCall(\"setRange\", jsid, start, values);\r\n      }\r\n\r\n      const conPutStr = (jsid:number, chars:number, codePage:number) => {\r\n         conCall(\"putStr\", jsid, this.getString(chars), codePage);\r\n      }\r\n\r\n      const conGetProp = (jsid:number, pn:number):number => {\r\n         const propName=this.getString(pn);\r\n         return conCall(\"getProp\", jsid, propName);\r\n      }\r\n\r\n      const conDrawSeq = (jsid:number, ds:number) => {\r\n         conCall(\"drawSeq\", jsid, ds, this);\r\n      }\r\n\r\n      const twrGetConIDFromNameImpl = (nameIdx:number):number => {\r\n         const name=this.getString(nameIdx);\r\n         const id=this.ioNamesToID[name];\r\n         if (id)\r\n            return id;\r\n         else\r\n            return -1;\r\n      }\r\n      \r\n      this.imports={\r\n         twrTimeEpoch:twrTimeEpochImpl,\r\n         twrTimeTmLocal:twrTimeTmLocalImpl.bind(this),\r\n         twrUserLconv:twrUserLconvImpl.bind(this),\r\n         twrUserLanguage:twrUserLanguageImpl.bind(this),\r\n         twrRegExpTest1252:twrRegExpTest1252Impl.bind(this),\r\n         twrToLower1252:twrToLower1252Impl.bind(this),\r\n         twrToUpper1252:twrToUpper1252Impl.bind(this),\r\n         twrStrcoll:twrStrcollImpl.bind(this),\r\n         twrUnicodeCodePointToCodePage:twrUnicodeCodePointToCodePageImpl.bind(this),\r\n         twrCodePageToUnicodeCodePoint:this.cpTranslate.convert.bind(this.cpTranslate),\r\n         twrGetDtnames:twrGetDtnamesImpl.bind(this),\r\n         twrGetConIDFromName: twrGetConIDFromNameImpl,\r\n\r\n         twrConCharOut:conCall.bind(null, \"charOut\"),\r\n         twrConCharIn:this.null,\r\n         twrSetFocus:this.null,\r\n\r\n\r\n         twrConGetProp:conGetProp,\r\n         twrConCls:conCall.bind(null, \"cls\"),\r\n         twrConSetC32:conCall.bind(null, \"setC32\"),\r\n         twrConSetReset:conCall.bind(null, \"setReset\"),\r\n         twrConPoint:conCall.bind(null, \"point\"),\r\n         twrConSetCursor:conCall.bind(null, \"setCursor\"),\r\n         twrConSetColors:conCall.bind(null, \"setColors\"),\r\n         twrConSetRange:conSetRange,\r\n         twrConPutStr:conPutStr,\r\n\r\n         twrConDrawSeq:conDrawSeq,\r\n         \r\n         twrCanvasCharIn:this.null,\r\n         twrCanvasInkey:this.null,\r\n         twrSleep:this.null,\r\n\r\n         twrSin:Math.sin,\r\n         twrCos:Math.cos,\r\n         twrTan: Math.tan,\r\n         twrFAbs: Math.abs,\r\n         twrACos: Math.acos,\r\n         twrASin: Math.asin,\r\n         twrATan: Math.atan,\r\n         twrExp: Math.exp,\r\n         twrFloor: Math.floor,\r\n         twrCeil: Math.ceil,\r\n         twrFMod: function(x:number, y:number) {return x%y},\r\n         twrLog: Math.log,\r\n         twrPow: Math.pow,\r\n         twrSqrt: Math.sqrt,\r\n         twrTrunc: Math.trunc,\r\n\r\n         twrDtoa: this.floatUtil.dtoa.bind(this.floatUtil),\r\n         twrToFixed: this.floatUtil.toFixed.bind(this.floatUtil),\r\n         twrToExponential: this.floatUtil.toExponential.bind(this.floatUtil),\r\n         twrAtod: this.floatUtil.atod.bind(this.floatUtil),\r\n         twrFcvtS: this.floatUtil.fcvtS.bind(this.floatUtil),\r\n      }\r\n   }\r\n\r\n   async loadWasm(pathToLoad:string) {\r\n      return super.loadWasm(pathToLoad, this.imports, this.ioNamesToID);\r\n   }\r\n\r\n   null(inval?:any) {\r\n      throw new Error(\"call to unimplemented twrXXX import in twrWasmModule.  Use twrWasmModuleAsync ?\");\r\n   }\r\n}\r\n\r\n\r\n\r\n\r\n","// This class extends base to handle options when called in the main Java Script thread\nimport { twrConsoleDiv } from \"./twrcondiv.js\";\nimport { twrWasmModuleBase } from \"./twrmodbase.js\";\nimport { twrConsoleCanvas } from \"./twrcanvas.js\";\nimport { twrConsoleTerminal } from \"./twrconterm.js\";\nimport { codePageUTF32 } from \"./twrlocale.js\";\nimport { twrConsoleDebug } from \"./twrcondebug.js\";\nexport class twrWasmModuleInJSMain extends twrWasmModuleBase {\n    io;\n    ioNamesToID;\n    constructor(opts = {}) {\n        super();\n        if (typeof document === 'undefined')\n            throw new Error(\"twrWasmModuleJSMain should only be created in JavaScript Main.\");\n        // io contains a mapping of names to IConsole\n        // stdio, stderr are required (but if they are not passed in, we will find defaults here)\n        // there can be an arbitrary number of IConsoles passed to a module for use by the module\n        if (opts.io) {\n            this.io = opts.io;\n        }\n        else {\n            this.io = {};\n        }\n        if (!this.io.stdio) {\n            const eiodiv = document.getElementById(\"twr_iodiv\");\n            const eiocanvas = document.getElementById(\"twr_iocanvas\");\n            if (opts.stdio) {\n                this.io.stdio = opts.stdio;\n            }\n            else if (eiodiv) {\n                this.io.stdio = new twrConsoleDiv(eiodiv, { foreColor: opts.forecolor, backColor: opts.backcolor, fontSize: opts.fontsize });\n            }\n            else if (eiocanvas) {\n                this.io.stdio = new twrConsoleTerminal(eiocanvas, {\n                    foreColor: opts.forecolor,\n                    backColor: opts.backcolor,\n                    fontSize: opts.fontsize,\n                    widthInChars: opts.windim?.[0],\n                    heightInChars: opts.windim?.[1],\n                });\n            }\n            else {\n                this.io.stdio = new twrConsoleDebug();\n                console.log(\"Stdio console is not specified.  Using twrConsoleDebug.\");\n            }\n        }\n        if (!this.io.stderr) {\n            this.io.stderr = new twrConsoleDebug();\n        }\n        if (!this.io.std2d) {\n            if (opts.d2dcanvas) {\n                this.io.std2d = opts.d2dcanvas;\n            }\n            else {\n                const ed2dcanvas = document.getElementById(\"twr_d2dcanvas\");\n                if (ed2dcanvas)\n                    this.io.std2d = new twrConsoleCanvas(ed2dcanvas);\n            }\n        }\n        // each module has a mapping of names to console.id\n        this.ioNamesToID = {};\n        Object.keys(this.io).forEach(key => {\n            this.ioNamesToID[key] = this.io[key].id;\n        });\n    }\n    divLog(...params) {\n        for (var i = 0; i < params.length; i++) {\n            this.io.stdio.putStr(params[i].toString());\n            this.io.stdio.charOut(32, codePageUTF32); // space\n        }\n        this.io.stdio.charOut(10, codePageUTF32);\n    }\n}\n//# sourceMappingURL=twrmodjsmain.js.map","// This class extends base to handle options when called in the main Java Script thread\r\n\r\nimport {twrConsoleDiv} from \"./twrcondiv.js\"\r\nimport {IModOpts, twrWasmModuleBase} from \"./twrmodbase.js\"\r\nimport {twrConsoleCanvas} from \"./twrcanvas.js\"\r\nimport {IConsole} from \"./twrcon.js\"\r\nimport {twrConsoleTerminal} from \"./twrconterm.js\"\r\nimport {codePageUTF32} from \"./twrlocale.js\"\r\nimport {twrConsoleDebug} from \"./twrcondebug.js\"\r\n\r\n\r\nexport abstract class twrWasmModuleInJSMain extends twrWasmModuleBase {\r\n   io:{[key:string]: IConsole};\r\n   ioNamesToID: {[key: string]: number};\r\n\r\n   constructor(opts:IModOpts={}) {\r\n      super();\r\n      if (typeof document === 'undefined')\r\n         throw new Error (\"twrWasmModuleJSMain should only be created in JavaScript Main.\");\r\n\r\n      // io contains a mapping of names to IConsole\r\n      // stdio, stderr are required (but if they are not passed in, we will find defaults here)\r\n      // there can be an arbitrary number of IConsoles passed to a module for use by the module\r\n      if (opts.io) {\r\n         this.io=opts.io;\r\n      }\r\n      else {\r\n         this.io={};\r\n      }\r\n      \r\n      if (!this.io.stdio) {\r\n         const eiodiv=document.getElementById(\"twr_iodiv\") as HTMLDivElement; \r\n         const eiocanvas=document.getElementById(\"twr_iocanvas\") as HTMLCanvasElement;\r\n         if (opts.stdio) {\r\n            this.io.stdio=opts.stdio;\r\n         } \r\n         else if (eiodiv) {\r\n            this.io.stdio=new twrConsoleDiv(eiodiv, {foreColor: opts.forecolor, backColor: opts.backcolor, fontSize: opts.fontsize}); \r\n         }\r\n         else if (eiocanvas) {\r\n            this.io.stdio=new twrConsoleTerminal(eiocanvas, {\r\n               foreColor: opts.forecolor, \r\n               backColor: opts.backcolor, \r\n               fontSize: opts.fontsize, \r\n               widthInChars: opts.windim?.[0],\r\n               heightInChars: opts.windim?.[1],\r\n            }); \r\n         }\r\n         else {\r\n            this.io.stdio=new twrConsoleDebug();\r\n            console.log(\"Stdio console is not specified.  Using twrConsoleDebug.\")\r\n         }\r\n      }\r\n\r\n      if (!this.io.stderr) {\r\n         this.io.stderr=new twrConsoleDebug();\r\n      }\r\n\r\n      if (!this.io.std2d) {\r\n         if (opts.d2dcanvas) {\r\n            this.io.std2d=opts.d2dcanvas;\r\n         }  \r\n         else {\r\n            const ed2dcanvas=document.getElementById(\"twr_d2dcanvas\") as HTMLCanvasElement;\r\n            if (ed2dcanvas) this.io.std2d=new twrConsoleCanvas(ed2dcanvas);\r\n         }\r\n      }\r\n\r\n      // each module has a mapping of names to console.id\r\n      this.ioNamesToID={};\r\n      Object.keys(this.io).forEach(key => {\r\n         this.ioNamesToID[key]=this.io[key].id;\r\n      });\r\n\r\n   }\r\n\r\n   divLog(...params: string[]) {\r\n      for (var i = 0; i < params.length; i++) {\r\n         this.io.stdio.putStr!(params[i].toString());\r\n         this.io.stdio.charOut!(32, codePageUTF32); // space\r\n      }\r\n      this.io.stdio.charOut!(10, codePageUTF32);\r\n     }\r\n}","import { twrSharedCircularBuffer } from \"./twrcircular.js\";\nimport { twrCodePageToUnicodeCodePoint, codePageUTF32 } from \"./twrlocale.js\";\nimport { IOTypes, keyDown } from \"./twrcon.js\";\nimport { twrConsoleRegistry } from \"./twrconreg.js\";\nexport class twrConsoleDiv {\n    element;\n    id;\n    keys;\n    CURSOR = String.fromCharCode(9611); // ▋ see https://daniel-hug.github.io/characters/#k_70\n    cursorOn = false;\n    lastChar = 0;\n    extraBR = false;\n    cpTranslate;\n    constructor(element, params) {\n        this.element = element;\n        if (params) {\n            if (params.backColor)\n                this.element.style.backgroundColor = params.backColor;\n            if (params.foreColor)\n                this.element.style.color = params.foreColor;\n            if (params.fontSize)\n                this.element.style.font = params.fontSize.toString() + \"px arial\";\n        }\n        this.cpTranslate = new twrCodePageToUnicodeCodePoint();\n        this.id = twrConsoleRegistry.registerConsole(this);\n    }\n    isHtmlEntityAtEnd(str) {\n        const entityPattern = /&[^;]+;$/;\n        return entityPattern.test(str);\n    }\n    removeHtmlEntityAtEnd(str) {\n        const entityPattern = /&[^;]+;$/;\n        return str.replace(entityPattern, '');\n    }\n    /*\n     * add utf-8 or windows-1252 character to div.  Supports the following control codes:\n     * any of CRLF, CR (/r), or LF(/n)  will cause a new line\n     * 0x8 backspace\n     * 0xE cursor on\n     * 0xF cursor off\n    */\n    charOut(ch, codePage) {\n        if (!this.element)\n            throw new Error(\"internal error\");\n        //console.log(\"div::charout: \", ch, codePage);\n        if (this.extraBR) {\n            this.extraBR = false;\n            if (this.cursorOn)\n                this.element.innerHTML = this.element.innerHTML.slice(0, -1);\n            this.element.innerHTML = this.element.innerHTML.slice(0, -4);\n            if (this.cursorOn)\n                this.element.innerHTML += this.CURSOR;\n        }\n        const chnum = this.cpTranslate.convert(ch, codePage);\n        if (chnum != 0) {\n            switch (chnum) {\n                case 10: // newline\n                case 13: // return\n                    if (ch == 10 && this.lastChar == 13)\n                        break; // detect CR LF and treat as single new line\n                    if (this.cursorOn)\n                        this.element.innerHTML = this.element.innerHTML.slice(0, -1);\n                    this.element.innerHTML += \"<br><br>\"; //2nd break is a place holder for next line (fixes scroll issue at bottom)\n                    this.extraBR = true;\n                    if (this.cursorOn)\n                        this.element.innerHTML += this.CURSOR;\n                    //element.scrollIntoView();\n                    //element.scrollTop = element.scrollHeight;\n                    let p = this.element.getBoundingClientRect();\n                    window.scrollTo(0, p.height + 100);\n                    break;\n                case 8: // backspace\n                    if (this.cursorOn)\n                        this.element.innerHTML = this.element.innerHTML.slice(0, -1);\n                    if (this.isHtmlEntityAtEnd(this.element.innerHTML))\n                        this.element.innerHTML = this.removeHtmlEntityAtEnd(this.element.innerHTML);\n                    else\n                        this.element.innerHTML = this.element.innerHTML.slice(0, -1);\n                    if (this.cursorOn)\n                        this.element.innerHTML += this.CURSOR;\n                    break;\n                case 0xE: // cursor on\n                    if (!this.cursorOn) {\n                        this.cursorOn = true;\n                        this.element.innerHTML += this.CURSOR;\n                        this.element.focus();\n                    }\n                    break;\n                case 0xF: // cursor off\n                    if (this.cursorOn) {\n                        this.cursorOn = false;\n                        this.element.innerHTML = this.element.innerHTML.slice(0, -1);\n                    }\n                    break;\n                default:\n                    if (this.cursorOn)\n                        this.element.innerHTML = this.element.innerHTML.slice(0, -1);\n                    let newchr = String.fromCodePoint(chnum);\n                    // in html, multiple spaces will be collapsed into one space.  This prevents that behavior.\n                    if (newchr == ' ')\n                        newchr = \"&nbsp;\";\n                    this.element.innerHTML += newchr;\n                    if (this.cursorOn)\n                        this.element.innerHTML += this.CURSOR;\n                    break;\n            }\n            this.lastChar = chnum;\n        }\n    }\n    getProp(propName) {\n        if (propName === \"type\")\n            return IOTypes.CHARWRITE | IOTypes.CHARREAD;\n        console.log(\"twrConsoleDiv.getProp passed unknown property name: \", propName);\n        return 0;\n    }\n    getProxyParams() {\n        this.keys = new twrSharedCircularBuffer(); // tsconfig, lib must be set to 2017 or higher\n        return [\"twrConsoleDivProxy\", this.id, this.keys.sharedArray];\n    }\n    keyDown(ev) {\n        keyDown(this, ev);\n    }\n    processMessage(msgType, data) {\n        const [id, ...params] = data;\n        if (id != this.id)\n            throw new Error(\"internal error\"); // should never happen\n        switch (msgType) {\n            case \"div-charout\":\n                {\n                    const [ch, codePage] = params;\n                    this.charOut(ch, codePage);\n                }\n                break;\n            case \"div-putstr\":\n                {\n                    const [str] = params;\n                    this.putStr(str);\n                }\n                break;\n            case \"div-focus\":\n                {\n                    this.element.focus();\n                }\n                break;\n            default:\n                return false;\n        }\n        return true;\n    }\n    putStr(str) {\n        for (let i = 0; i < str.length; i++)\n            this.charOut(str.codePointAt(i) || 0, codePageUTF32);\n    }\n}\nexport class twrConsoleDivProxy {\n    keys;\n    id;\n    constructor(params) {\n        const [className, id, keysBuffer] = params;\n        this.keys = new twrSharedCircularBuffer(keysBuffer);\n        this.id = id;\n    }\n    charIn() {\n        return this.keys.readWait(); // wait for a key, then read it\n    }\n    inkey() {\n        if (this.keys.isEmpty())\n            return 0;\n        else\n            return this.charIn();\n    }\n    charOut(ch, codePoint) {\n        postMessage([\"div-charout\", [this.id, ch, codePoint]]);\n    }\n    putStr(str) {\n        postMessage([\"div-putstr\", [this.id, str]]);\n    }\n    getProp(propName) {\n        if (propName === \"type\")\n            return IOTypes.CHARWRITE | IOTypes.CHARREAD;\n        console.log(\"twrConsoleDivProxy.getProp passed unknown property name: \", propName);\n        return 0;\n    }\n    setFocus() {\n        postMessage([\"div-focus\", [this.id]]);\n    }\n}\n//# sourceMappingURL=twrcondiv.js.map","import {twrSharedCircularBuffer} from \"./twrcircular.js\";\r\nimport {twrCodePageToUnicodeCodePoint, codePageUTF32} from \"./twrlocale.js\"\r\nimport {IConsoleDiv, IConsoleDivProxy, IConsoleDivParams, TConsoleDivProxyParams, IOTypes, keyDown} from \"./twrcon.js\"\r\nimport {twrConsoleRegistry} from \"./twrconreg.js\"\r\n\r\nexport class twrConsoleDiv implements IConsoleDiv {\r\n   element:HTMLDivElement;\r\n   id:number;\r\n   keys?:twrSharedCircularBuffer;\r\n   CURSOR=String.fromCharCode(9611);  // ▋ see https://daniel-hug.github.io/characters/#k_70\r\n   cursorOn:boolean=false;\r\n   lastChar:number=0;\r\n   extraBR:boolean=false;\r\n   cpTranslate:twrCodePageToUnicodeCodePoint;\r\n\r\n\r\n   constructor(element:HTMLDivElement,  params:IConsoleDivParams) {\r\n      this.element=element;\r\n\r\n      if (params) {\r\n         if (params.backColor) this.element.style.backgroundColor = params.backColor;\r\n         if (params.foreColor) this.element.style.color = params.foreColor;\r\n         if (params.fontSize) this.element.style.font=params.fontSize.toString()+\"px arial\";\r\n      }\r\n\r\n      this.cpTranslate=new twrCodePageToUnicodeCodePoint();\r\n      this.id=twrConsoleRegistry.registerConsole(this);\r\n   }\r\n\r\n   private isHtmlEntityAtEnd(str:string) {\r\n      const entityPattern = /&[^;]+;$/;\r\n      return entityPattern.test(str);\r\n   }\r\n\r\n  private removeHtmlEntityAtEnd(str:string) {\r\n   const entityPattern = /&[^;]+;$/;\r\n       return str.replace(entityPattern, '');\r\n   }\r\n\r\n/* \r\n * add utf-8 or windows-1252 character to div.  Supports the following control codes:\r\n * any of CRLF, CR (/r), or LF(/n)  will cause a new line\r\n * 0x8 backspace\r\n * 0xE cursor on \r\n * 0xF cursor off \r\n*/\r\n   charOut(ch:number, codePage:number) {\r\n\r\n      if (!this.element) throw new Error(\"internal error\");\r\n\r\n      //console.log(\"div::charout: \", ch, codePage);\r\n\r\n      if (this.extraBR) {\r\n         this.extraBR=false;\r\n         if (this.cursorOn) this.element.innerHTML=this.element.innerHTML.slice(0, -1);\r\n         this.element.innerHTML=this.element.innerHTML.slice(0, -4);\r\n         if (this.cursorOn) this.element.innerHTML +=  this.CURSOR;\r\n      }\r\n\r\n      const chnum=this.cpTranslate.convert(ch, codePage);\r\n      if (chnum!=0) {\r\n         switch (chnum) {\r\n            case 10:  // newline\r\n            case 13:  // return\r\n               if (ch==10 && this.lastChar==13) break;  // detect CR LF and treat as single new line\r\n               if (this.cursorOn) this.element.innerHTML=this.element.innerHTML.slice(0, -1);\r\n               this.element.innerHTML +=  \"<br><br>\";   //2nd break is a place holder for next line (fixes scroll issue at bottom)\r\n               this.extraBR=true;\r\n               if (this.cursorOn) this.element.innerHTML +=  this.CURSOR;\r\n               //element.scrollIntoView();\r\n               //element.scrollTop = element.scrollHeight;\r\n               let p = this.element.getBoundingClientRect();\r\n               window.scrollTo(0, p.height+100);\r\n               break;\r\n\r\n            case 8:  // backspace\r\n               if (this.cursorOn) this.element.innerHTML=this.element.innerHTML.slice(0, -1);\r\n               if (this.isHtmlEntityAtEnd(this.element.innerHTML)) \r\n                  this.element.innerHTML=this.removeHtmlEntityAtEnd(this.element.innerHTML);\r\n               else\r\n                  this.element.innerHTML=this.element.innerHTML.slice(0, -1);\r\n               if (this.cursorOn) this.element.innerHTML +=  this.CURSOR;\r\n               break;\r\n\r\n            case 0xE:   // cursor on\r\n               if (!this.cursorOn) {\r\n                  this.cursorOn=true;\r\n                  this.element.innerHTML +=  this.CURSOR;\r\n                  this.element.focus();\r\n               }\r\n               break;\r\n\r\n            case 0xF:   // cursor off\r\n               if (this.cursorOn) {\r\n                  this.cursorOn=false;\r\n                  this.element.innerHTML=this.element.innerHTML.slice(0, -1);\r\n               }\r\n               break;\r\n            default:\r\n               if (this.cursorOn) this.element.innerHTML=this.element.innerHTML.slice(0, -1);\r\n               let newchr=String.fromCodePoint(chnum);\r\n               // in html, multiple spaces will be collapsed into one space.  This prevents that behavior.\r\n               if (newchr==' ') newchr=\"&nbsp;\";\r\n               this.element.innerHTML += newchr;\r\n               if (this.cursorOn) this.element.innerHTML +=  this.CURSOR;\r\n               break;\r\n            }\r\n\r\n         this.lastChar=chnum;\r\n      }\r\n   }\r\n\r\n   getProp(propName: string):number {\r\n      if (propName===\"type\") return IOTypes.CHARWRITE|IOTypes.CHARREAD;\r\n      console.log(\"twrConsoleDiv.getProp passed unknown property name: \", propName)\r\n      return 0;\r\n   }\r\n\r\n   getProxyParams() : TConsoleDivProxyParams {\r\n      this.keys = new twrSharedCircularBuffer();  // tsconfig, lib must be set to 2017 or higher\r\n      return [\"twrConsoleDivProxy\", this.id, this.keys.sharedArray];\r\n   }\r\n\r\n   keyDown(ev:KeyboardEvent)  {\r\n      keyDown(this, ev);\r\n   }\r\n   \r\n\r\n   processMessage(msgType:string, data:[number, ...any[]]):boolean {\r\n      const [id, ...params] = data;\r\n      if (id!=this.id) throw new Error(\"internal error\");  // should never happen\r\n\r\n      switch (msgType) {\r\n         case \"div-charout\":\r\n         {\r\n            const [ch, codePage] =  params;\r\n            this.charOut(ch, codePage);\r\n         }\r\n            break;\r\n\r\n         case \"div-putstr\":\r\n         {\r\n            const [str] =  params;\r\n            this.putStr(str);\r\n         }\r\n            break;\r\n\r\n         case \"div-focus\":\r\n         {\r\n            this.element.focus();\r\n         }\r\n            break;\r\n\r\n         default:\r\n            return false;\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   putStr(str:string) {\r\n      for (let i=0; i < str.length; i++)\r\n         this.charOut(str.codePointAt(i)||0, codePageUTF32);\r\n   }\r\n}\r\n\r\n\r\nexport class twrConsoleDivProxy implements IConsoleDivProxy {\r\n    keys: twrSharedCircularBuffer;\r\n    id:number;\r\n\r\n    constructor(params:TConsoleDivProxyParams) {\r\n        const [className, id, keysBuffer] = params;\r\n        this.keys = new twrSharedCircularBuffer(keysBuffer);\r\n        this.id = id;\r\n    }\r\n\r\n    charIn() {  \r\n        return this.keys.readWait();  // wait for a key, then read it\r\n    }\r\n    \r\n    inkey() {\r\n        if (this.keys.isEmpty())\r\n            return 0;\r\n        else\r\n            return this.charIn();    \r\n    }\r\n\r\n   charOut(ch:number, codePoint:number) {\r\n      postMessage([\"div-charout\", [this.id, ch, codePoint]]);\r\n   }\r\n\r\n   putStr(str:string):void\r\n   {\r\n      postMessage([\"div-putstr\", [this.id, str]]);\r\n   }\r\n\r\n   getProp(propName: string) {\r\n      if (propName===\"type\") return IOTypes.CHARWRITE|IOTypes.CHARREAD;\r\n      console.log(\"twrConsoleDivProxy.getProp passed unknown property name: \", propName)\r\n      return 0;\r\n   }\r\n\r\n   setFocus() {\r\n      postMessage([\"div-focus\", [this.id]]);\r\n   }\r\n}\r\n\r\n","//\n// This class implements a circular buffer that the main javascript thread can write to, \n// and a blocking WebWorker thread can read from.  This allows keyboard characters to be transferred from the main JS thread to a WebWorker thread.\n// The WebWorker can use the readWait() function to sleep, w/o participating in the normal \n// async callback dispatch method.  This allows a C program that is a single blocking loop to receive input from the primary javascript thread.\n// readWait() is used used when io_getc32() or io_mbgetstr() is called from a C function.\n//\nconst RDIDX = 256;\nconst WRIDX = 257;\nconst LEN = 256;\n// A single thread can read and a separate single thread can write.  With these constraints Atomic operations are not needed.\n// the first 256 array entries are the circular buffer\n// the next two are used for the read and write index\n//!!!! I am using --enable-features=SharedArrayBuffer; see the SharedArrayBuffer docs for COR issues when going to a live web server\nexport class twrSharedCircularBuffer {\n    sharedArray;\n    buf;\n    constructor(sa) {\n        if (typeof window !== 'undefined') { // this check only works if window defined (not a worker thread)\n            if (!crossOriginIsolated && !(window.location.protocol === 'file:'))\n                throw new Error(\"twrSharedCircularBuffer constructor, crossOriginIsolated=\" + crossOriginIsolated + \". See SharedArrayBuffer docs.\");\n        }\n        if (sa)\n            this.sharedArray = sa;\n        else\n            this.sharedArray = new SharedArrayBuffer(258 * 4);\n        this.buf = new Int32Array(this.sharedArray);\n        this.buf[RDIDX] = 0;\n        this.buf[WRIDX] = 0;\n    }\n    write(n) {\n        let i = this.buf[WRIDX];\n        this.buf[i] = n;\n        i++;\n        if (i == LEN)\n            i = 0;\n        this.buf[WRIDX] = i;\n        Atomics.notify(this.buf, WRIDX);\n    }\n    read() {\n        if (!this.isEmpty()) {\n            let i = this.buf[RDIDX];\n            let n = this.buf[i];\n            i++;\n            this.buf[RDIDX] = i;\n            return n;\n        }\n        else\n            return -1;\n    }\n    readWait() {\n        if (this.isEmpty()) {\n            const rdptr = this.buf[RDIDX];\n            // verifies that a shared memory location still contains a given value and if so sleeps until notified.\n            Atomics.wait(this.buf, WRIDX, rdptr);\n        }\n        return this.read();\n    }\n    isEmpty() {\n        return this.buf[RDIDX] == this.buf[WRIDX];\n    }\n}\n//# sourceMappingURL=twrcircular.js.map","//\r\n// This class implements a circular buffer that the main javascript thread can write to, \r\n// and a blocking WebWorker thread can read from.  This allows keyboard characters to be transferred from the main JS thread to a WebWorker thread.\r\n// The WebWorker can use the readWait() function to sleep, w/o participating in the normal \r\n// async callback dispatch method.  This allows a C program that is a single blocking loop to receive input from the primary javascript thread.\r\n// readWait() is used used when io_getc32() or io_mbgetstr() is called from a C function.\r\n//\r\n\r\nconst RDIDX=256;\r\nconst WRIDX=257;\r\nconst LEN=256;\r\n\r\n// A single thread can read and a separate single thread can write.  With these constraints Atomic operations are not needed.\r\n// the first 256 array entries are the circular buffer\r\n// the next two are used for the read and write index\r\n\r\n//!!!! I am using --enable-features=SharedArrayBuffer; see the SharedArrayBuffer docs for COR issues when going to a live web server\r\n\r\nexport class twrSharedCircularBuffer {\r\n\tsharedArray:SharedArrayBuffer;\r\n\tbuf:Int32Array;\r\n \r\n\tconstructor (sa?:SharedArrayBuffer) {\r\n        if (typeof window !== 'undefined') {  // this check only works if window defined (not a worker thread)\r\n            if (!crossOriginIsolated && !(window.location.protocol === 'file:')) throw new Error(\"twrSharedCircularBuffer constructor, crossOriginIsolated=\"+crossOriginIsolated+\". See SharedArrayBuffer docs.\");\r\n        }\r\n        if (sa) this.sharedArray=sa;\r\n        else this.sharedArray=new SharedArrayBuffer(258*4);\r\n\t\tthis.buf=new Int32Array(this.sharedArray);\r\n        this.buf[RDIDX]=0;\r\n        this.buf[WRIDX]=0;\r\n\t}\r\n\r\n\twrite(n:number) {\r\n        let i=this.buf[WRIDX];\r\n        this.buf[i]=n;\r\n        i++;\r\n        if (i==LEN) i=0;\r\n        this.buf[WRIDX]=i;  \r\n        Atomics.notify(this.buf, WRIDX);   \r\n\t}\r\n\r\n\tread():number {\r\n        if (!this.isEmpty()) {\r\n            let i=this.buf[RDIDX];\r\n            let n=this.buf[i];\r\n            i++;\r\n            this.buf[RDIDX]=i;\r\n            return n;\r\n        }\r\n\t\telse\r\n            return -1;\r\n\t}\r\n\r\n    readWait():number {\r\n        if (this.isEmpty()) {\r\n            const rdptr=this.buf[RDIDX];\r\n            // verifies that a shared memory location still contains a given value and if so sleeps until notified.\r\n            Atomics.wait(this.buf, WRIDX, rdptr);\r\n        }\r\n        return this.read();\r\n\t}\r\n\r\n    isEmpty():boolean {\r\n        return this.buf[RDIDX]==this.buf[WRIDX];\r\n    }\r\n}\r\n","// these match C #defines in locale.h\nexport const codePageASCII = 0;\nexport const codePage1252 = 1252;\nexport const codePageUTF8 = 65001;\nexport const codePageUTF32 = 12000;\nexport class twrCodePageToUnicodeCodePoint {\n    decoderUTF8 = new TextDecoder('utf-8');\n    decoder1252 = new TextDecoder('windows-1252');\n    convert(c, codePage) {\n        let outstr;\n        if (codePage == codePageUTF8) {\n            outstr = this.decoderUTF8.decode(new Uint8Array([c]), { stream: true });\n        }\n        else if (codePage == codePage1252) {\n            outstr = this.decoder1252.decode(new Uint8Array([c]));\n        }\n        else if (codePage == codePageASCII) {\n            if (c > 127)\n                outstr = \"\";\n            else\n                outstr = String.fromCharCode(c);\n        }\n        else if (codePage == codePageUTF32) {\n            outstr = String.fromCodePoint(c);\n        }\n        else {\n            throw new Error(\"unsupported CodePage: \" + codePage);\n        }\n        return outstr.codePointAt(0) || 0;\n    }\n}\nconst cpTranslate = new twrCodePageToUnicodeCodePoint();\nexport function twrUnicodeCodePointToCodePageImpl(outstr, cp, codePage) {\n    return noasyncCopyString(this, outstr, String.fromCodePoint(cp), codePage);\n}\nexport function twrUserLanguageImpl() {\n    return noasyncPutString(this, navigator.language, codePageASCII);\n}\n// checks if the character c, when converted to a string, is matched by the passed in regexp string \n// utf-8 version not needed since this function is used for a single byte ('char'), \n// and non-ascii range utf-8 single byte are not valid\nexport function twrRegExpTest1252Impl(regexpStrIdx, c) {\n    const regexpStr = this.getString(regexpStrIdx);\n    const regexp = new RegExp(regexpStr, 'u');\n    const cstr = cpTranslate.decoder1252.decode(new Uint8Array([c]));\n    const r = regexp.test(cstr);\n    if (r)\n        return 1;\n    else\n        return 0;\n}\nexport function to1252(instr) {\n    if (instr.codePointAt(0) == 8239)\n        return 32; // turn narrow-no-break-space into space\n    // this first switch statment fixes what appears to be a bug in safari 15.6.1 (17613.3.9.1.16) (comparisons to the character string fail)\n    let cp = instr.codePointAt(0) || 0;\n    switch (cp) {\n        case 338: return 0x8C;\n        case 339: return 0x9C;\n        case 352: return 0x8A;\n        case 353: return 0x9A;\n        case 376: return 0x9F;\n        case 381: return 0x8E;\n        case 382: return 0x9E;\n        case 402: return 0x83;\n        case 710: return 0x88;\n    }\n    switch (instr.normalize()) {\n        case '€': return 0x80;\n        case '‚': return 0x82;\n        case 'ƒ': return 0x83;\n        case '„': return 0x84;\n        case '…': return 0x85;\n        case '†': return 0x86;\n        case '‡': return 0x87;\n        case 'ˆ': return 0x88;\n        case '‰': return 0x89;\n        case 'Š': return 0x8A;\n        case '‹': return 0x8B;\n        case 'Œ': return 0x8C;\n        case 'Ž': return 0x8E;\n        case '‘': return 0x91;\n        case '’': return 0x92;\n        case '“': return 0x93;\n        case '”': return 0x94;\n        case '•': return 0x95;\n        case '–': return 0x96;\n        case '—': return 0x97;\n        case '˜': return 0x98;\n        case '™': return 0x99;\n        case 'š': return 0x9A;\n        case '›': return 0x9B;\n        case 'œ': return 0x9C;\n        case 'ž': return 0x9E;\n        case 'Ÿ': return 0x9F;\n    }\n    if (cp > 255) {\n        console.log(\"twr-wasm.to1252(): unable to convert: \", instr, cp);\n        cp = 0;\n    }\n    return cp;\n}\nexport function toASCII(instr) {\n    if (instr == 'ƒ')\n        return 102; // lowercase 'f'\n    if (instr.codePointAt(0) == 8239)\n        return 32; // turn narrow-no-break-space into space\n    let cp = instr.codePointAt(0) || 0;\n    if (cp > 127)\n        return 63; // ASCII for \"?\"\n    return cp;\n}\n// utf-8 version not needed since this function is used for a single byte ('char'), \n// and non-ascii range utf-8 single byte are not valid\nexport function twrToLower1252Impl(c) {\n    const cstr = cpTranslate.decoder1252.decode(new Uint8Array([c]));\n    const regexp = new RegExp(\"^\\\\p{Letter}$\", 'u');\n    if (regexp.test(cstr)) {\n        const r = to1252(cstr.toLocaleLowerCase());\n        //console.log(\"twrToLower1252Impl: isLetter\", c, cstr, cstr.codePointAt(0), cstr.toLocaleLowerCase(), cstr.toLocaleLowerCase().codePointAt(0), r);\n        return r;\n    }\n    else {\n        //console.log(\"twrToLower1252Impl: isNOTLetter\", c, cstr, cstr.codePointAt(0));\n        return c;\n    }\n}\n//utf-8 version not needed since this function is used for a single byte ('char'), \n// and non-ascii range utf-8 single byte are not valid\nexport function twrToUpper1252Impl(c) {\n    const cstr = cpTranslate.decoder1252.decode(new Uint8Array([c]));\n    if (cstr.codePointAt(0) == 402)\n        return c; // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is ƒ\n    if (cstr.codePointAt(0) == 181)\n        return c; // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is µ\n    if (cstr.codePointAt(0) == 223)\n        return c; // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is ß'\n    if (cstr == \"µ\")\n        return c; // upper case version doesn't fit in 1252\n    if (cstr == 'ƒ')\n        return c; // upper case version doesn't fit in 1252\n    if (cstr == 'ß')\n        return c; // toLocaleUpperCase() will convert beta to SS\n    const regexp = new RegExp(\"^\\\\p{Letter}$\", 'u');\n    if (regexp.test(cstr)) {\n        return to1252(cstr.toLocaleUpperCase());\n    }\n    else {\n        return c;\n    }\n}\nexport function twrStrcollImpl(lhs, rhs, codePage) {\n    const lhStr = this.getString(lhs, undefined, codePage);\n    const rhStr = this.getString(rhs, undefined, codePage);\n    // c strcmp(): A positive integer if str1 is greater than str2.\n    // 1 if string 1 (lh) comes after string 2 (rh)\n    const collator = new Intl.Collator();\n    const r = collator.compare(lhStr, rhStr);\n    return r;\n}\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n//struct tm {\n//\tint\ttm_sec;\t\t/* seconds after the minute [0-60] */\n//\tint\ttm_min;\t\t/* minutes after the hour [0-59] */\n//\tint\ttm_hour;\t\t/* hours since midnight [0-23] */\n//\tint\ttm_mday;\t\t/* day of the month [1-31] */\n//\tint\ttm_mon;\t\t/* months since January [0-11] */\n//\tint\ttm_year;\t\t/* years since 1900 */\n//\tint\ttm_wday;\t\t/* days since Sunday [0-6] */\n//\tint\ttm_yday;\t\t/* days since January 1 [0-365] */\n//\tint\ttm_isdst;\t/* Daylight Saving Time flag */\n//\tlong\ttm_gmtoff;\t/* offset from UTC in seconds */\n//\tchar\t*tm_zone;\t/* timezone abbreviation */\n//};\n// fill in struct tm\n// epcohSecs as 32bit int will overflow January 19, 2038. \nexport function twrTimeTmLocalImpl(tmIdx, epochSecs) {\n    const d = new Date(epochSecs * 1000);\n    this.setLong(tmIdx, d.getSeconds());\n    this.setLong(tmIdx + 4, d.getMinutes());\n    this.setLong(tmIdx + 8, d.getHours());\n    this.setLong(tmIdx + 12, d.getDate());\n    this.setLong(tmIdx + 16, d.getMonth());\n    this.setLong(tmIdx + 20, d.getFullYear() - 1900);\n    this.setLong(tmIdx + 24, d.getDay());\n    this.setLong(tmIdx + 28, getDayOfYear(d));\n    this.setLong(tmIdx + 32, isDst());\n    this.setLong(tmIdx + 36, -d.getTimezoneOffset() * 60);\n    this.setLong(tmIdx + 40, noasyncPutString(this, getTZ(d), codePageASCII));\n}\nfunction getDayOfYear(date) {\n    const start = new Date(date.getFullYear(), 0, 1);\n    const diff = date.getTime() - start.getTime(); // Difference in milliseconds\n    const oneDay = 1000 * 60 * 60 * 24; // Number of milliseconds in one day\n    const day = Math.floor(diff / oneDay);\n    return day;\n}\nfunction isDst() {\n    const timeString = new Date().toLocaleTimeString('en-US', { timeZoneName: 'long' });\n    if (timeString.includes('Daylight')) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\nfunction getTZ(date) {\n    const timeZone = date.toLocaleTimeString('en-US', { timeZoneName: 'short' }).split(' ').pop();\n    return timeZone ? timeZone : \"UTC\";\n}\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\nfunction setAndPutString(mod, idx, sin, codePage) {\n    const stridx = noasyncPutString(mod, sin, codePage);\n    mod.setLong(idx, stridx);\n}\n// JS string into the webassembly module memory.  \n// Does not verify outbuf length. \n// Encode the Wasm string using codePage\n// Does NOT zero terminate string\nfunction noasyncCopyString(mod, outbuf, sin, codePage) {\n    const ru8 = mod.stringToU8(sin, codePage);\n    mod.mem8.set(ru8, outbuf);\n    return ru8.length;\n}\n// allocate and copy a JS string into the webassembly module memory, encode the Wasm string using codePage\nfunction noasyncPutString(mod, sin, codePage) {\n    const ru8 = mod.stringToU8(sin, codePage);\n    const malloc = mod.exports.malloc;\n    const strIndex = malloc(ru8.length + 1);\n    mod.mem8.set(ru8, strIndex);\n    mod.mem8[strIndex + ru8.length] = 0;\n    return strIndex;\n}\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n//struct lconv {\n//\tchar\t*decimal_point;   \t\t0\n//\tchar\t*thousands_sep;\t\t\t4\n//\tchar\t*grouping;\t\t\t\t\t8\n//\tchar\t*int_curr_symbol;\t\t\t12\n//\tchar\t*currency_symbol;\t\t\t16\n//\tchar\t*mon_decimal_point;\t\t20\n//\tchar\t*mon_thousands_sep;\t\t24\n//\tchar\t*mon_grouping;\t\t\t\t28\n//\tchar\t*positive_sign;\t\t\t32\n//\tchar\t*negative_sign;\t\t\t36\n//\tchar\tint_frac_digits;\t\t\t40\n//\tchar\tfrac_digits;\t\t\t\t44\n//\tchar\tp_cs_precedes;\t\t\t\t48\n//\tchar\tp_sep_by_space;\t\t\t52\n//\tchar\tn_cs_precedes;\t\t\t\t56\n//\tchar\tn_sep_by_space;\t\t\t60\n//\tchar\tp_sign_posn;\t\t\t\t64\n//\tchar\tn_sign_posn;\t\t\t\t68\n//};\nexport function twrUserLconvImpl(lconvIdx, codePage) {\n    const locDec = getLocaleDecimalPoint();\n    const locSep = getLocaleThousandsSeparator();\n    setAndPutString(this, lconvIdx + 0, locDec, codePage);\n    setAndPutString(this, lconvIdx + 4, locSep, codePage);\n    setAndPutString(this, lconvIdx + 20, locDec, codePage);\n    setAndPutString(this, lconvIdx + 24, locSep, codePage);\n    setAndPutString(this, lconvIdx + 24, locSep, codePage);\n    setAndPutString(this, lconvIdx + 24, locSep, codePage);\n    setAndPutString(this, lconvIdx + 32, \"+\", codePage);\n    setAndPutString(this, lconvIdx + 36, \"-\", codePage);\n    setAndPutString(this, lconvIdx + 12, getLocalCurrencySymbol(), codePage);\n    setAndPutString(this, lconvIdx + 16, getLocalCurrencySymbol(), codePage);\n}\nfunction getLocaleDecimalPoint() {\n    const formatter = new Intl.NumberFormat();\n    //console.log(\"dec resolvedOptions\", formatter.resolvedOptions());\n    // Format a test number to find out the decimal point.\n    const formattedNumber = formatter.format(1.1);\n    //console.log(\"dec formattedNumber\", formattedNumber);\n    // Find the character between the numeric parts.\n    const decimalPoint = formattedNumber.replace(/[0-9]/g, '').charAt(0);\n    return decimalPoint;\n}\nfunction getLocaleThousandsSeparator() {\n    const formatter = new Intl.NumberFormat(undefined, {\n        minimumFractionDigits: 0 // Ensure no decimal part interferes\n    });\n    // Format a test number to include a thousands separator.\n    const formattedNumber = formatter.format(1000);\n    //console.log(\"sep formattedNumber\", formattedNumber);\n    // Extract the thousands separator by removing numeric characters and possible decimal points.\n    // This may need adjustment depending on whether other characters are present.\n    let thousandsSeparator = formattedNumber.replace(/[0-9]/g, '').charAt(0); // Assumes separator is the first character.\n    //console.log(\"sep code\",  thousandsSeparator.codePointAt(0));\n    return thousandsSeparator;\n}\n// this doesn't work, localeCurrency is not correct\nfunction getLocaleCurrencyDecimalPoint() {\n    // Create an initial NumberFormat object to detect the locale's currency\n    const tempFormatter = new Intl.NumberFormat(undefined, { style: 'currency', currency: 'USD' });\n    const localeCurrency = tempFormatter.resolvedOptions().currency;\n    const formatter = new Intl.NumberFormat(undefined, {\n        style: 'currency',\n        currency: localeCurrency\n    });\n    // Format a test number to find out the decimal point.\n    const formattedNumber = formatter.format(1.1);\n    // Find the character between the numeric parts.\n    // char(0) is the currency symbol\n    const decimalPoint = formattedNumber.replace(/[0-9]/g, '').charAt(1);\n    return decimalPoint;\n}\nfunction getLocalCurrencySymbol() {\n    switch (navigator.language) {\n        case \"en-US\":\n        case \"en-CA\":\n        case \"fr-CA\":\n        case \"en-AU\":\n        case \"es-MX\":\n        case \"es-AR\":\n        case \"es-CL\":\n        case \"es-CO\":\n        case \"es-EC\":\n        case \"en-GY\":\n        case \"nl-SR\":\n        case \"es-UY\":\n        case \"en-BZ\":\n        case \"es-SV\":\n        case \"es-PA\":\n            return \"$\";\n        case \"es-BO\":\n        case \"es-VE\":\n            return \"Bs.\";\n        case \"es-PY\":\n            return \"₲\";\n        case \"es-PE\":\n            return \"S/\";\n        case \"es-CR\":\n            return \"₡\";\n        case \"es-GT\":\n            return \"Q\";\n        case \"es-HN\":\n            return \"L\";\n        case \"es-NI\":\n            return \"C$\";\n        case \"en-GB\":\n            return \"£\";\n        case \"en-IE\":\n        case \"de-DE\":\n        case \"fr-FR\":\n        case \"de-AT\":\n        case \"nl-BE\":\n        case \"fr-BE\":\n        case \"el-CY\":\n        case \"et-EE\":\n        case \"fi-FI\":\n        case \"sv-FI\":\n        case \"el-GR\":\n        case \"it-IT\":\n        case \"lv-LV\":\n        case \"lt-LT\":\n        case \"fr-LU\":\n        case \"de-LU\":\n        case \"lb-LU\":\n        case \"mt-MT\":\n        case \"nl-NL\":\n        case \"pt-PT\":\n        case \"sk-SK\":\n        case \"sl-SI\":\n        case \"es-ES\":\n            return \"€\";\n        case \"ja-JP\":\n            return \"¥\";\n        case \"zh-CN\":\n            return \"¥\";\n        case \"de-CH\":\n        case \"fr-CH\":\n        case \"it-CH\":\n            return \"CHF\";\n        case \"sv-SE\":\n        case \"da-DK\":\n        case \"nb-NO\":\n            return \"kr\";\n        case \"ru-RU\":\n            return \"₽\";\n        case \"ko-KR\":\n            return \"₩\";\n        case \"en-IN\":\n            return \"₹\";\n        case \"pt-BR\":\n            return \"R$\";\n        case \"he-IL\":\n            return \"₪\";\n        case \"tr-TR\":\n            return \"₺\";\n        default:\n            return \"\";\n    }\n}\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/*\nstruct locale_dtnames {\n    const char* day[7];\n    const char* abday[7];\n    const char* month[12];\n    const char* abmonth[12];\n    const char* ampm[2];\n};\n*/\nexport function twrGetDtnamesImpl(codePage) {\n    const malloc = this.exports.malloc;\n    const dtnamesStructIdx = malloc(40 * 4);\n    for (let i = 0; i < 7; i++)\n        setAndPutString(this, dtnamesStructIdx + i * 4, getLocalizedDayName(i, 'long'), codePage);\n    for (let i = 0; i < 7; i++)\n        setAndPutString(this, dtnamesStructIdx + (i + 7) * 4, getLocalizedDayName(i, 'short'), codePage);\n    for (let i = 0; i < 12; i++)\n        setAndPutString(this, dtnamesStructIdx + (i + 14) * 4, getLocalizedMonthNames(i, 'long'), codePage);\n    for (let i = 0; i < 12; i++)\n        setAndPutString(this, dtnamesStructIdx + (i + 14 + 12) * 4, getLocalizedMonthNames(i, 'short'), codePage);\n    setAndPutString(this, dtnamesStructIdx + (0 + 14 + 24) * 4, getLocalizedAM(), codePage);\n    setAndPutString(this, dtnamesStructIdx + (1 + 14 + 24) * 4, getLocalizedPM(), codePage);\n    return dtnamesStructIdx;\n}\nfunction getLocalizedDayName(n, weekdayType) {\n    // Create a Date object for the desired day of the week\n    const date = new Date();\n    date.setDate(date.getDate() - date.getDay() + n);\n    // Create an Intl.DateTimeFormat object with the desired locale and options\n    const formatter = new Intl.DateTimeFormat(undefined, { weekday: weekdayType });\n    // Format the date to get the full day name\n    return formatter.format(date);\n}\nfunction getLocalizedMonthNames(n, monthType) {\n    const formatter = new Intl.DateTimeFormat(undefined, { month: monthType });\n    const date = new Date(2000, n, 1);\n    return formatter.format(date);\n}\nfunction getLocalizedAM() {\n    // Create a Date object for a time in the morning\n    const morningDate = new Date(2000, 0, 1, 9, 0, 0);\n    // Create an Intl.DateTimeFormat object with the desired locale and options\n    const formatter = new Intl.DateTimeFormat(undefined, {\n        hour: 'numeric',\n        hour12: true\n    });\n    // Format the date and get the parts\n    const formattedParts = formatter.formatToParts(morningDate);\n    // Find the part of the formatted string that corresponds to the day period (AM/PM)\n    const dayPeriodPart = formattedParts.find(part => part.type === 'dayPeriod');\n    return dayPeriodPart ? dayPeriodPart.value : '';\n}\nfunction getLocalizedPM() {\n    // Create a Date object for a time in the afternoon\n    const afternoonDate = new Date(2000, 0, 1, 15, 0, 0);\n    // Create an Intl.DateTimeFormat object with the desired locale and options\n    const formatter = new Intl.DateTimeFormat(undefined, {\n        hour: 'numeric',\n        hour12: true\n    });\n    // Format the date and get the parts\n    const formattedParts = formatter.formatToParts(afternoonDate);\n    // Find the part of the formatted string that corresponds to the day period (AM/PM)\n    const dayPeriodPart = formattedParts.find(part => part.type === 'dayPeriod');\n    return dayPeriodPart ? dayPeriodPart.value : '';\n}\n//# sourceMappingURL=twrlocale.js.map","import {twrWasmModuleBase} from \"./twrmodbase.js\"\r\n\r\n\r\n// these match C #defines in locale.h\r\nexport const codePageASCII=0;\r\nexport const codePage1252=1252;\r\nexport const codePageUTF8=65001;\r\nexport const codePageUTF32=12000;\r\n\r\nexport class twrCodePageToUnicodeCodePoint {\r\n\tdecoderUTF8 = new TextDecoder('utf-8');\r\n\tdecoder1252 = new TextDecoder('windows-1252');\r\n\r\n\tconvert(c:number, codePage:number) {\r\n\t\tlet outstr:string;\r\n\t\tif (codePage==codePageUTF8) {\r\n\t\t\toutstr=this.decoderUTF8.decode(new Uint8Array([c]), {stream: true});\r\n\t\t}\r\n\t\telse if (codePage==codePage1252) {\r\n\t\t\toutstr = this.decoder1252.decode(new Uint8Array([c]));\r\n\t\t}\r\n\t\telse if (codePage==codePageASCII) {\r\n\t\t\tif (c>127) outstr=\"\";\r\n\t\t\telse outstr=String.fromCharCode(c);\r\n\t\t}\r\n\t\telse if (codePage==codePageUTF32) {\r\n\t\t\toutstr=String.fromCodePoint(c);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow new Error(\"unsupported CodePage: \"+codePage)\r\n\t\t}\r\n\r\n\t\treturn outstr.codePointAt(0) || 0;\r\n\t}\r\n}\r\n\r\nconst cpTranslate = new twrCodePageToUnicodeCodePoint();\r\n\r\nexport function twrUnicodeCodePointToCodePageImpl(this: twrWasmModuleBase, outstr:number, cp:number, codePage:number) {\r\n\treturn noasyncCopyString(this, outstr, String.fromCodePoint(cp), codePage);\r\n}\r\n\r\nexport function twrUserLanguageImpl(this: twrWasmModuleBase) {\r\n\r\n\treturn noasyncPutString(this, navigator.language, codePageASCII);\r\n\r\n}\r\n\r\n// checks if the character c, when converted to a string, is matched by the passed in regexp string \r\n// utf-8 version not needed since this function is used for a single byte ('char'), \r\n// and non-ascii range utf-8 single byte are not valid\r\nexport function twrRegExpTest1252Impl(this: twrWasmModuleBase, regexpStrIdx:number, c:number) {\r\n\r\n\tconst regexpStr=this.getString(regexpStrIdx);\r\n\tconst regexp=new RegExp(regexpStr, 'u');\r\n\tconst cstr:string = cpTranslate.decoder1252.decode(new Uint8Array([c]));\r\n\tconst r=regexp.test(cstr);\r\n\tif (r) return 1; else return 0;\r\n\r\n}\r\n\r\nexport function to1252(instr:string) {\r\n\r\n\tif (instr.codePointAt(0)==8239) return 32;  // turn narrow-no-break-space into space\r\n\r\n\r\n\t// this first switch statment fixes what appears to be a bug in safari 15.6.1 (17613.3.9.1.16) (comparisons to the character string fail)\r\n\tlet cp=instr.codePointAt(0) || 0;\r\n\r\n\tswitch(cp) {\r\n\t\tcase 338: return 0x8C;\r\n\t\tcase 339: return 0x9C;\r\n\t\tcase 352: return 0x8A;\r\n\t\tcase 353: return 0x9A;\r\n\t\tcase 376: return 0x9F;\r\n\t\tcase 381: return 0x8E;\r\n\t\tcase 382: return 0x9E;\r\n\t\tcase 402: return 0x83;\r\n\t\tcase 710: return 0x88;\r\n\t}\r\n\r\n\tswitch (instr.normalize()) {\r\n\t   case '€': return 0x80;\r\n\t   case '‚': return 0x82;\r\n\t   case 'ƒ': return 0x83;\r\n\t   case '„': return 0x84;\r\n\t   case '…': return 0x85;\r\n\t   case '†': return 0x86;\r\n\t   case '‡': return 0x87;\r\n\t   case 'ˆ': return 0x88;\r\n\t   case '‰': return 0x89;\r\n\t   case 'Š': return 0x8A; \r\n\t\tcase '‹': return 0x8B;\r\n\t   case 'Œ': return 0x8C;\r\n\t   case 'Ž': return 0x8E;\r\n\t   case '‘': return 0x91;\r\n\t   case '’': return 0x92;\r\n\t   case '“': return 0x93;\r\n\t   case '”': return 0x94;\r\n\t   case '•': return 0x95;\r\n\t   case '–': return 0x96;\r\n\t   case '—': return 0x97;\r\n\t   case '˜': return 0x98;\r\n\t   case '™': return 0x99;\r\n\t   case 'š': return 0x9A;\r\n\t   case '›': return 0x9B;\r\n\t   case 'œ': return 0x9C;\r\n\t   case 'ž': return 0x9E;\r\n\t   case 'Ÿ': return 0x9F;\r\n\t}\r\n\t\r\n\tif (cp>255) {\r\n\t\tconsole.log(\"twr-wasm.to1252(): unable to convert: \", instr, cp);\r\n\t\tcp=0;\r\n\t}\r\n\r\n\treturn cp;\r\n}\r\n\r\nexport function toASCII(instr:string) {\r\n\tif (instr=='ƒ') return 102; // lowercase 'f'\r\n\tif (instr.codePointAt(0)==8239) return 32;  // turn narrow-no-break-space into space\r\n\r\n\tlet cp=instr.codePointAt(0) || 0;\r\n\tif (cp>127) return 63; // ASCII for \"?\"\r\n\treturn cp;\r\n}\r\n\r\n// utf-8 version not needed since this function is used for a single byte ('char'), \r\n// and non-ascii range utf-8 single byte are not valid\r\nexport function twrToLower1252Impl(this: twrWasmModuleBase, c:number) {\r\n\r\n\tconst cstr:string = cpTranslate.decoder1252.decode(new Uint8Array([c]));\r\n\tconst regexp=new RegExp(\"^\\\\p{Letter}$\", 'u');\r\n\tif (regexp.test(cstr)) {\r\n\t\tconst r = to1252(cstr.toLocaleLowerCase());\r\n\t\t//console.log(\"twrToLower1252Impl: isLetter\", c, cstr, cstr.codePointAt(0), cstr.toLocaleLowerCase(), cstr.toLocaleLowerCase().codePointAt(0), r);\r\n\t\treturn r;\r\n\t}\r\n\telse {\r\n\t\t//console.log(\"twrToLower1252Impl: isNOTLetter\", c, cstr, cstr.codePointAt(0));\r\n\t\treturn c;\r\n\t}\r\n\r\n}\r\n\r\n//utf-8 version not needed since this function is used for a single byte ('char'), \r\n// and non-ascii range utf-8 single byte are not valid\r\nexport function twrToUpper1252Impl(this: twrWasmModuleBase, c:number) {\r\n\r\n\tconst cstr:string = cpTranslate.decoder1252.decode(new Uint8Array([c]));\r\n\r\n\tif (cstr.codePointAt(0)==402) return c;  // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is ƒ\r\n\tif (cstr.codePointAt(0)==181) return c;  // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is µ\r\n\tif (cstr.codePointAt(0)==223) return c;  // appears to be safari Version 15.6.1 (17613.3.9.1.16) bug -- this is ß'\r\n\t\r\n\tif (cstr==\"µ\") return c;  // upper case version doesn't fit in 1252\r\n\tif (cstr=='ƒ') return c;  // upper case version doesn't fit in 1252\r\n\tif (cstr=='ß') return c;  // toLocaleUpperCase() will convert beta to SS\r\n\r\n\tconst regexp=new RegExp(\"^\\\\p{Letter}$\", 'u');\r\n\tif (regexp.test(cstr)) {\r\n\t\treturn to1252(cstr.toLocaleUpperCase());\r\n\t}\r\n\telse {\r\n\t\treturn c;\r\n\t}\r\n\r\n}\r\n\r\nexport function twrStrcollImpl(this: twrWasmModuleBase, lhs:number, rhs:number, codePage:number) {\r\n\tconst lhStr=this.getString(lhs, undefined, codePage);\r\n\tconst rhStr=this.getString(rhs, undefined, codePage);\r\n\r\n\t// c strcmp(): A positive integer if str1 is greater than str2.\r\n\t// 1 if string 1 (lh) comes after string 2 (rh)\r\n\tconst collator = new Intl.Collator();\r\n\tconst r = collator.compare(lhStr, rhStr);\r\n\r\n\treturn r;\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//struct tm {\r\n//\tint\ttm_sec;\t\t/* seconds after the minute [0-60] */\r\n//\tint\ttm_min;\t\t/* minutes after the hour [0-59] */\r\n//\tint\ttm_hour;\t\t/* hours since midnight [0-23] */\r\n//\tint\ttm_mday;\t\t/* day of the month [1-31] */\r\n//\tint\ttm_mon;\t\t/* months since January [0-11] */\r\n//\tint\ttm_year;\t\t/* years since 1900 */\r\n//\tint\ttm_wday;\t\t/* days since Sunday [0-6] */\r\n//\tint\ttm_yday;\t\t/* days since January 1 [0-365] */\r\n//\tint\ttm_isdst;\t/* Daylight Saving Time flag */\r\n//\tlong\ttm_gmtoff;\t/* offset from UTC in seconds */\r\n//\tchar\t*tm_zone;\t/* timezone abbreviation */\r\n//};\r\n\r\n// fill in struct tm\r\n// epcohSecs as 32bit int will overflow January 19, 2038. \r\nexport function twrTimeTmLocalImpl(this: twrWasmModuleBase, tmIdx:number, epochSecs:number) {\r\n\r\n\tconst d=new Date(epochSecs*1000);\r\n\tthis.setLong(tmIdx, d.getSeconds());\r\n\tthis.setLong(tmIdx+4, d.getMinutes());\r\n\tthis.setLong(tmIdx+8, d.getHours());\r\n\tthis.setLong(tmIdx+12, d.getDate());\r\n\tthis.setLong(tmIdx+16, d.getMonth());\r\n\tthis.setLong(tmIdx+20, d.getFullYear()-1900);\r\n\tthis.setLong(tmIdx+24, d.getDay());\r\n\tthis.setLong(tmIdx+28, getDayOfYear(d));\r\n\tthis.setLong(tmIdx+32, isDst());\r\n\tthis.setLong(tmIdx+36, \t-d.getTimezoneOffset()*60);\r\n\tthis.setLong(tmIdx+40, \tnoasyncPutString(this, getTZ(d), codePageASCII)); \r\n\r\n}\r\n\r\nfunction getDayOfYear(date:Date) {\r\n\tconst start = new Date(date.getFullYear(), 0, 1); \r\n\tconst diff = date.getTime() - start.getTime(); // Difference in milliseconds\r\n\tconst oneDay = 1000 * 60 * 60 * 24; // Number of milliseconds in one day\r\n\tconst day = Math.floor(diff / oneDay);\r\n\treturn day;\r\n}\r\n\r\nfunction isDst() {\r\n\tconst timeString = new Date().toLocaleTimeString('en-US', { timeZoneName: 'long' });\r\n\tif (timeString.includes('Daylight')) {\r\n\t\treturn 1;\r\n\t} else {\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\nfunction getTZ(date:Date) {\r\n\tconst timeZone = date.toLocaleTimeString('en-US', {timeZoneName: 'short'}).split(' ').pop();\r\n\treturn timeZone?timeZone:\"UTC\";\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction setAndPutString(mod: twrWasmModuleBase, idx:number, sin:string,  codePage:number) {\r\n\tconst stridx=noasyncPutString(mod, sin, codePage);\r\n\tmod.setLong(idx, stridx);\r\n}\r\n\r\n// JS string into the webassembly module memory.  \r\n// Does not verify outbuf length. \r\n// Encode the Wasm string using codePage\r\n// Does NOT zero terminate string\r\nfunction noasyncCopyString(mod: twrWasmModuleBase, outbuf:number, sin:string,  codePage:number) {\r\n\t\tconst ru8=mod.stringToU8(sin, codePage);\r\n\t\tmod.mem8.set(ru8, outbuf);\r\n\t\treturn ru8.length;\r\n}\r\n\r\n// allocate and copy a JS string into the webassembly module memory, encode the Wasm string using codePage\r\nfunction noasyncPutString(mod: twrWasmModuleBase, sin:string,  codePage:number) {\r\n\tconst ru8=mod.stringToU8(sin, codePage);\r\n\tconst malloc=mod.exports!.malloc as (size:number)=>number;\r\n\tconst strIndex:number=malloc(ru8.length+1);\r\n\tmod.mem8.set(ru8, strIndex);\r\n\tmod.mem8[strIndex+ru8.length]=0;\r\n\r\n\treturn strIndex;\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//struct lconv {\r\n//\tchar\t*decimal_point;   \t\t0\r\n//\tchar\t*thousands_sep;\t\t\t4\r\n//\tchar\t*grouping;\t\t\t\t\t8\r\n//\tchar\t*int_curr_symbol;\t\t\t12\r\n//\tchar\t*currency_symbol;\t\t\t16\r\n//\tchar\t*mon_decimal_point;\t\t20\r\n//\tchar\t*mon_thousands_sep;\t\t24\r\n//\tchar\t*mon_grouping;\t\t\t\t28\r\n//\tchar\t*positive_sign;\t\t\t32\r\n//\tchar\t*negative_sign;\t\t\t36\r\n//\tchar\tint_frac_digits;\t\t\t40\r\n//\tchar\tfrac_digits;\t\t\t\t44\r\n//\tchar\tp_cs_precedes;\t\t\t\t48\r\n//\tchar\tp_sep_by_space;\t\t\t52\r\n//\tchar\tn_cs_precedes;\t\t\t\t56\r\n//\tchar\tn_sep_by_space;\t\t\t60\r\n//\tchar\tp_sign_posn;\t\t\t\t64\r\n//\tchar\tn_sign_posn;\t\t\t\t68\r\n//};\r\n\r\nexport function twrUserLconvImpl(this: twrWasmModuleBase, lconvIdx:number, codePage:number) {\r\n\tconst locDec=getLocaleDecimalPoint();\r\n\tconst locSep=getLocaleThousandsSeparator();\r\n\tsetAndPutString(this, lconvIdx+0, locDec, codePage);\r\n\tsetAndPutString(this, lconvIdx+4, locSep, codePage);\r\n\tsetAndPutString(this, lconvIdx+20, locDec, codePage);\r\n\tsetAndPutString(this, lconvIdx+24, locSep, codePage);\r\n\tsetAndPutString(this, lconvIdx+24, locSep, codePage);\r\n\tsetAndPutString(this, lconvIdx+24, locSep, codePage);\r\n\tsetAndPutString(this, lconvIdx+32, \"+\", codePage);\r\n\tsetAndPutString(this, lconvIdx+36, \"-\", codePage);\r\n\tsetAndPutString(this, lconvIdx+12, getLocalCurrencySymbol(), codePage);\r\n\tsetAndPutString(this, lconvIdx+16, getLocalCurrencySymbol(), codePage);\r\n}\r\n\r\nfunction getLocaleDecimalPoint() {\r\n    const formatter = new Intl.NumberFormat();\r\n\r\n\t //console.log(\"dec resolvedOptions\", formatter.resolvedOptions());\r\n\r\n    // Format a test number to find out the decimal point.\r\n    const formattedNumber = formatter.format(1.1);\r\n\t //console.log(\"dec formattedNumber\", formattedNumber);\r\n\r\n    // Find the character between the numeric parts.\r\n    const decimalPoint = formattedNumber.replace(/[0-9]/g, '').charAt(0);\r\n\r\n    return decimalPoint;\r\n}\r\n\r\nfunction getLocaleThousandsSeparator() {\r\n\tconst formatter = new Intl.NumberFormat(undefined, {\r\n\t\t minimumFractionDigits: 0  // Ensure no decimal part interferes\r\n\t});\r\n\r\n\t// Format a test number to include a thousands separator.\r\n\tconst formattedNumber = formatter.format(1000);\r\n\t//console.log(\"sep formattedNumber\", formattedNumber);\r\n\r\n\t// Extract the thousands separator by removing numeric characters and possible decimal points.\r\n\t// This may need adjustment depending on whether other characters are present.\r\n\tlet thousandsSeparator = formattedNumber.replace(/[0-9]/g, '').charAt(0);  // Assumes separator is the first character.\r\n\t//console.log(\"sep code\",  thousandsSeparator.codePointAt(0));\r\n\treturn thousandsSeparator;\r\n}\r\n\r\n// this doesn't work, localeCurrency is not correct\r\nfunction getLocaleCurrencyDecimalPoint() {\r\n\t// Create an initial NumberFormat object to detect the locale's currency\r\n\tconst tempFormatter = new Intl.NumberFormat(undefined, { style: 'currency', currency: 'USD' });\r\n\tconst localeCurrency = tempFormatter.resolvedOptions().currency;\r\n\tconst formatter = new Intl.NumberFormat(undefined, {\r\n\t\tstyle: 'currency',\r\n\t\tcurrency: localeCurrency\r\n  });\r\n\t// Format a test number to find out the decimal point.\r\n\tconst formattedNumber = formatter.format(1.1);\r\n\r\n\t// Find the character between the numeric parts.\r\n\t// char(0) is the currency symbol\r\n\tconst decimalPoint = formattedNumber.replace(/[0-9]/g, '').charAt(1);\r\n\r\n\treturn decimalPoint;\r\n}\r\n\r\nfunction getLocalCurrencySymbol() {\r\n\tswitch (navigator.language) {\r\n\t\tcase \"en-US\":\r\n\t\tcase \"en-CA\":\r\n\t\tcase \"fr-CA\":\r\n\t\tcase \"en-AU\":\r\n\t\tcase \"es-MX\":\r\n\t\tcase \"es-AR\":\r\n\t\tcase \"es-CL\":\r\n\t\tcase \"es-CO\":\r\n\t\tcase \"es-EC\":\r\n\t\tcase \"en-GY\":\r\n\t\tcase \"nl-SR\":\r\n\t\tcase \"es-UY\":\r\n\t\tcase \"en-BZ\":\r\n\t\tcase \"es-SV\":\r\n\t\tcase \"es-PA\":\r\n\t\t\treturn \"$\";\r\n\r\n\t\tcase \"es-BO\":\r\n\t\tcase \"es-VE\":\r\n\t\t\treturn \"Bs.\";\r\n\r\n\t\tcase \"es-PY\":\r\n\t\t\treturn \"₲\";\r\n\r\n\t\tcase \"es-PE\":\r\n\t\t\treturn \"S/\";\r\n\r\n\t\tcase \"es-CR\":\r\n\t\t\treturn \"₡\";\r\n\r\n\t\tcase \"es-GT\":\r\n\t\t\treturn \"Q\";\t\t\r\n\t\t\t\t\r\n\t\tcase \"es-HN\":\r\n\t\t\treturn \"L\";\r\n\t\t\t\r\n\t\tcase \"es-NI\":\r\n\t\t\treturn \"C$\";\r\n\r\n\t\tcase \"en-GB\":\r\n\t\t\treturn \"£\"\r\n\r\n\t\tcase \"en-IE\":\r\n\t\tcase \"de-DE\":\r\n\t\tcase \"fr-FR\":\r\n\t\tcase \"de-AT\":\r\n\t\tcase \"nl-BE\":\r\n\t\tcase \"fr-BE\":\r\n\t\tcase \"el-CY\":\r\n\t\tcase \"et-EE\":\r\n\t\tcase \"fi-FI\":\r\n\t\tcase \"sv-FI\":\r\n\t\tcase \"el-GR\":\r\n\t\tcase \"it-IT\":\r\n\t\tcase \"lv-LV\":\r\n\t\tcase \"lt-LT\":\r\n\t\tcase \"fr-LU\":\r\n\t\tcase \"de-LU\":\r\n\t\tcase \"lb-LU\":\r\n\t\tcase \"mt-MT\":\r\n\t\tcase \"nl-NL\":\r\n\t\tcase \"pt-PT\":\r\n\t\tcase \"sk-SK\":\r\n\t\tcase \"sl-SI\":\r\n\t\tcase \"es-ES\":\r\n\t\t\treturn \"€\"\r\n\r\n\t\tcase \"ja-JP\":\r\n\t\t\treturn \"¥\"\r\n\r\n\t\tcase \"zh-CN\":\r\n\t\t\treturn \"¥\"\r\n\r\n\t\tcase \"de-CH\":\r\n\t\tcase \"fr-CH\":\r\n\t\tcase \"it-CH\":\r\n\t\t\treturn \"CHF\"\r\n\r\n\t\tcase \"sv-SE\":\r\n\t\tcase \"da-DK\":\r\n\t\tcase \"nb-NO\":\r\n\t\t\treturn \"kr\"\r\n\r\n\t\tcase \"ru-RU\":\r\n\t\t\treturn \"₽\"\r\n\r\n\t\tcase \"ko-KR\":\r\n\t\t\treturn \"₩\"\r\n\r\n\t\tcase \"en-IN\":\r\n\t\t\treturn \"₹\"\r\n\r\n\t\tcase \"pt-BR\":\r\n\t\treturn \"R$\"\r\n\r\n\t\tcase \"he-IL\":\r\n\t\treturn \"₪\"\r\n\r\n\t\tcase \"tr-TR\":\r\n\t\treturn \"₺\"\r\n\r\n\t\tdefault:\r\n\t\t\treturn \"\";\r\n\t}\r\n}\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n/*\r\nstruct locale_dtnames {\r\n\tconst char* day[7];\r\n\tconst char* abday[7];\r\n\tconst char* month[12];\r\n\tconst char* abmonth[12];\r\n\tconst char* ampm[2];\r\n};\r\n*/\r\n\r\nexport function twrGetDtnamesImpl(this: twrWasmModuleBase, codePage:number) {\r\n\r\n\tconst malloc=this.exports!.malloc as (size:number)=>number;\r\n\tconst dtnamesStructIdx:number=malloc(40*4);\r\n\tfor (let i=0; i<7; i++)\r\n\t\tsetAndPutString(this, dtnamesStructIdx+i*4, getLocalizedDayName(i, 'long'), codePage);\r\n\r\n\tfor (let i=0; i<7; i++)\r\n\t\tsetAndPutString(this, dtnamesStructIdx+(i+7)*4, getLocalizedDayName(i, 'short'), codePage);\r\n\r\n\tfor (let i=0; i<12; i++)\r\n\t\tsetAndPutString(this, dtnamesStructIdx+(i+14)*4, getLocalizedMonthNames(i, 'long'), codePage);\r\n\r\n\tfor (let i=0; i<12; i++)\r\n\t\tsetAndPutString(this, dtnamesStructIdx+(i+14+12)*4, getLocalizedMonthNames(i, 'short'), codePage);\r\n\r\n\tsetAndPutString(this, dtnamesStructIdx+(0+14+24)*4, getLocalizedAM(), codePage);\r\n\tsetAndPutString(this, dtnamesStructIdx+(1+14+24)*4, getLocalizedPM(), codePage);\r\n\r\n\treturn dtnamesStructIdx;\r\n}\r\n\r\nfunction getLocalizedDayName(n:number, weekdayType:'long'|'short') {\r\n\t// Create a Date object for the desired day of the week\r\n\tconst date = new Date();\r\n\tdate.setDate(date.getDate() - date.getDay() + n);\r\n\t\r\n\t// Create an Intl.DateTimeFormat object with the desired locale and options\r\n\tconst formatter = new Intl.DateTimeFormat(undefined, { weekday: weekdayType });\r\n\t\r\n\t// Format the date to get the full day name\r\n\treturn formatter.format(date);\r\n}\r\n\r\nfunction getLocalizedMonthNames(n:number, monthType:'long'|'short') {\r\n\tconst formatter = new Intl.DateTimeFormat(undefined, { month: monthType });\r\n\tconst date = new Date(2000, n, 1);\r\n\treturn formatter.format(date);\r\n}\r\n\r\nfunction getLocalizedAM() {\r\n\t// Create a Date object for a time in the morning\r\n\tconst morningDate = new Date(2000, 0, 1, 9, 0, 0);\r\n\r\n\t// Create an Intl.DateTimeFormat object with the desired locale and options\r\n\tconst formatter = new Intl.DateTimeFormat(undefined, {\r\n\t\t hour: 'numeric',\r\n\t\t hour12: true\r\n\t});\r\n\r\n\t// Format the date and get the parts\r\n\tconst formattedParts = formatter.formatToParts(morningDate);\r\n\r\n\t// Find the part of the formatted string that corresponds to the day period (AM/PM)\r\n\tconst dayPeriodPart = formattedParts.find(part => part.type === 'dayPeriod');\r\n\r\n\treturn dayPeriodPart ? dayPeriodPart.value : '';\r\n}\r\n\r\nfunction getLocalizedPM() {\r\n\t// Create a Date object for a time in the afternoon\r\n\tconst afternoonDate = new Date(2000, 0, 1, 15, 0, 0);\r\n\r\n\t// Create an Intl.DateTimeFormat object with the desired locale and options\r\n\tconst formatter = new Intl.DateTimeFormat(undefined, {\r\n\t\t hour: 'numeric',\r\n\t\t hour12: true\r\n\t});\r\n\r\n\t// Format the date and get the parts\r\n\tconst formattedParts = formatter.formatToParts(afternoonDate);\r\n\r\n\t// Find the part of the formatted string that corresponds to the day period (AM/PM)\r\n\tconst dayPeriodPart = formattedParts.find(part => part.type === 'dayPeriod');\r\n\r\n\treturn dayPeriodPart ? dayPeriodPart.value : '';\r\n}\r\n\r\n","//TODO:\n//\tstruct IoDisplay: need to add a setc32 equiv for back/fore color\n// add io_get_type\n// i can't figure out how to have this param be a keyof instead of string, with separate params for Stream and Terminal:  getProp: (propName: string)=>number;\n// change printf, and other optimizations if they exist, to call io_putstr\n// implement or deprecate io_begin_draw \n// get rid of IoConsoleWindow, and just use IoConsole for everything?\n// add a typedef for struct IoConsole\n// remove from IModParams: imports:{[index:string]:Function},\n// implement \t//\tIModOpts.imports in twrWasmModuleInJSMain\n// add ability to determine if a console has the input focus\n// remove support for io:{[key:string]: IConsole};\n// add codepage as arg to charout.io_putc to make it more flexible and to align with how setc32 works in io_functions\n// add ability to set a max size for a div con, or to trim it.\n// add helloworld-b to index.html?\n// finish inkey\n// add io_setrange example/test case\n// get rid of this.io and just use ioIDtoNames?\n// must match IO_TYPEs in twr_io.h\nexport class IOTypes {\n    static CHARREAD = (1 << 0); // Stream In\n    static CHARWRITE = (1 << 1); // Stream Out\n    static ADDRESSABLE_DISPLAY = (1 << 2); // IoDisplay is enabled\n    static CANVAS2D = (1 << 3); // unimplemented yet\n    static EVENTS = (1 << 4); // unimplemented yet\n    // Private constructor to prevent instantiation\n    constructor() { }\n}\n///////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////\nfunction keyEventProcess(ev) {\n    if (!ev.isComposing && !ev.metaKey && ev.key != \"Control\" && ev.key != \"Alt\") {\n        //console.log(\"keyDownDiv: \",ev.key, ev.code, ev.key.codePointAt(0), ev);\n        if (ev.key.length == 1)\n            return ev.key.codePointAt(0);\n        else {\n            switch (ev.key) {\n                case 'Backspace': return 8;\n                case 'Enter': return 10;\n                case 'Escape': return 0x1B;\n                case 'Delete': return 0x7F;\n                case 'ArrowLeft': return 0x2190;\n                case 'ArrowUp': return 0x2191;\n                case 'ArrowRight': return 0x2192;\n                case 'ArrowDown': return 0x2193;\n            }\n            console.log(\"keyEventProcess SKIPPED: \", ev.key, ev.code, ev.key.codePointAt(0), ev);\n        }\n    }\n    else {\n        console.log(\"keyEventProcess SKIPPED-2: \", ev.key, ev.code, ev.key.codePointAt(0), ev);\n    }\n    return undefined;\n}\n// this is a utility function used by console classes, and should be called from HTML \"keydown\" event \nexport function keyDown(destinationCon, ev) {\n    if (!destinationCon.keys)\n        throw new Error(\"keyDown requires twrModuleAsync\");\n    else {\n        const r = keyEventProcess(ev);\n        if (r)\n            destinationCon.keys.write(r);\n    }\n}\n//# sourceMappingURL=twrcon.js.map","//TODO:\r\n//\tstruct IoDisplay: need to add a setc32 equiv for back/fore color\r\n// add io_get_type\r\n// i can't figure out how to have this param be a keyof instead of string, with separate params for Stream and Terminal:  getProp: (propName: string)=>number;\r\n// change printf, and other optimizations if they exist, to call io_putstr\r\n// implement or deprecate io_begin_draw \r\n// get rid of IoConsoleWindow, and just use IoConsole for everything?\r\n// add a typedef for struct IoConsole\r\n// remove from IModParams: imports:{[index:string]:Function},\r\n// implement \t//\tIModOpts.imports in twrWasmModuleInJSMain\r\n// add ability to determine if a console has the input focus\r\n// remove support for io:{[key:string]: IConsole};\r\n// add codepage as arg to charout.io_putc to make it more flexible and to align with how setc32 works in io_functions\r\n// add ability to set a max size for a div con, or to trim it.\r\n// add helloworld-b to index.html?\r\n// finish inkey\r\n// add io_setrange example/test case\r\n// get rid of this.io and just use ioIDtoNames?\r\n\r\nimport {twrSharedCircularBuffer} from \"./twrcircular.js\"\r\nimport {twrWasmModuleBase} from \"./twrmodbase.js\"\r\n\r\n// Params are passed to the console constructor\r\nexport interface IConsoleDivParams {\r\n   foreColor?: string,\r\n   backColor?: string,\r\n   fontSize?: number,\r\n}\r\n\r\nexport interface IConsoleTerminalParams extends IConsoleDivParams {\r\n   widthInChars?: number,\r\n   heightInChars?: number,\r\n}\r\n\r\n// Props of a console can be queried \r\nexport interface IOBaseProps {\r\n   type: number,   // a constant from class IOTypes\r\n   [key: string]: number;  // required because I access with a string. \r\n}\r\n\r\nexport interface IConsoleTerminalProps extends IOBaseProps {\r\n   cursorPos:number,\r\n   charWidth: number,\r\n   charHeight: number,\r\n   foreColorAsRGB: number,\r\n   backColorAsRGB: number,\r\n   widthInChars: number,\r\n   heightInChars: number,\r\n   fontSize: number,\r\n   canvasWidth:number,\r\n   canvasHeight:number\r\n}\r\n\r\nexport interface ICanvasProps extends IOBaseProps{\r\n   canvasWidth:number,\r\n   canvasHeight:number\r\n}\r\n\r\n// Interface for Consoles\r\nexport interface IConsoleBase {\r\n   getProp: (propName: string)=>number;\r\n   getProxyParams: ()=> TConsoleProxyParams;\r\n   processMessage(msgType:string, data:[number, ...any[]], callingModule:twrWasmModuleBase):boolean;\r\n\r\n\tid:number;   // returned by twrConsoleRegistry.registerConsole()\r\n   element?:HTMLElement;   // debug console does not have an element\r\n}\r\n\r\nexport interface IConsoleBaseProxy {\r\n   getProp: (propName: string)=>number;\r\n\tid:number;   // returned by twrConsoleRegistry.registerConsole()\r\n}\r\n\r\nexport interface IConsoleStream {\r\n   charOut: (c:number, codePage:number)=>void;\r\n   putStr: (str:string)=>void;\r\n\tkeyDown: (ev:KeyboardEvent)=>void;\r\n\r\n   keys?: twrSharedCircularBuffer;  // only created if getProxyParams is called \r\n}\r\n\r\nexport interface IConsoleStreamProxy {\r\n   charOut: (c:number, codePage:number)=>void;\r\n   putStr: (str:string)=>void;\r\n   charIn: ()=>number;\r\n\tsetFocus: ()=>void;\r\n}\r\n\r\nexport interface IConsoleAddressable {\r\n   cls: ()=>void;\r\n   setRange: (start:number, values:[])=>void;\r\n   setC32: (location:number, char:number)=>void;\r\n   setReset: (x:number, y:number, isset:boolean)=>void;\r\n   point: (x:number, y:number)=>boolean;\r\n   setCursor: (pos:number)=>void;\r\n   setCursorXY: (x:number, y:number)=>void;\r\n   setColors: (foreground:number, background:number)=>void;\r\n}\r\n\r\nexport interface IConsoleDrawable {\r\n    drawSeq: (ds:number, owner:twrWasmModuleBase)=>void,\r\n }\r\n\r\n export interface IConsoleDrawableProxy {\r\n   drawSeq: (ds:number)=>void,\r\n}\r\n\r\nexport interface IConsoleTerminal extends IConsoleBase, IConsoleStream, IConsoleAddressable {}\r\nexport interface IConsoleTerminalProxy extends IConsoleBaseProxy, IConsoleStreamProxy, IConsoleAddressable {}\r\n\r\nexport interface IConsoleDiv extends IConsoleBase, IConsoleStream {}\r\nexport interface IConsoleDivProxy extends IConsoleBaseProxy, IConsoleStreamProxy  {}\r\n\r\nexport interface IConsoleDebug extends IConsoleBase, IConsoleStream {}\r\nexport interface IConsoleDebugProxy extends IConsoleBaseProxy, IConsoleStreamProxy  {}\r\n\r\nexport interface IConsoleCanvas extends IConsoleBase, IConsoleDrawable {}\r\nexport interface IConsoleCanvasProxy extends IConsoleBaseProxy, IConsoleDrawableProxy {}\r\n\r\nexport interface IConsole extends IConsoleBase, Partial<IConsoleStream>, Partial<IConsoleAddressable>, Partial<IConsoleDrawable> {}\r\nexport interface IConsoleProxy extends IConsoleBaseProxy, Partial<IConsoleStreamProxy>, Partial<IConsoleAddressable>, Partial<IConsoleDrawableProxy> {}\r\n\r\n\r\n// ProxyParams are the info needed to instantiate the proxy version of a console\r\nexport type TConsoleDebugProxyParams = [\"twrConsoleDebugProxy\", number];\r\nexport type TConsoleDivProxyParams = [\"twrConsoleDivProxy\", number, SharedArrayBuffer];\r\nexport type TConsoleTerminalProxyParams = [\"twrConsoleTerminalProxy\", number, SharedArrayBuffer, SharedArrayBuffer];\r\nexport type TConsoleCanvasProxyParams = [\"twrConsoleCanvasProxy\", number, ICanvasProps, SharedArrayBuffer, SharedArrayBuffer];\r\nexport type TConsoleProxyParams = TConsoleTerminalProxyParams | TConsoleDivProxyParams | TConsoleDebugProxyParams | TConsoleCanvasProxyParams;\r\n\r\n// must match IO_TYPEs in twr_io.h\r\nexport class IOTypes {\r\n   static readonly  CHARREAD = (1<<0);  // Stream In\r\n   static readonly  CHARWRITE = (1<<1);  // Stream Out\r\n   static readonly  ADDRESSABLE_DISPLAY = (1<<2);  \t// IoDisplay is enabled\r\n   static readonly  CANVAS2D = (1<<3);   // unimplemented yet\r\n   static readonly  EVENTS = (1<<4);  // unimplemented yet\r\n\r\n  // Private constructor to prevent instantiation\r\n  private constructor() {}\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////\r\n\r\nfunction keyEventProcess(ev:KeyboardEvent) {\r\n\tif ( !ev.isComposing  && !ev.metaKey && ev.key!=\"Control\" && ev.key!=\"Alt\" ) {\r\n\t\t//console.log(\"keyDownDiv: \",ev.key, ev.code, ev.key.codePointAt(0), ev);\r\n\t\tif (ev.key.length==1)\r\n\t\t\treturn ev.key.codePointAt(0);\r\n\t\telse {\r\n\t\t\tswitch(ev.key) {\r\n\t\t\t\tcase 'Backspace': return 8;\r\n\t\t\t\tcase 'Enter': \t\treturn 10;\r\n\t\t\t\tcase 'Escape': \treturn 0x1B;\r\n\t\t\t\tcase 'Delete': \treturn 0x7F;\r\n\t\t\t\tcase 'ArrowLeft':\treturn 0x2190;\r\n\t\t\t\tcase 'ArrowUp':\treturn 0x2191;\r\n\t\t\t\tcase 'ArrowRight':return 0x2192;\r\n\t\t\t\tcase 'ArrowDown':\treturn 0x2193;\r\n\t\t\t}\r\n\t\t\tconsole.log(\"keyEventProcess SKIPPED: \",ev.key, ev.code, ev.key.codePointAt(0), ev);\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tconsole.log(\"keyEventProcess SKIPPED-2: \",ev.key, ev.code, ev.key.codePointAt(0), ev);\r\n\t}\r\n\r\n\treturn undefined;\r\n}\r\n\r\n// this is a utility function used by console classes, and should be called from HTML \"keydown\" event \r\nexport function keyDown(destinationCon:IConsole, ev:KeyboardEvent)  {\r\n\tif (!destinationCon.keys)\r\n\t\tthrow new Error(\"keyDown requires twrModuleAsync\");\r\n\telse {\r\n\t\tconst r=keyEventProcess(ev);\r\n\t\tif (r) destinationCon.keys.write(r);\r\n\t}\r\n}\r\n\r\n","// this is global in the JS main thread address space\n// all consoles are registered here\nexport class twrConsoleRegistry {\n    static consoles = [];\n    // create a pairing between an instance of type IConsole and an integer ID\n    static registerConsole(con) {\n        twrConsoleRegistry.consoles.push(con);\n        return twrConsoleRegistry.consoles.length - 1;\n    }\n    static getConsole(id) {\n        if (id < 0 || id >= twrConsoleRegistry.consoles.length)\n            throw new Error(\"Invalid console ID: \" + id);\n        return twrConsoleRegistry.consoles[id];\n    }\n    static getConsoleID(con) {\n        for (let i = 0; i < twrConsoleRegistry.consoles.length; i++)\n            if (twrConsoleRegistry.consoles[i] == con)\n                return i;\n        throw new Error(\"IConsole not in registry\");\n    }\n}\n// this is created in each twrWasmModuleAsyncProxy Worker thread\n// if there are multiple twrWasmModuleAsyncProxy instances, there will be multiple copies of this in each Worker\nexport class twrConsoleProxyRegistry {\n    static consoles = [];\n    // create a pairing between an instance of type IConsole and an integer ID\n    static registerConsoleProxy(con) {\n        twrConsoleProxyRegistry.consoles[con.id] = con;\n        return con.id;\n    }\n    static getConsoleProxy(id) {\n        if (id < 0 || id >= twrConsoleProxyRegistry.consoles.length)\n            throw new Error(\"Invalid console ID: \" + id);\n        return twrConsoleProxyRegistry.consoles[id];\n    }\n    static getConsoleID(con) {\n        for (let i = 0; i < twrConsoleProxyRegistry.consoles.length; i++)\n            if (twrConsoleProxyRegistry.consoles[i] == con)\n                return i;\n        throw new Error(\"IConsoleProxy not in registry\");\n    }\n}\n//# sourceMappingURL=twrconreg.js.map","\r\nimport {IConsole, IConsoleProxy} from \"./twrcon.js\"\r\n\r\n// this is global in the JS main thread address space\r\n// all consoles are registered here\r\nexport class twrConsoleRegistry {\r\n\r\n\tstatic consoles: IConsole[]=[];\r\n\r\n\t// create a pairing between an instance of type IConsole and an integer ID\r\n\tstatic registerConsole(con:IConsole) {\r\n\t\ttwrConsoleRegistry.consoles.push(con);\r\n\t\treturn twrConsoleRegistry.consoles.length-1;\r\n\t}\r\n\r\n\tstatic getConsole(id:number) {\r\n\t\tif (id<0 || id >= twrConsoleRegistry.consoles.length)\r\n\t\t\tthrow new Error(\"Invalid console ID: \"+id);\r\n\r\n\t\treturn twrConsoleRegistry.consoles[id];\r\n\t}\r\n\r\n\tstatic getConsoleID(con:IConsole) {\r\n\t\tfor (let i=0; i<twrConsoleRegistry.consoles.length; i++)\r\n\t\t\tif (twrConsoleRegistry.consoles[i]==con)\r\n\t\t\t\treturn i;\r\n\r\n\t\tthrow new Error(\"IConsole not in registry\");\r\n\t}\r\n\r\n}\r\n\r\n// this is created in each twrWasmModuleAsyncProxy Worker thread\r\n// if there are multiple twrWasmModuleAsyncProxy instances, there will be multiple copies of this in each Worker\r\nexport class twrConsoleProxyRegistry {\r\n\r\n\tstatic consoles: IConsoleProxy[]=[];\r\n\r\n\t// create a pairing between an instance of type IConsole and an integer ID\r\n\tstatic registerConsoleProxy(con:IConsoleProxy) {\r\n\t\ttwrConsoleProxyRegistry.consoles[con.id]=con;\r\n\t\treturn con.id;\r\n\t}\r\n\r\n\tstatic getConsoleProxy(id:number) {\r\n\t\tif (id<0 || id >= twrConsoleProxyRegistry.consoles.length)\r\n\t\t\tthrow new Error(\"Invalid console ID: \"+id);\r\n\r\n\t\treturn twrConsoleProxyRegistry.consoles[id];\r\n\t}\r\n\r\n\tstatic getConsoleID(con:IConsoleProxy) {\r\n\t\tfor (let i=0; i<twrConsoleProxyRegistry.consoles.length; i++)\r\n\t\t\tif (twrConsoleProxyRegistry.consoles[i]==con)\r\n\t\t\t\treturn i;\r\n\r\n\t\tthrow new Error(\"IConsoleProxy not in registry\");\r\n\t}\r\n\r\n}","import { twrFloatUtil } from \"./twrfloat.js\";\nimport { codePageUTF8, codePage1252, codePageASCII, to1252, toASCII } from \"./twrlocale.js\";\n/*********************************************************************/\n/*********************************************************************/\n/*********************************************************************/\nexport class twrWasmModuleBase {\n    memory;\n    mem8;\n    mem32;\n    memD;\n    exports;\n    isAsyncProxy = false;\n    floatUtil;\n    constructor() {\n        this.mem8 = new Uint8Array(); // avoid type errors\n        this.mem32 = new Uint32Array(); // avoid type errors\n        this.memD = new Float64Array(); // avoid type errors\n        this.floatUtil = new twrFloatUtil(this);\n        //console.log(\"size of mem8 after constructor\",this.mem8.length);\n    }\n    /*********************************************************************/\n    /*********************************************************************/\n    // overridden by twrWasmModuleAsync\n    async loadWasm(pathToLoad, imports, ioNamesToID) {\n        //console.log(\"fileToLoad\",fileToLoad)\n        let response;\n        try {\n            response = await fetch(pathToLoad);\n        }\n        catch (err) {\n            console.log('loadWasm() failed to fetch: ' + pathToLoad);\n            throw err;\n        }\n        if (!response.ok)\n            throw new Error(\"fetch response error on file '\" + pathToLoad + \"'\\n\" + response.statusText);\n        try {\n            let wasmBytes = await response.arrayBuffer();\n            let instance = await WebAssembly.instantiate(wasmBytes, { env: imports });\n            this.exports = instance.instance.exports;\n            if (!this.exports)\n                throw new Error(\"Unexpected error - undefined instance.exports\");\n            if (this.memory)\n                throw new Error(\"unexpected error -- this.memory already set\");\n            this.memory = this.exports.memory;\n            if (!this.memory)\n                throw new Error(\"Unexpected error - undefined exports.memory\");\n            this.mem8 = new Uint8Array(this.memory.buffer);\n            this.mem32 = new Uint32Array(this.memory.buffer);\n            this.memD = new Float64Array(this.memory.buffer);\n            // SharedArrayBuffer required for twrWasmModuleAsync/twrWasmModuleAsyncProxy\n            // instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error\n            // (don't check for instanceof SharedArrayBuffer, since it can cause an runtime error when SharedArrayBuffer does not exist)\n            if (this.isAsyncProxy) {\n                if (this.memory.buffer instanceof ArrayBuffer)\n                    console.log(\"twrWasmModuleAsync requires shared Memory. Add wasm-ld --shared-memory --no-check-features (see docs)\");\n                postMessage([\"setmemory\", this.memory]);\n            }\n            else {\n                // here if twrWasmModule because twrWasmModuleAsync overrides this function, and twrWasmModuleAsyncProxy was handled above\n                if (!(this.memory.buffer instanceof ArrayBuffer))\n                    console.log(\"twrWasmModule does not require shared Memory. Okay to remove wasm-ld --shared-memory --no-check-features\");\n            }\n            this.malloc = (size) => {\n                return new Promise(resolve => {\n                    const m = this.exports.malloc;\n                    resolve(m(size));\n                });\n            };\n            this.init(ioNamesToID);\n        }\n        catch (err) {\n            console.log('Wasm instantiate error: ' + err + (err.stack ? \"\\n\" + err.stack : ''));\n            throw err;\n        }\n    }\n    init(ioNamesToID) {\n        const twrInit = this.exports.twr_wasm_init;\n        twrInit(ioNamesToID.stdio, ioNamesToID.stderr, ioNamesToID.std2d == undefined ? -1 : ioNamesToID.std2d, this.mem8.length);\n    }\n    /*\n    * this is overridden by twrmodasync (although its worker side will call this version)\n    *\n    * callC takes an array where:\n    * the first entry is the name of the C function in the Wasm module to call (must be exported, typically via the --export clang flag)\n    * and the next entries are a variable number of arguments to pass to the C function, of type\n    * number - converted to int32 or float64 as appropriate\n    * string - converted to a an index (ptr) into a module Memory returned via stringToMem()\n    * URL - the file contents are loaded into module Memory via fetchAndPutURL(), and two C arguments are generated - index (pointer) to the memory, and length\n    * ArrayBuffer - the array is loaded into module memory via putArrayBuffer\n    */\n    async callC(params) {\n        const cparams = await this.preCallC(params);\n        let retval = await this.callCImpl(params[0], cparams);\n        await this.postCallC(cparams, params);\n        return retval;\n    }\n    async callCImpl(fname, cparams = []) {\n        if (!this.exports)\n            throw new Error(\"this.exports undefined\");\n        if (!this.exports[fname])\n            throw new Error(\"callC: function '\" + fname + \"' not in export table.  Use --export wasm-ld flag.\");\n        const f = this.exports[fname];\n        let cr = f(...cparams);\n        return cr;\n    }\n    // convert an array of arguments to numbers by stuffing contents into malloc'd Wasm memory\n    async preCallC(params) {\n        if (!(params.constructor === Array))\n            throw new Error(\"callC: params must be array, first arg is function name\");\n        if (params.length == 0)\n            throw new Error(\"callC: missing function name\");\n        let cparams = [];\n        let ci = 0;\n        for (let i = 1; i < params.length; i++) {\n            const p = params[i];\n            switch (typeof p) {\n                case 'number':\n                case 'bigint':\n                    cparams[ci++] = p;\n                    break;\n                case 'string':\n                    cparams[ci++] = await this.putString(p);\n                    break;\n                case 'object':\n                    if (p instanceof URL) {\n                        const r = await this.fetchAndPutURL(p);\n                        cparams[ci++] = r[0]; // mem index\n                        cparams[ci++] = r[1]; // len\n                        break;\n                    }\n                    else if (p instanceof ArrayBuffer) {\n                        const r = await this.putArrayBuffer(p);\n                        cparams[ci++] = r; // mem index\n                        break;\n                    }\n                default:\n                    throw new Error(\"callC: invalid object type passed in\");\n            }\n        }\n        return cparams;\n    }\n    // free the mallocs; copy array buffer data from malloc back to arraybuffer\n    async postCallC(cparams, params) {\n        let ci = 0;\n        for (let i = 1; i < params.length; i++) {\n            const p = params[i];\n            switch (typeof p) {\n                case 'number':\n                case 'bigint':\n                    ci++;\n                    break;\n                case 'string':\n                    await this.callCImpl('free', [cparams[ci]]);\n                    ci++;\n                    break;\n                case 'object':\n                    if (p instanceof URL) {\n                        await this.callCImpl('free', [cparams[ci]]);\n                        ci = ci + 2;\n                        break;\n                    }\n                    else if (p instanceof ArrayBuffer) {\n                        const u8 = new Uint8Array(p);\n                        const idx = cparams[ci];\n                        for (let j = 0; j < u8.length; j++)\n                            u8[j] = this.mem8[idx + j]; // mod.mem8 is a Uint8Array view of the module's WebAssembly Memory\n                        await this.callCImpl('free', [idx]);\n                        ci++;\n                        break;\n                    }\n                    else\n                        throw new Error(\"postCallC: internal error A\");\n                default:\n                    throw new Error(\"postCallC: internal error B\");\n            }\n        }\n        return cparams;\n    }\n    /*********************************************************************/\n    /*********************************************************************/\n    // convert a Javascript string into byte sequence that encodes the string using UTF8, or the requested codePage\n    stringToU8(sin, codePage = codePageUTF8) {\n        let ru8;\n        if (codePage == codePageUTF8) {\n            const encoder = new TextEncoder();\n            ru8 = encoder.encode(sin);\n        }\n        else if (codePage == codePage1252) {\n            ru8 = new Uint8Array(sin.length);\n            for (let i = 0; i < sin.length; i++) {\n                ru8[i] = to1252(sin[i]);\n            }\n        }\n        else if (codePage == codePageASCII) {\n            ru8 = new Uint8Array(sin.length);\n            for (let i = 0; i < sin.length; i++) {\n                const r = toASCII(sin[i]);\n                ru8[i] = r;\n            }\n        }\n        else {\n            throw new Error(\"unknown codePage: \" + codePage);\n        }\n        return ru8;\n    }\n    // copy a string into existing buffer in the webassembly module memory as utf8 (or specified codePage)\n    // result always null terminated\n    copyString(buffer, buffer_size, sin, codePage = codePageUTF8) {\n        if (buffer_size < 1)\n            throw new Error(\"copyString buffer_size must have length > 0 (room for terminating 0): \" + buffer_size);\n        const ru8 = this.stringToU8(sin, codePage);\n        let i;\n        for (i = 0; i < ru8.length && i < buffer_size - 1; i++)\n            this.mem8[buffer + i] = ru8[i];\n        this.mem8[buffer + i] = 0;\n    }\n    // allocate and copy a string into the webassembly module memory as utf8 (or the specified codePage)\n    async putString(sin, codePage = codePageUTF8) {\n        const ru8 = this.stringToU8(sin, codePage);\n        const strIndex = await this.malloc(ru8.length + 1);\n        this.mem8.set(ru8, strIndex);\n        this.mem8[strIndex + ru8.length] = 0;\n        return strIndex;\n    }\n    // allocate and copy a Uint8Array into Wasm mod memory\n    async putU8(u8a) {\n        let dest = await this.malloc(u8a.length);\n        this.mem8.set(u8a, dest);\n        return dest;\n    }\n    async putArrayBuffer(ab) {\n        const u8 = new Uint8Array(ab);\n        return this.putU8(u8);\n    }\n    // given a url, load its contents, and stuff into Wasm memory similar to Unint8Array\n    async fetchAndPutURL(fnin) {\n        if (!(typeof fnin === 'object' && fnin instanceof URL))\n            throw new Error(\"fetchAndPutURL param must be URL\");\n        try {\n            let response = await fetch(fnin);\n            let buffer = await response.arrayBuffer();\n            let src = new Uint8Array(buffer);\n            let dest = await this.putU8(src);\n            return [dest, src.length];\n        }\n        catch (err) {\n            console.log('fetchAndPutURL Error. URL: ' + fnin + '\\n' + err + (err.stack ? \"\\n\" + err.stack : ''));\n            throw err;\n        }\n    }\n    getLong(idx) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx)\n            throw new Error(\"getLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length)\n            throw new Error(\"invalid index passed to getLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        const long = this.mem32[idx32];\n        return long;\n    }\n    setLong(idx, value) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx)\n            throw new Error(\"setLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length - 1)\n            throw new Error(\"invalid index passed to setLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        this.mem32[idx32] = value;\n    }\n    getDouble(idx) {\n        const idx64 = Math.floor(idx / 8);\n        if (idx64 * 8 != idx)\n            throw new Error(\"getLong passed non Float64 aligned address\");\n        const long = this.memD[idx64];\n        return long;\n    }\n    setDouble(idx, value) {\n        const idx64 = Math.floor(idx / 8);\n        if (idx64 * 8 != idx)\n            throw new Error(\"setDouble passed non Float64 aligned address\");\n        this.memD[idx64] = value;\n    }\n    getShort(idx) {\n        if (idx < 0 || idx >= this.mem8.length)\n            throw new Error(\"invalid index passed to getShort: \" + idx);\n        const short = this.mem8[idx] + this.mem8[idx + 1] * 256;\n        return short;\n    }\n    // get a string out of module memory\n    // null terminated, up until max of (optional) len bytes\n    // len may be longer than the number of characters, if characters are utf-8 encoded\n    getString(strIndex, len, codePage = codePageUTF8) {\n        if (strIndex < 0 || strIndex >= this.mem8.length)\n            throw new Error(\"invalid strIndex passed to getString: \" + strIndex);\n        if (len) {\n            if (len < 0 || len + strIndex > this.mem8.length)\n                throw new Error(\"invalid len  passed to getString: \" + len);\n        }\n        else {\n            len = this.mem8.indexOf(0, strIndex);\n            if (len == -1)\n                throw new Error(\"string is not null terminated\");\n            len = len - strIndex;\n        }\n        let encodeFormat;\n        if (codePage == codePageUTF8)\n            encodeFormat = 'utf-8';\n        else if (codePage == codePage1252)\n            encodeFormat = 'windows-1252';\n        else\n            throw new Error(\"Unsupported codePage: \" + codePage);\n        const td = new TextDecoder(encodeFormat);\n        const u8todecode = new Uint8Array(this.mem8.buffer, strIndex, len);\n        // chrome throws exception when using TextDecoder on SharedArrayBuffer\n        // BUT, instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error, so don't check directly\n        if (this.mem8.buffer instanceof ArrayBuffer) {\n            const sout = td.decode(u8todecode);\n            return sout;\n        }\n        else { // must be SharedArrayBuffer\n            const regularArrayBuffer = new ArrayBuffer(len);\n            const regularUint8Array = new Uint8Array(regularArrayBuffer);\n            regularUint8Array.set(u8todecode);\n            const sout = td.decode(regularUint8Array);\n            return sout;\n        }\n    }\n    // get a byte array out of module memory when passed in index to [size, dataptr]\n    getU8Arr(idx) {\n        if (idx < 0 || idx >= this.mem8.length)\n            throw new Error(\"invalid index passed to getU8: \" + idx);\n        const rv = new Uint32Array((this.mem8.slice(idx, idx + 8)).buffer);\n        let size = rv[0];\n        let dataptr = rv[1];\n        if (dataptr < 0 || dataptr >= (this.mem8.length))\n            throw new Error(\"invalid idx.dataptr passed to getU8\");\n        if (size < 0 || size > (this.mem8.length - dataptr))\n            throw new Error(\"invalid idx.size passed to  getU8\");\n        const u8 = this.mem8.slice(dataptr, dataptr + size);\n        return u8;\n    }\n    // get a int32 array out of module memory when passed in index to [size, dataptr]\n    getU32Arr(idx) {\n        if (idx < 0 || idx >= this.mem8.length)\n            throw new Error(\"invalid index passed to getU32: \" + idx);\n        const rv = new Uint32Array((this.mem8.slice(idx, idx + 8)).buffer);\n        let size = rv[0];\n        let dataptr = rv[1];\n        if (dataptr < 0 || dataptr >= (this.mem8.length))\n            throw new Error(\"invalid idx.dataptr passed to getU32\");\n        if (size < 0 || size > (this.mem8.length - dataptr))\n            throw new Error(\"invalid idx.size passed to  getU32\");\n        if (size % 4 != 0)\n            throw new Error(\"idx.size is not an integer number of 32 bit words\");\n        const u32 = new Uint32Array((this.mem8.slice(dataptr, dataptr + size)).buffer);\n        return u32;\n    }\n}\n//# sourceMappingURL=twrmodbase.js.map","\r\nimport {twrFloatUtil} from \"./twrfloat.js\";\r\nimport {codePageUTF8, codePage1252, codePageASCII, to1252, toASCII} from \"./twrlocale.js\"\r\nimport {IConsole, IConsoleBase, IConsoleStream, IConsoleCanvas} from \"./twrcon.js\"\r\n\r\nexport interface IModOpts {\r\n\tstdio?: IConsoleStream&IConsoleBase,\r\n   d2dcanvas?: IConsoleCanvas&IConsoleBase,\r\n\tio?: {[key:string]: IConsole},\r\n\twindim?:[number, number],\r\n\tforecolor?:string,\r\n\tbackcolor?:string,\r\n\tfontsize?:number,\r\n\timports?:{},\r\n}\r\n\r\n/*********************************************************************/\r\n/*********************************************************************/\r\n/*********************************************************************/\r\n\r\nexport abstract class twrWasmModuleBase {\r\n\tmemory?:WebAssembly.Memory;\r\n\tmem8:Uint8Array;\r\n\tmem32:Uint32Array;\r\n\tmemD:Float64Array;\r\n\tabstract malloc:(size:number)=>Promise<number>;\r\n\texports?:WebAssembly.Exports;\r\n\tisAsyncProxy=false;\r\n\tfloatUtil:twrFloatUtil;\r\n\r\n\tconstructor() {\r\n\t\tthis.mem8=new Uint8Array();  \t// avoid type errors\r\n\t\tthis.mem32=new Uint32Array();  // avoid type errors\r\n\t\tthis.memD=new Float64Array();  // avoid type errors\r\n\t\tthis.floatUtil=new twrFloatUtil(this);\r\n\t\t//console.log(\"size of mem8 after constructor\",this.mem8.length);\r\n\t}\r\n\r\n\t/*********************************************************************/\r\n\t/*********************************************************************/\r\n\r\n\t// overridden by twrWasmModuleAsync\r\n\tasync loadWasm(pathToLoad:string, imports:WebAssembly.ModuleImports, ioNamesToID:{[key:string]:number}) {\r\n\t\t//console.log(\"fileToLoad\",fileToLoad)\r\n\r\n\t\tlet response;\r\n\t\ttry {\r\n\t\t\tresponse=await fetch(pathToLoad);\r\n\t\t} catch(err:any) {\r\n\t\t\tconsole.log('loadWasm() failed to fetch: '+pathToLoad);\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t\t\r\n\t\tif (!response.ok) throw new Error(\"fetch response error on file '\"+pathToLoad+\"'\\n\"+response.statusText);\r\n\r\n\t\ttry {\r\n\t\t\tlet wasmBytes = await response.arrayBuffer();\r\n\r\n\t\t\tlet instance = await WebAssembly.instantiate(wasmBytes, {env: imports});\r\n\r\n\t\t\tthis.exports=instance.instance.exports;\r\n\t\t\tif (!this.exports) throw new Error(\"Unexpected error - undefined instance.exports\");\r\n\r\n\t\t\tif (this.memory) throw new Error (\"unexpected error -- this.memory already set\");\r\n\t\t\tthis.memory=this.exports.memory as WebAssembly.Memory;\r\n\t\t\tif (!this.memory) throw new Error(\"Unexpected error - undefined exports.memory\");\r\n\t\t\tthis.mem8 = new Uint8Array(this.memory.buffer);\r\n\t\t\tthis.mem32 = new Uint32Array(this.memory.buffer);\r\n\t\t\tthis.memD = new Float64Array(this.memory.buffer);\r\n\r\n\t\t\t// SharedArrayBuffer required for twrWasmModuleAsync/twrWasmModuleAsyncProxy\r\n\t\t\t// instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error\r\n\t\t\t// (don't check for instanceof SharedArrayBuffer, since it can cause an runtime error when SharedArrayBuffer does not exist)\r\n\t\t\tif (this.isAsyncProxy) {\r\n\t\t\t\tif (this.memory.buffer instanceof ArrayBuffer)\r\n\t\t\t\t\tconsole.log(\"twrWasmModuleAsync requires shared Memory. Add wasm-ld --shared-memory --no-check-features (see docs)\");\r\n\t\t\t\t\r\n\t\t\t\tpostMessage([\"setmemory\",this.memory]);\r\n\t\t\t}\r\n\r\n\t\t\telse {\r\n\t\t\t\t// here if twrWasmModule because twrWasmModuleAsync overrides this function, and twrWasmModuleAsyncProxy was handled above\r\n\r\n\t\t\t\tif (!(this.memory.buffer instanceof ArrayBuffer))\r\n\t\t\t\t\tconsole.log(\"twrWasmModule does not require shared Memory. Okay to remove wasm-ld --shared-memory --no-check-features\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.malloc=(size:number)=>{\r\n\t\t\t\treturn new Promise(resolve => {\r\n\t\t\t\t\tconst m=this.exports!.malloc as (size:number)=>number;\r\n\t\t\t\t\tresolve(m(size));\r\n\t\t\t\t});\r\n\t\t   };\r\n\r\n\t\t\tthis.init(ioNamesToID);\r\n\r\n\t\t} catch(err:any) {\r\n\t\t\tconsole.log('Wasm instantiate error: ' + err + (err.stack ? \"\\n\" + err.stack : ''));\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate init(ioNamesToID:{[key:string]:number}) {\r\n\t\t\tconst twrInit=this.exports!.twr_wasm_init as CallableFunction;\r\n\t\t\ttwrInit(ioNamesToID.stdio, ioNamesToID.stderr, ioNamesToID.std2d==undefined?-1:ioNamesToID.std2d, this.mem8.length);\r\n\t}\r\n\r\n\t/* \r\n\t* this is overridden by twrmodasync (although its worker side will call this version)\r\n\t* \r\n\t* callC takes an array where:\r\n\t* the first entry is the name of the C function in the Wasm module to call (must be exported, typically via the --export clang flag)\r\n\t* and the next entries are a variable number of arguments to pass to the C function, of type\r\n\t* number - converted to int32 or float64 as appropriate\r\n\t* string - converted to a an index (ptr) into a module Memory returned via stringToMem()\r\n\t* URL - the file contents are loaded into module Memory via fetchAndPutURL(), and two C arguments are generated - index (pointer) to the memory, and length\r\n\t* ArrayBuffer - the array is loaded into module memory via putArrayBuffer\r\n    */\r\n\r\n\tasync callC(params:[string, ...(string|number|bigint|ArrayBuffer|URL)[]]) {\r\n\t\tconst cparams=await this.preCallC(params);\r\n\t\tlet retval = await this.callCImpl(params[0], cparams);\r\n\t\tawait this.postCallC(cparams, params);\r\n\t\treturn retval;\r\n\t}\r\n\r\n\tasync callCImpl(fname:string, cparams:(number|bigint)[]=[]) {\r\n\t\tif (!this.exports) throw new Error(\"this.exports undefined\");\r\n\t\tif (!this.exports[fname]) throw new Error(\"callC: function '\"+fname+\"' not in export table.  Use --export wasm-ld flag.\");\r\n\r\n\t\tconst f = this.exports[fname] as CallableFunction;\r\n\t\tlet cr=f(...cparams);\r\n\r\n\t\treturn cr;\r\n\t}\r\n\r\n\t// convert an array of arguments to numbers by stuffing contents into malloc'd Wasm memory\r\n\tasync preCallC(params:[string, ...(string|number|bigint|ArrayBuffer|URL)[]]) {\r\n\r\n\t\tif (!(params.constructor === Array)) throw new Error (\"callC: params must be array, first arg is function name\");\r\n\t\tif (params.length==0) throw new Error(\"callC: missing function name\");\r\n\r\n\t\tlet cparams:(number|bigint)[]=[];\r\n\t\tlet ci=0;\r\n\t\tfor (let i=1; i < params.length; i++) {\r\n\t\t\tconst p=params[i];\r\n\t\t\tswitch (typeof p) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\tcase 'bigint':\r\n\t\t\t\t\tcparams[ci++]=p;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tcparams[ci++]=await this.putString(p);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\tif (p instanceof URL) {\r\n\t\t\t\t\t\tconst r=await this.fetchAndPutURL(p);\r\n\t\t\t\t\t\tcparams[ci++]=r[0];  // mem index\r\n\t\t\t\t\t\tcparams[ci++]=r[1];   // len\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (p instanceof ArrayBuffer) {\r\n\t\t\t\t\t\tconst r=await this.putArrayBuffer(p);\r\n\t\t\t\t\t\tcparams[ci++]=r;  // mem index\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error (\"callC: invalid object type passed in\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn cparams;\r\n\t}\r\n\r\n\t// free the mallocs; copy array buffer data from malloc back to arraybuffer\r\n\tasync postCallC(cparams:(number|bigint)[], params:[string, ...(string|number|bigint|ArrayBuffer|URL)[]]) {\r\n\r\n\t\tlet ci=0;\r\n\t\tfor (let i=1; i < params.length; i++) {\r\n\t\t\tconst p=params[i];\r\n\t\t\tswitch (typeof p) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\tcase 'bigint':\r\n\t\t\t\t\tci++;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tawait this.callCImpl('free',[cparams[ci]])\r\n\t\t\t\t\tci++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\tif (p instanceof URL) {\r\n\t\t\t\t\t\tawait this.callCImpl('free',[cparams[ci]])\r\n\t\t\t\t\t\tci=ci+2;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (p instanceof ArrayBuffer) {\r\n\t\t\t\t\t\tconst u8=new Uint8Array(p);\r\n\t\t\t\t\t\tconst idx=cparams[ci] as number;\r\n\t\t\t\t\t\tfor (let j=0; j<u8.length; j++) \r\n\t\t\t\t\t\t\tu8[j]=this.mem8[idx+j];   // mod.mem8 is a Uint8Array view of the module's WebAssembly Memory\r\n\t\t\t\t\t\tawait this.callCImpl('free',[idx])\r\n\t\t\t\t\t\tci++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse \r\n\t\t\t\t\t\tthrow new Error (\"postCallC: internal error A\");\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error (\"postCallC: internal error B\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn cparams;\r\n\t}\r\n\r\n\t/*********************************************************************/\r\n\t/*********************************************************************/\r\n\r\n\t// convert a Javascript string into byte sequence that encodes the string using UTF8, or the requested codePage\r\n\tstringToU8(sin:string, codePage=codePageUTF8) {\r\n\r\n\t\tlet ru8:Uint8Array;\r\n\t\tif (codePage==codePageUTF8) {\r\n\t\t\tconst encoder = new TextEncoder();\r\n\t\t\tru8=encoder.encode(sin);\r\n\t\t}\r\n\t\telse if (codePage==codePage1252) {\r\n\t\t\tru8=new Uint8Array(sin.length);\r\n\t\t\tfor (let i = 0; i < sin.length; i++) {\r\n\t\t\t\tru8[i]=to1252(sin[i]);\r\n\t\t\t }\r\n\t\t}\r\n\t\telse if (codePage==codePageASCII) {\r\n\t\t\tru8=new Uint8Array(sin.length);\r\n\t\t\tfor (let i = 0; i < sin.length; i++) {\r\n\t\t\t\tconst r=toASCII(sin[i]);\r\n\t\t\t\tru8[i]=r;\r\n\t\t\t }\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow new Error(\"unknown codePage: \"+codePage);\r\n\t\t}\r\n\r\n\t\treturn ru8;\r\n\t}\r\n\r\n\t// copy a string into existing buffer in the webassembly module memory as utf8 (or specified codePage)\r\n\t// result always null terminated\r\n\tcopyString(buffer:number, buffer_size:number, sin:string, codePage=codePageUTF8):void {\r\n\t\tif (buffer_size<1) throw new Error(\"copyString buffer_size must have length > 0 (room for terminating 0): \"+buffer_size);\r\n\t\t\r\n\t\tconst ru8=this.stringToU8(sin, codePage);\r\n\r\n\t\tlet i;\r\n\t\tfor (i=0; i<ru8.length && i<buffer_size-1; i++)\r\n\t\t\tthis.mem8[buffer+i]=ru8[i];\r\n\r\n\t\tthis.mem8[buffer+i]=0;\r\n\t}\r\n\r\n\t// allocate and copy a string into the webassembly module memory as utf8 (or the specified codePage)\r\n\tasync putString(sin:string, codePage=codePageUTF8) {\r\n\t\tconst ru8=this.stringToU8(sin, codePage);\r\n\t\tconst strIndex:number=await this.malloc(ru8.length+1);\r\n\t\tthis.mem8.set(ru8, strIndex);\r\n\t\tthis.mem8[strIndex+ru8.length]=0;\r\n\r\n\t\treturn strIndex;\r\n\t}\r\n\r\n\t// allocate and copy a Uint8Array into Wasm mod memory\r\n\tasync putU8(u8a:Uint8Array) {\r\n\t\tlet dest:number=await this.malloc(u8a.length); \r\n\t\tthis.mem8.set(u8a, dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\tasync putArrayBuffer(ab:ArrayBuffer) {\r\n\t\tconst u8=new Uint8Array(ab);\r\n\t\treturn this.putU8(u8);\r\n\t}\r\n\r\n\t// given a url, load its contents, and stuff into Wasm memory similar to Unint8Array\r\n\tasync fetchAndPutURL(fnin:URL) {\r\n\r\n\t\tif (!(typeof fnin === 'object' && fnin instanceof URL))\r\n\t\t\tthrow new Error(\"fetchAndPutURL param must be URL\");\r\n\r\n\t\ttry {\r\n\t\t\tlet response=await fetch(fnin);\r\n\t\t\tlet buffer = await response.arrayBuffer();\r\n\t\t\tlet src = new Uint8Array(buffer);\r\n\t\t\tlet dest=await this.putU8(src);\r\n\t\t\treturn [dest, src.length];\r\n\t\t\t\r\n\t\t} catch(err:any) {\r\n\t\t\tconsole.log('fetchAndPutURL Error. URL: '+fnin+'\\n' + err + (err.stack ? \"\\n\" + err.stack : ''));\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tgetLong(idx:number): number {\r\n\t\tconst idx32=Math.floor(idx/4);\r\n\t\tif (idx32*4!=idx) throw new Error(\"getLong passed non long aligned address\")\r\n\t\tif (idx32<0 || idx32 >= this.mem32.length) throw new Error(\"invalid index passed to getLong: \"+idx+\", this.mem32.length: \"+this.mem32.length);\r\n\t\tconst long:number = this.mem32[idx32];\r\n\t\treturn long;\r\n\t}\r\n\t\r\n\tsetLong(idx:number, value:number) {\r\n        const idx32 = Math.floor(idx / 4);\r\n        if (idx32 * 4 != idx)\r\n            throw new Error(\"setLong passed non long aligned address\");\r\n        if (idx32 < 0 || idx32 >= this.mem32.length-1)\r\n            throw new Error(\"invalid index passed to setLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\r\n        this.mem32[idx32]=value;\r\n    }\r\n\r\n\tgetDouble(idx:number): number {\r\n\t\tconst idx64=Math.floor(idx/8);\r\n\t\tif (idx64*8!=idx) throw new Error(\"getLong passed non Float64 aligned address\")\r\n\t\tconst long:number = this.memD[idx64];\r\n\t\treturn long;\r\n\t}\r\n\r\n\tsetDouble(idx:number, value:number) {\r\n\t\tconst idx64=Math.floor(idx/8);\r\n\t\tif (idx64*8!=idx) throw new Error(\"setDouble passed non Float64 aligned address\")\r\n\t\tthis.memD[idx64]=value;\r\n\t}\r\n\r\n\tgetShort(idx:number): number {\r\n\t\tif (idx<0 || idx>= this.mem8.length) throw new Error(\"invalid index passed to getShort: \"+idx);\r\n\t\tconst short:number = this.mem8[idx]+this.mem8[idx+1]*256;\r\n\t\treturn short;\r\n\t}\r\n\r\n\t// get a string out of module memory\r\n\t// null terminated, up until max of (optional) len bytes\r\n\t// len may be longer than the number of characters, if characters are utf-8 encoded\r\n\tgetString(strIndex:number, len?:number, codePage=codePageUTF8): string {\r\n\t\tif (strIndex<0 || strIndex >= this.mem8.length) throw new Error(\"invalid strIndex passed to getString: \"+strIndex);\r\n\r\n\t\tif (len) {\r\n\t\t\tif (len<0 || len+strIndex > this.mem8.length) throw new Error(\"invalid len  passed to getString: \"+len);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlen = this.mem8.indexOf(0, strIndex);\r\n\t\t\tif (len==-1) throw new Error(\"string is not null terminated\");\r\n\t\t\tlen=len-strIndex;\r\n\t\t}\r\n\r\n\t\tlet encodeFormat;\r\n\t\tif (codePage==codePageUTF8) encodeFormat='utf-8';\r\n\t\telse if (codePage==codePage1252) encodeFormat='windows-1252';\r\n\t\telse throw new Error(\"Unsupported codePage: \"+codePage);\r\n\r\n\t\tconst td=new TextDecoder(encodeFormat);\r\n\t\tconst u8todecode=new Uint8Array(this.mem8.buffer, strIndex, len);\r\n\r\n // chrome throws exception when using TextDecoder on SharedArrayBuffer\r\n // BUT, instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error, so don't check directly\r\n\t\tif (this.mem8.buffer instanceof ArrayBuffer) { \r\n\t\t\tconst sout:string = td.decode(u8todecode);\r\n\t\t\treturn sout;\r\n\t\t}\r\n\t\telse {  // must be SharedArrayBuffer\r\n\t\t\tconst regularArrayBuffer = new ArrayBuffer(len);\r\n\t\t\tconst regularUint8Array = new Uint8Array(regularArrayBuffer);\r\n\t\t\tregularUint8Array.set(u8todecode);\r\n\t\t\tconst sout:string = td.decode(regularUint8Array);\r\n\t\t\treturn sout;\r\n\t\t}\r\n\t}\r\n\r\n\t// get a byte array out of module memory when passed in index to [size, dataptr]\r\n\tgetU8Arr(idx:number): Uint8Array {\r\n\t\tif (idx<0 || idx>= this.mem8.length) throw new Error(\"invalid index passed to getU8: \"+idx);\r\n\r\n\t\tconst rv = new Uint32Array( (this.mem8.slice(idx, idx+8)).buffer );\r\n\t\tlet size:number=rv[0];\r\n\t\tlet dataptr:number=rv[1];\r\n\r\n\t\tif (dataptr <0 || dataptr >= (this.mem8.length)) throw new Error(\"invalid idx.dataptr passed to getU8\")\r\n\t\tif (size <0 || size > (this.mem8.length-dataptr)) throw new Error(\"invalid idx.size passed to  getU8\")\r\n\r\n\t\tconst u8=this.mem8.slice(dataptr, dataptr+size);\r\n\t\treturn u8;\r\n\t}\r\n\r\n\t// get a int32 array out of module memory when passed in index to [size, dataptr]\r\n\tgetU32Arr(idx:number): Uint32Array {\r\n\t\tif (idx<0 || idx>= this.mem8.length) throw new Error(\"invalid index passed to getU32: \"+idx);\r\n\r\n\t\tconst rv = new Uint32Array( (this.mem8.slice(idx, idx+8)).buffer );\r\n\t\tlet size:number=rv[0];\r\n\t\tlet dataptr:number=rv[1];\r\n\r\n\t\tif (dataptr <0 || dataptr >= (this.mem8.length)) throw new Error(\"invalid idx.dataptr passed to getU32\")\r\n\t\tif (size <0 || size > (this.mem8.length-dataptr)) throw new Error(\"invalid idx.size passed to  getU32\")\r\n\r\n\t\tif (size%4!=0) throw new Error(\"idx.size is not an integer number of 32 bit words\");\r\n\r\n\t\tconst u32 = new Uint32Array( (this.mem8.slice(dataptr, dataptr+size)).buffer );\r\n\t\treturn u32;\r\n\t}\r\n}\r\n","export class twrFloatUtil {\n    mod;\n    constructor(mod) {\n        this.mod = mod;\n    }\n    atod(strptr, len) {\n        const str = this.mod.getString(strptr, len);\n        const upper = str.trimStart().toUpperCase();\n        if (upper == \"INF\" || upper == \"+INF\" || upper == \"INFINITY\" || upper == \"+INFINITY\")\n            return Number.POSITIVE_INFINITY;\n        else if (upper == \"-INF\" || upper == \"-INFINITY\")\n            return Number.NEGATIVE_INFINITY;\n        else {\n            // allow D for exponent -- old microsoft format they still support in _fctv and I support in my awbasic\n            // parseFloat will handle 'Infinity' and'-Infinity' literal\n            // parseFloat appears to be case sensitive when parsing 'Infinity'\n            // parseFloat ignores leading whitespace\n            // parseFloat() is more lenient than Number() because it ignores trailing invalid characters\n            const r = Number.parseFloat(str.replaceAll('D', 'e').replaceAll('d', 'e'));\n            return r;\n        }\n    }\n    dtoa(buffer, buffer_size, value, max_precision) {\n        if (max_precision == -1) {\n            const r = value.toString();\n            this.mod.copyString(buffer, buffer_size, r);\n        }\n        else {\n            let r = value.toString();\n            if (r.length > max_precision)\n                r = value.toPrecision(max_precision);\n            this.mod.copyString(buffer, buffer_size, r);\n        }\n    }\n    toFixed(buffer, buffer_size, value, decdigits) {\n        const r = value.toFixed(decdigits);\n        this.mod.copyString(buffer, buffer_size, r);\n    }\n    toExponential(buffer, buffer_size, value, decdigits) {\n        const r = value.toExponential(decdigits);\n        this.mod.copyString(buffer, buffer_size, r);\n    }\n    // emulates the MS C lib function _fcvt_s, but doesn't support all ranges of number.\n    // Number.toFixed() has a max size of 100 fractional digits,  and values must be less than 1e+21\n    // Negative exponents must be now smaller than 1e-99\n    // fully-function C version also int he source, but this is the version enabled by default\n    fcvtS(buffer, // char *\n    sizeInBytes, //size_t\n    value, // double\n    fracpart_numdigits, //int\n    dec, // int *\n    sign // int *\n    ) {\n        if (buffer == 0 || sign == 0 || dec == 0 || sizeInBytes < 1)\n            return 1;\n        let digits;\n        let decpos;\n        let s = 0; // default to positive\n        if (Number.isNaN(value)) { /* nan */\n            digits = \"1#QNAN00000000000000000000000000000\".slice(0, fracpart_numdigits + 1);\n            decpos = 1;\n        }\n        else if (!Number.isFinite(value)) { /* infinity */\n            digits = \"1#INF00000000000000000000000000000\".slice(0, fracpart_numdigits + 1);\n            decpos = 1;\n        }\n        else if (value == 0) {\n            digits = \"000000000000000000000000000000000000\".slice(0, fracpart_numdigits);\n            decpos = 0;\n        }\n        else {\n            if (value < 0) {\n                s = 1; // negative\n                value = Math.abs(value);\n            }\n            if (fracpart_numdigits > 100 || value > 1e+21 || value < 1e-99) {\n                this.mod.copyString(buffer, sizeInBytes, \"\");\n                this.mod.mem32[dec] = 0;\n                return 1;\n            }\n            const roundValStr = value.toFixed(fracpart_numdigits);\n            let [intPart = \"\", fracPart = \"\"] = roundValStr.split('.');\n            if (intPart == \"0\")\n                intPart = \"\";\n            if (intPart.length > 0) { // has integer part\n                decpos = intPart.length;\n                digits = intPart + fracPart;\n            }\n            else { // only a fraction\n                digits = fracPart.replace(/^0+/, \"\"); // remove leading zeros\n                decpos = digits.length - fracPart.length;\n            }\n        }\n        if (sizeInBytes - 1 < digits.length)\n            return 1;\n        this.mod.copyString(buffer, sizeInBytes, digits);\n        this.mod.setLong(dec, decpos);\n        this.mod.setLong(sign, s);\n        return 0;\n        /*\n        this version 'works' with larger numbers than using toFixed, but doesn't round correctly\n\n        let decpos=0;\n        let digits:string;\n        if (value!=0) decpos=Math.floor(Math.log10(value))+1;\n    \n        if (decpos>0) { // has integer part\n            const intlen=Math.max(decpos, 0);\n            console.log(\"intlen=\",intlen, \"decpos=\",decpos);\n            const [nonExponent, exponent=0] = value.toPrecision(intlen+fracpart_numdigits).split('e');\n            digits=nonExponent.replace('.', '');\n            digits=digits.replace(/^0+/,\"\");  // remove leading zeros\n        }\n        else { // only a fraction\n            const intpart=Math.trunc(value);\n            const fracpart=value-intpart;\n            const prec=fracpart_numdigits- (-decpos);\n            console.log(\"prec=\",prec);\n            if (prec<1) {\n                digits=\"\";\n            }\n            else {\n                const [nonExponent, exponent=0] = fracpart.toPrecision(prec).split('e');\n                digits=nonExponent.replace('.', '');\n                digits=digits.replace(/^0+/,\"\");\n            }\n        }\n\n        console.log(\"fcvtS value\",value,\"fracpart_numdigits\",fracpart_numdigits);\n        console.log('digits=',digits);\n        console.log('dec=',decpos);\n        console.log(\"sign=\",s);\n    */\n    }\n}\n//# sourceMappingURL=twrfloat.js.map","\r\nimport {twrWasmModuleBase} from \"./twrmodbase.js\"\r\n\r\nexport class twrFloatUtil {\r\n    mod: twrWasmModuleBase;\r\n\r\n    constructor(mod: twrWasmModuleBase) {\r\n        this.mod=mod;\r\n    }\r\n\r\n    atod(strptr:number, len:number):number {\r\n        const str=this.mod.getString(strptr, len);\r\n\r\n        const upper=str.trimStart().toUpperCase();\r\n        if (upper==\"INF\" || upper==\"+INF\" || upper==\"INFINITY\" || upper==\"+INFINITY\")\r\n            return Number.POSITIVE_INFINITY;\r\n        else if (upper==\"-INF\" || upper==\"-INFINITY\")\r\n            return Number.NEGATIVE_INFINITY\r\n        else {\r\n            // allow D for exponent -- old microsoft format they still support in _fctv and I support in my awbasic\r\n\t\t\t\t// parseFloat will handle 'Infinity' and'-Infinity' literal\r\n\t\t\t\t// parseFloat appears to be case sensitive when parsing 'Infinity'\r\n\t\t\t\t// parseFloat ignores leading whitespace\r\n\t\t\t\t// parseFloat() is more lenient than Number() because it ignores trailing invalid characters\r\n            const r=Number.parseFloat(str.replaceAll('D','e').replaceAll('d','e'));\r\n            return r;\r\n        }\r\n    }\r\n\r\n    dtoa(buffer:number, buffer_size:number, value:number, max_precision:number):void {\r\n        if (max_precision==-1) {\r\n            const r=value.toString();\r\n            this.mod.copyString(buffer, buffer_size, r);\r\n        }\r\n        else {\r\n            let r=value.toString();\r\n            if (r.length>max_precision)\r\n                r=value.toPrecision(max_precision);\r\n            this.mod.copyString(buffer, buffer_size, r);\r\n        }\r\n    }\r\n\r\n    toFixed(buffer:number, buffer_size:number, value:number, decdigits:number):void {\r\n        const r=value.toFixed(decdigits);\r\n        this.mod.copyString(buffer, buffer_size, r);\r\n    }\r\n\r\n    toExponential(buffer:number, buffer_size:number, value:number, decdigits:number):void {\r\n        const r=value.toExponential(decdigits);\r\n        this.mod.copyString(buffer, buffer_size, r);\r\n    }\r\n\r\n    // emulates the MS C lib function _fcvt_s, but doesn't support all ranges of number.\r\n    // Number.toFixed() has a max size of 100 fractional digits,  and values must be less than 1e+21\r\n    // Negative exponents must be now smaller than 1e-99\r\n    // fully-function C version also int he source, but this is the version enabled by default\r\n    fcvtS(\r\n        buffer:number,  // char *\r\n        sizeInBytes:number, //size_t\r\n        value:number,  // double\r\n        fracpart_numdigits:number,  //int\r\n        dec:number,  // int *\r\n        sign:number  // int *\r\n     ):number {\r\n\r\n        if (buffer==0 ||sign==0 || dec==0 || sizeInBytes<1) return 1;\r\n\r\n        let digits:string;\r\n        let decpos:number;\r\n        let s=0; // default to positive\r\n\r\n\r\n        if (Number.isNaN(value))  { /* nan */\r\n            digits=\"1#QNAN00000000000000000000000000000\".slice(0, fracpart_numdigits+1);\r\n            decpos=1;\r\n        }\r\n        else if (!Number.isFinite(value)) {    /* infinity */\r\n            digits=\"1#INF00000000000000000000000000000\".slice(0, fracpart_numdigits+1);\r\n            decpos=1;\r\n        }\r\n        else if (value==0) {  \r\n            digits=\"000000000000000000000000000000000000\".slice(0,fracpart_numdigits);\r\n            decpos=0;\r\n        }\r\n        \r\n        else {\r\n\r\n            if (value<0) {\r\n                s=1;  // negative\r\n                value=Math.abs(value);\r\n            }\r\n\r\n            if (fracpart_numdigits>100 || value > 1e+21 || value < 1e-99) {  \r\n                this.mod.copyString(buffer, sizeInBytes, \"\");\r\n                this.mod.mem32[dec]=0;\r\n                return 1;\r\n            }\r\n\r\n            const roundValStr=value.toFixed(fracpart_numdigits);\r\n            let [intPart=\"\", fracPart=\"\"] = roundValStr.split('.');\r\n            if (intPart==\"0\") intPart=\"\";\r\n\r\n            if (intPart.length>0) { // has integer part\r\n                decpos=intPart.length;\r\n                digits=intPart+fracPart;\r\n            }\r\n            else { // only a fraction\r\n                digits=fracPart.replace(/^0+/,\"\");  // remove leading zeros\r\n                decpos=digits.length-fracPart.length;\r\n            }\r\n        }\r\n\r\n        if (sizeInBytes-1 < digits.length) return 1; \r\n        this.mod.copyString(buffer, sizeInBytes, digits);\r\n        this.mod.setLong(dec, decpos);\r\n        this.mod.setLong(sign, s);\r\n\r\n        return 0;\r\n\r\n        /*\r\n        this version 'works' with larger numbers than using toFixed, but doesn't round correctly\r\n\r\n        let decpos=0;\r\n        let digits:string;\r\n        if (value!=0) decpos=Math.floor(Math.log10(value))+1;\r\n    \r\n        if (decpos>0) { // has integer part\r\n            const intlen=Math.max(decpos, 0);\r\n            console.log(\"intlen=\",intlen, \"decpos=\",decpos);\r\n            const [nonExponent, exponent=0] = value.toPrecision(intlen+fracpart_numdigits).split('e');\r\n            digits=nonExponent.replace('.', '');\r\n            digits=digits.replace(/^0+/,\"\");  // remove leading zeros\r\n        }\r\n        else { // only a fraction\r\n            const intpart=Math.trunc(value);\r\n            const fracpart=value-intpart;\r\n            const prec=fracpart_numdigits- (-decpos);\r\n            console.log(\"prec=\",prec);\r\n            if (prec<1) {\r\n                digits=\"\";\r\n            }\r\n            else {\r\n                const [nonExponent, exponent=0] = fracpart.toPrecision(prec).split('e');\r\n                digits=nonExponent.replace('.', '');\r\n                digits=digits.replace(/^0+/,\"\");\r\n            }\r\n        }\r\n\r\n        console.log(\"fcvtS value\",value,\"fracpart_numdigits\",fracpart_numdigits);\r\n        console.log('digits=',digits);\r\n        console.log('dec=',decpos);\r\n        console.log(\"sign=\",s);\r\n    */\r\n\r\n\r\n    }\r\n}","import { twrSharedCircularBuffer } from \"./twrcircular.js\";\nimport { twrSignal } from \"./twrsignal.js\";\nimport { IOTypes } from \"./twrcon.js\";\nimport { twrConsoleRegistry } from \"./twrconreg.js\";\nvar D2DType;\n(function (D2DType) {\n    D2DType[D2DType[\"D2D_FILLRECT\"] = 1] = \"D2D_FILLRECT\";\n    D2DType[D2DType[\"D2D_FILLCODEPOINT\"] = 5] = \"D2D_FILLCODEPOINT\";\n    D2DType[D2DType[\"D2D_SETLINEWIDTH\"] = 10] = \"D2D_SETLINEWIDTH\";\n    D2DType[D2DType[\"D2D_SETFILLSTYLERGBA\"] = 11] = \"D2D_SETFILLSTYLERGBA\";\n    D2DType[D2DType[\"D2D_SETFONT\"] = 12] = \"D2D_SETFONT\";\n    D2DType[D2DType[\"D2D_BEGINPATH\"] = 13] = \"D2D_BEGINPATH\";\n    D2DType[D2DType[\"D2D_MOVETO\"] = 14] = \"D2D_MOVETO\";\n    D2DType[D2DType[\"D2D_LINETO\"] = 15] = \"D2D_LINETO\";\n    D2DType[D2DType[\"D2D_FILL\"] = 16] = \"D2D_FILL\";\n    D2DType[D2DType[\"D2D_STROKE\"] = 17] = \"D2D_STROKE\";\n    D2DType[D2DType[\"D2D_SETSTROKESTYLERGBA\"] = 18] = \"D2D_SETSTROKESTYLERGBA\";\n    D2DType[D2DType[\"D2D_ARC\"] = 19] = \"D2D_ARC\";\n    D2DType[D2DType[\"D2D_STROKERECT\"] = 20] = \"D2D_STROKERECT\";\n    D2DType[D2DType[\"D2D_FILLTEXT\"] = 21] = \"D2D_FILLTEXT\";\n    D2DType[D2DType[\"D2D_IMAGEDATA\"] = 22] = \"D2D_IMAGEDATA\";\n    D2DType[D2DType[\"D2D_PUTIMAGEDATA\"] = 23] = \"D2D_PUTIMAGEDATA\";\n    D2DType[D2DType[\"D2D_BEZIERTO\"] = 24] = \"D2D_BEZIERTO\";\n    D2DType[D2DType[\"D2D_MEASURETEXT\"] = 25] = \"D2D_MEASURETEXT\";\n    D2DType[D2DType[\"D2D_SAVE\"] = 26] = \"D2D_SAVE\";\n    D2DType[D2DType[\"D2D_RESTORE\"] = 27] = \"D2D_RESTORE\";\n    D2DType[D2DType[\"D2D_CREATERADIALGRADIENT\"] = 28] = \"D2D_CREATERADIALGRADIENT\";\n    D2DType[D2DType[\"D2D_SETCOLORSTOP\"] = 29] = \"D2D_SETCOLORSTOP\";\n    D2DType[D2DType[\"D2D_SETFILLSTYLEGRADIENT\"] = 30] = \"D2D_SETFILLSTYLEGRADIENT\";\n    D2DType[D2DType[\"D2D_RELEASEID\"] = 31] = \"D2D_RELEASEID\";\n    D2DType[D2DType[\"D2D_CREATELINEARGRADIENT\"] = 32] = \"D2D_CREATELINEARGRADIENT\";\n    D2DType[D2DType[\"D2D_SETFILLSTYLE\"] = 33] = \"D2D_SETFILLSTYLE\";\n    D2DType[D2DType[\"D2D_SETSTROKESTYLE\"] = 34] = \"D2D_SETSTROKESTYLE\";\n    D2DType[D2DType[\"D2D_CLOSEPATH\"] = 35] = \"D2D_CLOSEPATH\";\n    D2DType[D2DType[\"D2D_RESET\"] = 36] = \"D2D_RESET\";\n    D2DType[D2DType[\"D2D_CLEARRECT\"] = 37] = \"D2D_CLEARRECT\";\n    D2DType[D2DType[\"D2D_SCALE\"] = 38] = \"D2D_SCALE\";\n    D2DType[D2DType[\"D2D_TRANSLATE\"] = 39] = \"D2D_TRANSLATE\";\n    D2DType[D2DType[\"D2D_ROTATE\"] = 40] = \"D2D_ROTATE\";\n    D2DType[D2DType[\"D2D_GETTRANSFORM\"] = 41] = \"D2D_GETTRANSFORM\";\n    D2DType[D2DType[\"D2D_SETTRANSFORM\"] = 42] = \"D2D_SETTRANSFORM\";\n    D2DType[D2DType[\"D2D_RESETTRANSFORM\"] = 43] = \"D2D_RESETTRANSFORM\";\n    D2DType[D2DType[\"D2D_STROKETEXT\"] = 44] = \"D2D_STROKETEXT\";\n    D2DType[D2DType[\"D2D_ROUNDRECT\"] = 45] = \"D2D_ROUNDRECT\";\n    D2DType[D2DType[\"D2D_ELLIPSE\"] = 46] = \"D2D_ELLIPSE\";\n    D2DType[D2DType[\"D2D_QUADRATICCURVETO\"] = 47] = \"D2D_QUADRATICCURVETO\";\n    D2DType[D2DType[\"D2D_SETLINEDASH\"] = 48] = \"D2D_SETLINEDASH\";\n    D2DType[D2DType[\"D2D_GETLINEDASH\"] = 49] = \"D2D_GETLINEDASH\";\n    D2DType[D2DType[\"D2D_ARCTO\"] = 50] = \"D2D_ARCTO\";\n    D2DType[D2DType[\"D2D_GETLINEDASHLENGTH\"] = 51] = \"D2D_GETLINEDASHLENGTH\";\n})(D2DType || (D2DType = {}));\nexport class twrConsoleCanvas {\n    ctx;\n    id;\n    element;\n    props;\n    cmdCompleteSignal;\n    canvasKeys;\n    isAsyncMod;\n    precomputedObjects;\n    constructor(element) {\n        this.isAsyncMod = false; // set to true if getProxyParams called\n        this.precomputedObjects = {};\n        if (!element.getContext)\n            throw new Error(\"attempted to create new twrCanvas with an element that is not a valid HTMLCanvasElement\");\n        this.element = element;\n        const c = element.getContext(\"2d\");\n        if (!c)\n            throw new Error(\"canvas 2D context not found in twrCanvasConstructor\");\n        this.ctx = c;\n        // these two lines are for backwards compatibility with prior version of twr-wasm\n        c.font = \"16 px Courier New\";\n        c.textBaseline = \"top\";\n        this.props = { canvasHeight: element.height, canvasWidth: element.width, type: IOTypes.CANVAS2D };\n        this.id = twrConsoleRegistry.registerConsole(this);\n    }\n    // these are the parameters needed to create a twrConsoleCanvasProxy, paired to us\n    getProxyParams() {\n        this.cmdCompleteSignal = new twrSignal();\n        this.canvasKeys = new twrSharedCircularBuffer(); // tsconfig, lib must be set to 2017 or higher\n        this.isAsyncMod = true;\n        return [\"twrConsoleCanvasProxy\", this.id, this.props, this.cmdCompleteSignal.sharedArray, this.canvasKeys.sharedArray];\n    }\n    getProp(name) {\n        return this.props[name];\n    }\n    // process messages sent from twrConsoleCanvasProxy\n    // these are used to \"remote procedure call\" from the worker thread to the JS Main thread\n    processMessage(msgType, data, callingModule) {\n        const [id, ...params] = data;\n        if (id != this.id)\n            throw new Error(\"internal error\"); // should never happen\n        switch (msgType) {\n            case \"canvas2d-drawseq\":\n                {\n                    const [ds] = params;\n                    this.drawSeq(ds, callingModule);\n                    break;\n                }\n            default:\n                return false;\n        }\n        return true;\n    }\n    /* see draw2d.h for structs that match */\n    drawSeq(ds, owner) {\n        //console.log(\"twr::Canvas enter drawSeq\");\n        if (!this.ctx)\n            return;\n        const insHdrSize = 16;\n        let currentInsHdr = owner.getLong(ds); /* ds->start */\n        const lastInsHdr = owner.getLong(ds + 4); /* ds->last */\n        let currentInsParams = currentInsHdr + insHdrSize;\n        //console.log(\"instruction start, last \",ins.toString(16), lastins.toString(16));\n        let nextInsHdr;\n        //let insCount=0;\n        while (1) {\n            //insCount++;\n            const type = owner.getLong(currentInsHdr + 4); /* hdr->type */\n            if (0 /*type!=D2DType.D2D_FILLRECT*/) {\n                console.log(\"ins\", currentInsHdr);\n                console.log(\"hdr.next\", owner.mem8[currentInsHdr], owner.mem8[currentInsHdr + 1], owner.mem8[currentInsHdr + 2], owner.mem8[currentInsHdr + 3]);\n                console.log(\"hdr.type\", owner.mem8[currentInsHdr + 4], owner.mem8[currentInsHdr + 5]);\n                console.log(\"next 4 bytes\", owner.mem8[currentInsHdr + 6], owner.mem8[currentInsHdr + 7], owner.mem8[currentInsHdr + 8], owner.mem8[currentInsHdr + 9]);\n                console.log(\"and 4 more \", owner.mem8[currentInsHdr + 10], owner.mem8[currentInsHdr + 11], owner.mem8[currentInsHdr + 12], owner.mem8[currentInsHdr + 13]);\n                //console.log(\"ins, type, next is \", ins.toString(16), type.toString(16), next.toString(16));\n            }\n            switch (type) {\n                case D2DType.D2D_FILLRECT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const w = owner.getDouble(currentInsParams + 16);\n                        const h = owner.getDouble(currentInsParams + 24);\n                        this.ctx.fillRect(x, y, w, h);\n                    }\n                    break;\n                case D2DType.D2D_STROKERECT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const w = owner.getDouble(currentInsParams + 16);\n                        const h = owner.getDouble(currentInsParams + 24);\n                        this.ctx.strokeRect(x, y, w, h);\n                    }\n                    break;\n                case D2DType.D2D_FILLCODEPOINT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const c = owner.getLong(currentInsParams + 16);\n                        let txt = String.fromCodePoint(c);\n                        this.ctx.fillText(txt, x, y);\n                    }\n                    break;\n                case D2DType.D2D_FILLTEXT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const codePage = owner.getLong(currentInsParams + 20);\n                        const strPointer = owner.getLong(currentInsParams + 16);\n                        const str = owner.getString(strPointer, undefined, codePage);\n                        //console.log(\"filltext \",x,y,str)\n                        this.ctx.fillText(str, x, y);\n                    }\n                    break;\n                case D2DType.D2D_MEASURETEXT:\n                    {\n                        const codePage = owner.getLong(currentInsParams + 8);\n                        const str = owner.getString(owner.getLong(currentInsParams), undefined, codePage);\n                        const tmidx = owner.getLong(currentInsParams + 4);\n                        const tm = this.ctx.measureText(str);\n                        owner.setDouble(tmidx + 0, tm.actualBoundingBoxAscent);\n                        owner.setDouble(tmidx + 8, tm.actualBoundingBoxDescent);\n                        owner.setDouble(tmidx + 16, tm.actualBoundingBoxLeft);\n                        owner.setDouble(tmidx + 24, tm.actualBoundingBoxRight);\n                        owner.setDouble(tmidx + 32, tm.fontBoundingBoxAscent);\n                        owner.setDouble(tmidx + 40, tm.fontBoundingBoxDescent);\n                        owner.setDouble(tmidx + 48, tm.width);\n                    }\n                    break;\n                case D2DType.D2D_SETFONT:\n                    {\n                        const fontPointer = owner.getLong(currentInsParams);\n                        const str = owner.getString(fontPointer);\n                        this.ctx.font = str;\n                    }\n                    break;\n                case D2DType.D2D_SETFILLSTYLERGBA:\n                    {\n                        const color = owner.getLong(currentInsParams);\n                        const cssColor = \"#\" + (\"00000000\" + color.toString(16)).slice(-8);\n                        this.ctx.fillStyle = cssColor;\n                        //console.log(\"fillstyle: \", this.ctx.fillStyle, \":\", cssColor,\":\", color)\n                    }\n                    break;\n                case D2DType.D2D_SETSTROKESTYLERGBA:\n                    {\n                        const color = owner.getLong(currentInsParams);\n                        const cssColor = \"#\" + (\"00000000\" + color.toString(16)).slice(-8);\n                        this.ctx.strokeStyle = cssColor;\n                    }\n                    break;\n                case D2DType.D2D_SETFILLSTYLE:\n                    {\n                        const cssColorPointer = owner.getLong(currentInsParams);\n                        const cssColor = owner.getString(cssColorPointer);\n                        this.ctx.fillStyle = cssColor;\n                    }\n                    break;\n                case D2DType.D2D_SETSTROKESTYLE:\n                    {\n                        const cssColorPointer = owner.getLong(currentInsParams);\n                        const cssColor = owner.getString(cssColorPointer);\n                        this.ctx.strokeStyle = cssColor;\n                    }\n                    break;\n                case D2DType.D2D_SETLINEWIDTH:\n                    {\n                        const width = owner.getDouble(currentInsParams);\n                        this.ctx.lineWidth = width;\n                        //console.log(\"twrCanvas D2D_SETLINEWIDTH: \", this.ctx.lineWidth);\n                    }\n                    break;\n                case D2DType.D2D_MOVETO:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        this.ctx.moveTo(x, y);\n                    }\n                    break;\n                case D2DType.D2D_LINETO:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        this.ctx.lineTo(x, y);\n                    }\n                    break;\n                case D2DType.D2D_BEZIERTO:\n                    {\n                        const cp1x = owner.getDouble(currentInsParams);\n                        const cp1y = owner.getDouble(currentInsParams + 8);\n                        const cp2x = owner.getDouble(currentInsParams + 16);\n                        const cp2y = owner.getDouble(currentInsParams + 24);\n                        const x = owner.getDouble(currentInsParams + 32);\n                        const y = owner.getDouble(currentInsParams + 40);\n                        this.ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n                    }\n                    break;\n                case D2DType.D2D_BEGINPATH:\n                    {\n                        this.ctx.beginPath();\n                    }\n                    break;\n                case D2DType.D2D_FILL:\n                    {\n                        this.ctx.fill();\n                    }\n                    break;\n                case D2DType.D2D_SAVE:\n                    {\n                        this.ctx.save();\n                    }\n                    break;\n                case D2DType.D2D_RESTORE:\n                    {\n                        this.ctx.restore();\n                    }\n                    break;\n                case D2DType.D2D_STROKE:\n                    {\n                        this.ctx.stroke();\n                    }\n                    break;\n                case D2DType.D2D_ARC:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const radius = owner.getDouble(currentInsParams + 16);\n                        const startAngle = owner.getDouble(currentInsParams + 24);\n                        const endAngle = owner.getDouble(currentInsParams + 32);\n                        const counterClockwise = (owner.getLong(currentInsParams + 40) != 0);\n                        this.ctx.arc(x, y, radius, startAngle, endAngle, counterClockwise);\n                    }\n                    break;\n                case D2DType.D2D_IMAGEDATA:\n                    {\n                        const start = owner.getLong(currentInsParams);\n                        const length = owner.getLong(currentInsParams + 4);\n                        const width = owner.getLong(currentInsParams + 8);\n                        const height = owner.getLong(currentInsParams + 12);\n                        const id = owner.getLong(currentInsParams + 16);\n                        if (id in this.precomputedObjects)\n                            console.log(\"warning: D2D_IMAGEDATA ID already exists.\");\n                        if (this.isAsyncMod) { // Uint8ClampedArray doesn't support shared memory\n                            this.precomputedObjects[id] = { mem8: new Uint8Array(owner.memory.buffer, start, length), width: width, height: height };\n                        }\n                        else {\n                            const z = new Uint8ClampedArray(owner.memory.buffer, start, length);\n                            this.precomputedObjects[id] = new ImageData(z, width, height);\n                        }\n                    }\n                    break;\n                case D2DType.D2D_CREATERADIALGRADIENT:\n                    {\n                        const x0 = owner.getDouble(currentInsParams);\n                        const y0 = owner.getDouble(currentInsParams + 8);\n                        const radius0 = owner.getDouble(currentInsParams + 16);\n                        const x1 = owner.getDouble(currentInsParams + 24);\n                        const y1 = owner.getDouble(currentInsParams + 32);\n                        const radius1 = owner.getDouble(currentInsParams + 40);\n                        const id = owner.getLong(currentInsParams + 48);\n                        let gradient = this.ctx.createRadialGradient(x0, y0, radius0, x1, y1, radius1);\n                        if (id in this.precomputedObjects)\n                            console.log(\"warning: D2D_CREATERADIALGRADIENT ID already exists.\");\n                        this.precomputedObjects[id] = gradient;\n                    }\n                    break;\n                case D2DType.D2D_CREATELINEARGRADIENT:\n                    {\n                        const x0 = owner.getDouble(currentInsParams);\n                        const y0 = owner.getDouble(currentInsParams + 8);\n                        const x1 = owner.getDouble(currentInsParams + 16);\n                        const y1 = owner.getDouble(currentInsParams + 24);\n                        const id = owner.getLong(currentInsParams + 32);\n                        let gradient = this.ctx.createLinearGradient(x0, y0, x1, y1);\n                        if (id in this.precomputedObjects)\n                            console.log(\"warning: D2D_CREATELINEARGRADIENT ID already exists.\");\n                        this.precomputedObjects[id] = gradient;\n                    }\n                    break;\n                case D2DType.D2D_SETCOLORSTOP:\n                    {\n                        const id = owner.getLong(currentInsParams);\n                        const pos = owner.getLong(currentInsParams + 4);\n                        const cssColorPointer = owner.getLong(currentInsParams + 8);\n                        const cssColor = owner.getString(cssColorPointer);\n                        if (!(id in this.precomputedObjects))\n                            throw new Error(\"D2D_SETCOLORSTOP with invalid ID: \" + id);\n                        const gradient = this.precomputedObjects[id];\n                        gradient.addColorStop(pos, cssColor);\n                    }\n                    break;\n                case D2DType.D2D_SETFILLSTYLEGRADIENT:\n                    {\n                        const id = owner.getLong(currentInsParams);\n                        if (!(id in this.precomputedObjects))\n                            throw new Error(\"D2D_SETFILLSTYLEGRADIENT with invalid ID: \" + id);\n                        const gradient = this.precomputedObjects[id];\n                        this.ctx.fillStyle = gradient;\n                    }\n                    break;\n                case D2DType.D2D_RELEASEID:\n                    {\n                        const id = owner.getLong(currentInsParams);\n                        if (this.precomputedObjects[id])\n                            delete this.precomputedObjects[id];\n                        else\n                            console.log(\"warning: D2D_RELEASEID with undefined ID \", id);\n                    }\n                    break;\n                case D2DType.D2D_PUTIMAGEDATA:\n                    {\n                        const id = owner.getLong(currentInsParams);\n                        const dx = owner.getLong(currentInsParams + 4);\n                        const dy = owner.getLong(currentInsParams + 8);\n                        const dirtyX = owner.getLong(currentInsParams + 12);\n                        const dirtyY = owner.getLong(currentInsParams + 16);\n                        const dirtyWidth = owner.getLong(currentInsParams + 20);\n                        const dirtyHeight = owner.getLong(currentInsParams + 24);\n                        if (!(id in this.precomputedObjects))\n                            throw new Error(\"D2D_PUTIMAGEDATA with invalid ID: \" + id);\n                        //console.log(\"D2D_PUTIMAGEDATA\",start, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight, this.imageData[start]);\n                        let imgData;\n                        if (this.isAsyncMod) { // Uint8ClampedArray doesn't support shared memory, so copy the memory\n                            //console.log(\"D2D_PUTIMAGEDATA wasmModuleAsync\");\n                            const z = this.precomputedObjects[id]; // Uint8Array\n                            const ca = Uint8ClampedArray.from(z.mem8); // shallow copy\n                            imgData = new ImageData(ca, z.width, z.height);\n                        }\n                        else {\n                            imgData = this.precomputedObjects[id];\n                        }\n                        if (dirtyWidth == 0 && dirtyHeight == 0) {\n                            this.ctx.putImageData(imgData, dx, dy);\n                        }\n                        else {\n                            this.ctx.putImageData(imgData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n                        }\n                    }\n                    break;\n                case D2DType.D2D_CLOSEPATH:\n                    {\n                        this.ctx.closePath();\n                    }\n                    break;\n                case D2DType.D2D_RESET:\n                    {\n                        this.ctx.reset();\n                    }\n                    break;\n                case D2DType.D2D_CLEARRECT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const w = owner.getDouble(currentInsParams + 16);\n                        const h = owner.getDouble(currentInsParams + 24);\n                        this.ctx.clearRect(x, y, w, h);\n                    }\n                    break;\n                case D2DType.D2D_SCALE:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        this.ctx.scale(x, y);\n                    }\n                    break;\n                case D2DType.D2D_TRANSLATE:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        this.ctx.translate(x, y);\n                    }\n                    break;\n                case D2DType.D2D_ROTATE:\n                    {\n                        const angle = owner.getDouble(currentInsParams);\n                        this.ctx.rotate(angle);\n                    }\n                    break;\n                case D2DType.D2D_GETTRANSFORM:\n                    {\n                        const matrix_ptr = owner.getLong(currentInsParams);\n                        const transform = this.ctx.getTransform();\n                        owner.setDouble(matrix_ptr + 0, transform.a);\n                        owner.setDouble(matrix_ptr + 8, transform.b);\n                        owner.setDouble(matrix_ptr + 16, transform.c);\n                        owner.setDouble(matrix_ptr + 24, transform.d);\n                        owner.setDouble(matrix_ptr + 32, transform.e);\n                        owner.setDouble(matrix_ptr + 40, transform.f);\n                    }\n                    break;\n                case D2DType.D2D_SETTRANSFORM:\n                    {\n                        const a = owner.getDouble(currentInsParams);\n                        const b = owner.getDouble(currentInsParams + 8);\n                        const c = owner.getDouble(currentInsParams + 16);\n                        const d = owner.getDouble(currentInsParams + 24);\n                        const e = owner.getDouble(currentInsParams + 32);\n                        const f = owner.getDouble(currentInsParams + 40);\n                        this.ctx.setTransform(a, b, c, d, e, f);\n                    }\n                    break;\n                case D2DType.D2D_RESETTRANSFORM:\n                    {\n                        this.ctx.resetTransform();\n                    }\n                    break;\n                case D2DType.D2D_STROKETEXT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const codePage = owner.getLong(currentInsParams + 20);\n                        const strPointer = owner.getLong(currentInsParams + 16);\n                        const str = owner.getString(strPointer, undefined, codePage);\n                        this.ctx.strokeText(str, x, y);\n                    }\n                    break;\n                case D2DType.D2D_ROUNDRECT:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const width = owner.getDouble(currentInsParams + 16);\n                        const height = owner.getDouble(currentInsParams + 24);\n                        const radii = owner.getDouble(currentInsParams + 32);\n                        this.ctx.roundRect(x, y, width, height, radii);\n                    }\n                    break;\n                case D2DType.D2D_ELLIPSE:\n                    {\n                        const x = owner.getDouble(currentInsParams);\n                        const y = owner.getDouble(currentInsParams + 8);\n                        const radiusX = owner.getDouble(currentInsParams + 16);\n                        const radiusY = owner.getDouble(currentInsParams + 24);\n                        const rotation = owner.getDouble(currentInsParams + 32);\n                        const startAngle = owner.getDouble(currentInsParams + 40);\n                        const endAngle = owner.getDouble(currentInsParams + 48);\n                        const counterClockwise = (owner.getLong(currentInsParams + 56) != 0);\n                        this.ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterClockwise);\n                    }\n                    break;\n                case D2DType.D2D_QUADRATICCURVETO:\n                    {\n                        const cpx = owner.getDouble(currentInsParams);\n                        const cpy = owner.getDouble(currentInsParams + 8);\n                        const x = owner.getDouble(currentInsParams + 16);\n                        const y = owner.getDouble(currentInsParams + 24);\n                        this.ctx.quadraticCurveTo(cpx, cpy, x, y);\n                    }\n                    break;\n                case D2DType.D2D_SETLINEDASH:\n                    {\n                        const segment_len = owner.getLong(currentInsParams);\n                        const seg_ptr = owner.getLong(currentInsParams + 4);\n                        let segments = [];\n                        for (let i = 0; i < segment_len; i++) {\n                            segments[i] = owner.getDouble(seg_ptr + i * 8);\n                        }\n                        this.ctx.setLineDash(segments);\n                    }\n                    break;\n                case D2DType.D2D_GETLINEDASH:\n                    {\n                        const segments = this.ctx.getLineDash();\n                        const buffer_length = owner.getLong(currentInsParams);\n                        const buffer_ptr = owner.getLong(currentInsParams + 4);\n                        const segment_length_ptr = currentInsParams + 8;\n                        owner.setLong(segment_length_ptr, segments.length);\n                        if (segments.length > 0) {\n                            for (let i = 0; i < Math.min(segments.length, buffer_length); i++) {\n                                owner.setDouble(buffer_ptr + i * 8, segments[i]);\n                            }\n                            if (segments.length > buffer_length) {\n                                console.log(\"warning: D2D_GETLINEDASH exceeded given max_length, truncating excess\");\n                            }\n                        }\n                    }\n                    break;\n                case D2DType.D2D_ARCTO:\n                    {\n                        const x1 = owner.getDouble(currentInsParams);\n                        const y1 = owner.getDouble(currentInsParams + 8);\n                        const x2 = owner.getDouble(currentInsParams + 16);\n                        const y2 = owner.getDouble(currentInsParams + 24);\n                        const radius = owner.getDouble(currentInsParams + 32);\n                        this.ctx.arcTo(x1, y1, x2, y2, radius);\n                    }\n                    break;\n                case D2DType.D2D_GETLINEDASHLENGTH:\n                    {\n                        owner.setLong(currentInsParams, this.ctx.getLineDash().length);\n                    }\n                    break;\n                default:\n                    throw new Error(\"unimplemented or unknown Sequence Type in drawSeq: \" + type);\n            }\n            nextInsHdr = owner.getLong(currentInsHdr); /* hdr->next */\n            if (nextInsHdr == 0) {\n                if (currentInsHdr != lastInsHdr)\n                    throw new Error(\"assert type error in twrcanvas, ins!=lastins\");\n                break;\n            }\n            currentInsHdr = nextInsHdr;\n            currentInsParams = currentInsHdr + insHdrSize;\n        }\n        if (this.cmdCompleteSignal)\n            this.cmdCompleteSignal.signal();\n        //console.log(\"Canvas.drawSeq() completed  with instruction count of \", insCount);\n    }\n}\nexport class twrConsoleCanvasProxy {\n    canvasKeys;\n    drawCompleteSignal;\n    props;\n    id;\n    constructor(params) {\n        const [className, id, props, signalBuffer, canvasKeysBuffer] = params;\n        this.drawCompleteSignal = new twrSignal(signalBuffer);\n        this.canvasKeys = new twrSharedCircularBuffer(canvasKeysBuffer);\n        this.props = props;\n        this.id = id;\n        //console.log(\"Create New twrCanvasProxy: \",this.props)\n    }\n    charIn() {\n        //ctx.commit(); not avail in chrome\n        //postMessage([\"debug\", 'x']);\n        return this.canvasKeys.readWait(); // wait for a key, then read it\n    }\n    inkey() {\n        if (this.canvasKeys.isEmpty())\n            return 0;\n        else\n            return this.charIn();\n    }\n    // note that this implementation does not allow a property to change post creation of an instance of this class\n    getProp(propName) {\n        return this.props[propName];\n    }\n    drawSeq(ds) {\n        this.drawCompleteSignal.reset();\n        postMessage([\"canvas2d-drawseq\", [this.id, ds]]);\n        this.drawCompleteSignal.wait();\n    }\n}\n//# sourceMappingURL=twrcanvas.js.map","import {twrWasmModuleBase} from \"./twrmodbase.js\"\r\nimport {twrSharedCircularBuffer} from \"./twrcircular.js\";\r\nimport {twrSignal} from \"./twrsignal.js\";\r\nimport {IConsoleCanvas, IConsoleCanvasProxy, ICanvasProps, TConsoleCanvasProxyParams, IOTypes} from \"./twrcon.js\";\r\nimport {twrConsoleRegistry} from \"./twrconreg.js\"\r\n\r\nenum D2DType {\r\n    D2D_FILLRECT=1,\r\n    D2D_FILLCODEPOINT=5,\r\n    D2D_SETLINEWIDTH=10,\r\n    D2D_SETFILLSTYLERGBA=11,\r\n    D2D_SETFONT=12,\r\n    D2D_BEGINPATH=13,\r\n    D2D_MOVETO=14,\r\n    D2D_LINETO=15,\r\n    D2D_FILL=16,\r\n    D2D_STROKE=17,\r\n    D2D_SETSTROKESTYLERGBA=18,\r\n    D2D_ARC=19,\r\n    D2D_STROKERECT=20,\r\n    D2D_FILLTEXT=21,\r\n    D2D_IMAGEDATA=22,\r\n    D2D_PUTIMAGEDATA=23,\r\n    D2D_BEZIERTO=24,\r\n    D2D_MEASURETEXT=25,\r\n    D2D_SAVE=26,\r\n    D2D_RESTORE=27,\r\n    D2D_CREATERADIALGRADIENT=28,\r\n    D2D_SETCOLORSTOP=29,\r\n    D2D_SETFILLSTYLEGRADIENT=30,\r\n    D2D_RELEASEID=31,\r\n    D2D_CREATELINEARGRADIENT=32,\r\n    D2D_SETFILLSTYLE=33,\r\n    D2D_SETSTROKESTYLE=34,\r\n    D2D_CLOSEPATH=35,\r\n    D2D_RESET=36,\r\n    D2D_CLEARRECT=37,\r\n    D2D_SCALE=38,\r\n    D2D_TRANSLATE=39,\r\n    D2D_ROTATE=40,\r\n    D2D_GETTRANSFORM = 41,\r\n    D2D_SETTRANSFORM = 42,\r\n    D2D_RESETTRANSFORM = 43,\r\n    D2D_STROKETEXT = 44,\r\n    D2D_ROUNDRECT = 45,\r\n    D2D_ELLIPSE = 46,\r\n    D2D_QUADRATICCURVETO = 47,\r\n    D2D_SETLINEDASH = 48,\r\n    D2D_GETLINEDASH = 49,\r\n    D2D_ARCTO = 50,\r\n    D2D_GETLINEDASHLENGTH = 51,\r\n}\r\n\r\nexport class twrConsoleCanvas implements IConsoleCanvas {\r\n   ctx:CanvasRenderingContext2D;\r\n   id:number;\r\n   element:HTMLCanvasElement\r\n   props:ICanvasProps;\r\n   cmdCompleteSignal?:twrSignal;\r\n   canvasKeys?: twrSharedCircularBuffer;\r\n   isAsyncMod:boolean;\r\n   precomputedObjects: {  [index: number]: \r\n      (ImageData | \r\n      {mem8:Uint8Array, width:number, height:number})  |\r\n      CanvasGradient\r\n   };\r\n\r\n   constructor(element:HTMLCanvasElement) {\r\n      this.isAsyncMod=false; // set to true if getProxyParams called\r\n\r\n      this.precomputedObjects={};\r\n\r\n      if (!element.getContext) throw new Error(\"attempted to create new twrCanvas with an element that is not a valid HTMLCanvasElement\");\r\n      this.element=element;\r\n\r\n      const c=element.getContext(\"2d\");\r\n      if (!c) throw new Error(\"canvas 2D context not found in twrCanvasConstructor\");\r\n      this.ctx=c;\r\n\r\n      // these two lines are for backwards compatibility with prior version of twr-wasm\r\n      c.font = \"16 px Courier New\";\r\n      c.textBaseline=\"top\";\r\n\r\n      this.props = {canvasHeight: element.height, canvasWidth: element.width, type: IOTypes.CANVAS2D}; \r\n      this.id=twrConsoleRegistry.registerConsole(this);\r\n   }\r\n\r\n   // these are the parameters needed to create a twrConsoleCanvasProxy, paired to us\r\n   getProxyParams() : TConsoleCanvasProxyParams {\r\n      this.cmdCompleteSignal=new twrSignal();\r\n      this.canvasKeys = new twrSharedCircularBuffer();  // tsconfig, lib must be set to 2017 or higher\r\n      this.isAsyncMod=true;\r\n      return [\"twrConsoleCanvasProxy\", this.id, this.props, this.cmdCompleteSignal.sharedArray, this.canvasKeys.sharedArray];\r\n   }\r\n\r\n    getProp(name:keyof ICanvasProps): number {\r\n      return this.props[name];\r\n   }\r\n\r\n   // process messages sent from twrConsoleCanvasProxy\r\n   // these are used to \"remote procedure call\" from the worker thread to the JS Main thread\r\n   processMessage(msgType:string, data:[number, ...any[]], callingModule:twrWasmModuleBase):boolean {\r\n      const [id, ...params] = data;\r\n      if (id!=this.id) throw new Error(\"internal error\");  // should never happen\r\n\r\n      switch (msgType) {\r\n         case \"canvas2d-drawseq\":\r\n         {\r\n            const [ds] =  params;\r\n            this.drawSeq(ds, callingModule);\r\n            break;\r\n         }\r\n\r\n         default:\r\n            return false;\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   /* see draw2d.h for structs that match */\r\n   drawSeq(ds:number, owner:twrWasmModuleBase) {\r\n      //console.log(\"twr::Canvas enter drawSeq\");\r\n      if (!this.ctx) return;\r\n        const insHdrSize = 16;\r\n        let currentInsHdr=owner.getLong(ds);  /* ds->start */\r\n        const lastInsHdr=owner.getLong(ds+4);  /* ds->last */\r\n        let currentInsParams = currentInsHdr + insHdrSize;\r\n        //console.log(\"instruction start, last \",ins.toString(16), lastins.toString(16));\r\n\r\n        let nextInsHdr:number;\r\n        //let insCount=0;\r\n        \r\n        while (1) {\r\n\r\n         //insCount++;\r\n\r\n            const type:D2DType=owner.getLong(currentInsHdr+4);    /* hdr->type */\r\n            if (0/*type!=D2DType.D2D_FILLRECT*/) {\r\n                console.log(\"ins\",currentInsHdr)\r\n                console.log(\"hdr.next\",owner.mem8[currentInsHdr],owner.mem8[currentInsHdr+1],owner.mem8[currentInsHdr+2],owner.mem8[currentInsHdr+3]);\r\n                console.log(\"hdr.type\",owner.mem8[currentInsHdr+4],owner.mem8[currentInsHdr+5]);\r\n                console.log(\"next 4 bytes\", owner.mem8[currentInsHdr+6],owner.mem8[currentInsHdr+7],owner.mem8[currentInsHdr+8],owner.mem8[currentInsHdr+9]);\r\n                console.log(\"and 4 more \", owner.mem8[currentInsHdr+10],owner.mem8[currentInsHdr+11],owner.mem8[currentInsHdr+12],owner.mem8[currentInsHdr+13]);\r\n                //console.log(\"ins, type, next is \", ins.toString(16), type.toString(16), next.toString(16));\r\n             }\r\n            switch (type) {\r\n                case D2DType.D2D_FILLRECT:\r\n                {\r\n                    const x=owner.getDouble(currentInsParams);\r\n                    const y=owner.getDouble(currentInsParams+8);\r\n                    const w=owner.getDouble(currentInsParams+16);\r\n                    const h=owner.getDouble(currentInsParams+24);\r\n                    this.ctx.fillRect(x, y, w, h);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_STROKERECT:\r\n                {\r\n                    const x=owner.getDouble(currentInsParams);\r\n                    const y=owner.getDouble(currentInsParams+8);\r\n                    const w=owner.getDouble(currentInsParams+16);\r\n                    const h=owner.getDouble(currentInsParams+24);\r\n                    this.ctx.strokeRect(x, y, w, h);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_FILLCODEPOINT:\r\n                {\r\n                    const x=owner.getDouble(currentInsParams);\r\n                    const y=owner.getDouble(currentInsParams+8);\r\n                    const c=owner.getLong(currentInsParams+16);\r\n                    let txt=String.fromCodePoint(c);\r\n                    this.ctx.fillText(txt, x, y);\r\n                }\r\n                    break;\r\n\r\n                \r\n                case D2DType.D2D_FILLTEXT:\r\n                {\r\n                    const x=owner.getDouble(currentInsParams);\r\n                    const y=owner.getDouble(currentInsParams+8);\r\n                    const codePage=owner.getLong(currentInsParams+20);\r\n                    const strPointer = owner.getLong(currentInsParams+16);\r\n                    const str=owner.getString(strPointer, undefined, codePage);\r\n\r\n                    //console.log(\"filltext \",x,y,str)\r\n    \r\n                    this.ctx.fillText(str, x, y);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_MEASURETEXT:\r\n                {\r\n                    const codePage=owner.getLong(currentInsParams+8);\r\n                    const str=owner.getString(owner.getLong(currentInsParams), undefined, codePage);\r\n                    const tmidx=owner.getLong(currentInsParams+4);\r\n    \r\n                    const tm=this.ctx.measureText(str);\r\n                    owner.setDouble(tmidx+0, tm.actualBoundingBoxAscent);\r\n                    owner.setDouble(tmidx+8, tm.actualBoundingBoxDescent);\r\n                    owner.setDouble(tmidx+16, tm.actualBoundingBoxLeft);\r\n                    owner.setDouble(tmidx+24, tm.actualBoundingBoxRight);\r\n                    owner.setDouble(tmidx+32, tm.fontBoundingBoxAscent);\r\n                    owner.setDouble(tmidx+40, tm.fontBoundingBoxDescent);\r\n                    owner.setDouble(tmidx+48, tm.width);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_SETFONT:\r\n                {\r\n                    const fontPointer = owner.getLong(currentInsParams);\r\n                    const str=owner.getString(fontPointer);\r\n                    this.ctx.font=str;\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_SETFILLSTYLERGBA:\r\n                {\r\n                    const color=owner.getLong(currentInsParams); \r\n                    const cssColor= \"#\"+(\"00000000\" + color.toString(16)).slice(-8);\r\n                    this.ctx.fillStyle = cssColor;\r\n                    //console.log(\"fillstyle: \", this.ctx.fillStyle, \":\", cssColor,\":\", color)\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_SETSTROKESTYLERGBA:\r\n                {\r\n                    const color=owner.getLong(currentInsParams); \r\n                    const cssColor= \"#\"+(\"00000000\" + color.toString(16)).slice(-8);\r\n                    this.ctx.strokeStyle = cssColor;\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_SETFILLSTYLE:\r\n                {\r\n                    const cssColorPointer = owner.getLong(currentInsParams);\r\n                    const cssColor= owner.getString(cssColorPointer);\r\n                    this.ctx.fillStyle = cssColor;\r\n                }\r\n                    break\r\n\r\n                case D2DType.D2D_SETSTROKESTYLE:\r\n                {\r\n                    const cssColorPointer = owner.getLong(currentInsParams);\r\n                    const cssColor= owner.getString(cssColorPointer);\r\n                    this.ctx.strokeStyle = cssColor;\r\n                }\r\n                    break\r\n\r\n                case D2DType.D2D_SETLINEWIDTH:\r\n                {\r\n                    const width=owner.getDouble(currentInsParams);  \r\n                    this.ctx.lineWidth=width;\r\n                    //console.log(\"twrCanvas D2D_SETLINEWIDTH: \", this.ctx.lineWidth);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_MOVETO:\r\n                {\r\n                    const x=owner.getDouble(currentInsParams);\r\n                    const y=owner.getDouble(currentInsParams+8);\r\n                    this.ctx.moveTo(x, y);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_LINETO:\r\n                {\r\n                    const x=owner.getDouble(currentInsParams);\r\n                    const y=owner.getDouble(currentInsParams+8);\r\n                    this.ctx.lineTo(x, y);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_BEZIERTO:\r\n                {\r\n                    const cp1x=owner.getDouble(currentInsParams);\r\n                    const cp1y=owner.getDouble(currentInsParams+8);\r\n                    const cp2x=owner.getDouble(currentInsParams+16);\r\n                    const cp2y=owner.getDouble(currentInsParams+24);\r\n                    const x=owner.getDouble(currentInsParams+32);\r\n                    const y=owner.getDouble(currentInsParams+40);\r\n                    this.ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\r\n                }\r\n                    break;\r\n\r\n            case D2DType.D2D_BEGINPATH:\r\n            {\r\n               this.ctx.beginPath();\r\n            }\r\n               break;\r\n\r\n            case D2DType.D2D_FILL:\r\n            {\r\n               this.ctx.fill();\r\n            }\r\n               break;\r\n\r\n            case D2DType.D2D_SAVE:\r\n            {\r\n               this.ctx.save();\r\n            }\r\n               break;\r\n\r\n            case D2DType.D2D_RESTORE:\r\n            {\r\n               this.ctx.restore();\r\n            }\r\n               break;\r\n\r\n            case D2DType.D2D_STROKE:\r\n            {\r\n               this.ctx.stroke();\r\n            }\r\n               break;\r\n\r\n                case D2DType.D2D_ARC:\r\n                {\r\n                    const x=owner.getDouble(currentInsParams);\r\n                    const y=owner.getDouble(currentInsParams+8);\r\n                    const radius=owner.getDouble(currentInsParams+16);\r\n                    const startAngle=owner.getDouble(currentInsParams+24);\r\n                    const endAngle=owner.getDouble(currentInsParams+32);\r\n                    const counterClockwise= (owner.getLong(currentInsParams+40)!=0);\r\n\r\n               this.ctx.arc(x, y, radius, startAngle, endAngle, counterClockwise)\r\n            }\r\n               break;\r\n\r\n                case D2DType.D2D_IMAGEDATA:\r\n                {\r\n                    const start=owner.getLong(currentInsParams);\r\n                    const length=owner.getLong(currentInsParams+4);\r\n                    const width=owner.getLong(currentInsParams+8);\r\n                    const height=owner.getLong(currentInsParams+12);\r\n                    const id=owner.getLong(currentInsParams+16);\r\n\r\n               if ( id in this.precomputedObjects ) console.log(\"warning: D2D_IMAGEDATA ID already exists.\");\r\n\r\n            if (this.isAsyncMod) {  // Uint8ClampedArray doesn't support shared memory\r\n               this.precomputedObjects[id]={mem8: new Uint8Array(owner.memory!.buffer, start, length), width:width, height:height};\r\n            }\r\n            else {\r\n               const z = new Uint8ClampedArray(owner.memory!.buffer, start, length);\r\n               this.precomputedObjects[id]=new ImageData(z, width, height);\r\n            }\r\n            }\r\n               break;\r\n\r\n                case D2DType.D2D_CREATERADIALGRADIENT:\r\n                {\r\n                    const x0=owner.getDouble(currentInsParams);\r\n                    const y0=owner.getDouble(currentInsParams+8);\r\n                    const radius0=owner.getDouble(currentInsParams+16);\r\n                    const x1=owner.getDouble(currentInsParams+24);\r\n                    const y1=owner.getDouble(currentInsParams+32);\r\n                    const radius1=owner.getDouble(currentInsParams+40);\r\n                    const id= owner.getLong(currentInsParams+48);\r\n\r\n                  let gradient=this.ctx.createRadialGradient(x0, y0, radius0, x1, y1, radius1);\r\n                  if ( id in this.precomputedObjects ) console.log(\"warning: D2D_CREATERADIALGRADIENT ID already exists.\");\r\n                  this.precomputedObjects[id] = gradient;\r\n               }\r\n                  break\r\n\r\n                case D2DType.D2D_CREATELINEARGRADIENT:\r\n                    {\r\n                        const x0=owner.getDouble(currentInsParams);\r\n                        const y0=owner.getDouble(currentInsParams+8);\r\n                        const x1=owner.getDouble(currentInsParams+16);\r\n                        const y1=owner.getDouble(currentInsParams+24);\r\n                        const id= owner.getLong(currentInsParams+32);\r\n    \r\n                        let gradient=this.ctx.createLinearGradient(x0, y0, x1, y1);\r\n                        if ( id in this.precomputedObjects ) console.log(\"warning: D2D_CREATELINEARGRADIENT ID already exists.\");\r\n                        this.precomputedObjects[id] = gradient;\r\n                    }\r\n                        break\r\n\r\n                case D2DType.D2D_SETCOLORSTOP:\r\n                {\r\n                    const id = owner.getLong(currentInsParams);\r\n                    const pos=owner.getLong(currentInsParams+4);\r\n                    const cssColorPointer = owner.getLong(currentInsParams+8);\r\n                    const cssColor= owner.getString(cssColorPointer);\r\n\r\n                    if (!(id in this.precomputedObjects)) throw new Error(\"D2D_SETCOLORSTOP with invalid ID: \"+id);\r\n                    const gradient=this.precomputedObjects[id] as CanvasGradient;\r\n                    gradient.addColorStop(pos, cssColor);\r\n\r\n                }\r\n                    break\r\n\r\n                case D2DType.D2D_SETFILLSTYLEGRADIENT:\r\n                {\r\n                    const id=owner.getLong(currentInsParams);\r\n                    if (!(id in this.precomputedObjects)) throw new Error(\"D2D_SETFILLSTYLEGRADIENT with invalid ID: \"+id);\r\n                    const gradient=this.precomputedObjects[id] as CanvasGradient;\r\n                    this.ctx.fillStyle=gradient;\r\n                }\r\n                    break\r\n\r\n                case D2DType.D2D_RELEASEID:\r\n                {\r\n                    const id=owner.getLong(currentInsParams);\r\n                    if (this.precomputedObjects[id])\r\n                        delete this.precomputedObjects[id];\r\n                    else\r\n                        console.log(\"warning: D2D_RELEASEID with undefined ID \",id);\r\n                }\r\n                    break\r\n\r\n                  \r\n\r\n                case D2DType.D2D_PUTIMAGEDATA:\r\n                {\r\n                    const id=owner.getLong(currentInsParams);\r\n                    const dx=owner.getLong(currentInsParams+4);\r\n                    const dy=owner.getLong(currentInsParams+8);\r\n                    const dirtyX=owner.getLong(currentInsParams+12);\r\n                    const dirtyY=owner.getLong(currentInsParams+16);\r\n                    const dirtyWidth=owner.getLong(currentInsParams+20);\r\n                    const dirtyHeight=owner.getLong(currentInsParams+24);\r\n\r\n                  if (!(id in this.precomputedObjects)) throw new Error(\"D2D_PUTIMAGEDATA with invalid ID: \"+id);\r\n\r\n                  //console.log(\"D2D_PUTIMAGEDATA\",start, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight, this.imageData[start]);\r\n\r\n                  let imgData:ImageData;\r\n     \r\n                  if (this.isAsyncMod) {  // Uint8ClampedArray doesn't support shared memory, so copy the memory\r\n                     //console.log(\"D2D_PUTIMAGEDATA wasmModuleAsync\");\r\n                     const z = this.precomputedObjects[id] as {mem8:Uint8Array, width:number, height:number}; // Uint8Array\r\n                     const ca=Uint8ClampedArray.from(z.mem8);  // shallow copy\r\n                     imgData=new ImageData(ca, z.width, z.height);\r\n                  }\r\n                  else  {\r\n                     imgData=this.precomputedObjects[id] as ImageData;\r\n                  }\r\n                  \r\n                  if (dirtyWidth==0 && dirtyHeight==0) {\r\n                     this.ctx.putImageData(imgData, dx, dy);\r\n                  }\r\n                  else {\r\n                     this.ctx.putImageData(imgData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\r\n                  }\r\n               }\r\n                  break;\r\n\r\n                case D2DType.D2D_CLOSEPATH:\r\n                {\r\n                    this.ctx.closePath();\r\n                }\r\n                    break;\r\n                \r\n                case D2DType.D2D_RESET:\r\n                {\r\n                    this.ctx.reset();\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_CLEARRECT:\r\n                {\r\n                    const x=owner.getDouble(currentInsParams);\r\n                    const y=owner.getDouble(currentInsParams+8);\r\n                    const w=owner.getDouble(currentInsParams+16);\r\n                    const h=owner.getDouble(currentInsParams+24);\r\n                    this.ctx.clearRect(x, y, w, h);\r\n                }\r\n                    break;\r\n                \r\n                case D2DType.D2D_SCALE:\r\n                {\r\n                    const x=owner.getDouble(currentInsParams);\r\n                    const y=owner.getDouble(currentInsParams+8);\r\n                    this.ctx.scale(x, y);\r\n                }\r\n                    break;\r\n                \r\n                case D2DType.D2D_TRANSLATE:\r\n                {\r\n                    const x=owner.getDouble(currentInsParams);\r\n                    const y=owner.getDouble(currentInsParams+8);\r\n                    this.ctx.translate(x, y);\r\n                }\r\n                    break;\r\n                case D2DType.D2D_ROTATE:\r\n                {\r\n                    const angle=owner.getDouble(currentInsParams);\r\n                    this.ctx.rotate(angle);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_GETTRANSFORM:\r\n                {\r\n                    const matrix_ptr=owner.getLong(currentInsParams);\r\n                    const transform=this.ctx.getTransform();\r\n                    owner.setDouble(matrix_ptr+0, transform.a);\r\n                    owner.setDouble(matrix_ptr+8, transform.b);\r\n                    owner.setDouble(matrix_ptr+16, transform.c);\r\n                    owner.setDouble(matrix_ptr+24, transform.d);\r\n                    owner.setDouble(matrix_ptr+32, transform.e);\r\n                    owner.setDouble(matrix_ptr+40, transform.f);\r\n                }\r\n                    break;\r\n                \r\n                case D2DType.D2D_SETTRANSFORM:\r\n                {\r\n                    const a = owner.getDouble(currentInsParams);\r\n                    const b = owner.getDouble(currentInsParams+8);\r\n                    const c = owner.getDouble(currentInsParams+16);\r\n                    const d = owner.getDouble(currentInsParams+24);\r\n                    const e = owner.getDouble(currentInsParams+32);\r\n                    const f = owner.getDouble(currentInsParams+40);\r\n\r\n                    this.ctx.setTransform(a, b, c, d, e, f);\r\n                }\r\n                    break;\r\n                \r\n                case D2DType.D2D_RESETTRANSFORM:\r\n                {\r\n                    this.ctx.resetTransform();\r\n                }\r\n                    break;\r\n                \r\n                case D2DType.D2D_STROKETEXT:\r\n                {\r\n                    const x=owner.getDouble(currentInsParams);\r\n                    const y=owner.getDouble(currentInsParams+8);\r\n                    const codePage=owner.getLong(currentInsParams+20);\r\n                    const strPointer = owner.getLong(currentInsParams+16);\r\n                    const str=owner.getString(strPointer, undefined, codePage);\r\n    \r\n                    this.ctx.strokeText(str, x, y);\r\n                }\r\n                    break;\r\n                \r\n                case D2DType.D2D_ROUNDRECT:\r\n                {\r\n                    const x = owner.getDouble(currentInsParams);\r\n                    const y = owner.getDouble(currentInsParams+8);\r\n                    const width = owner.getDouble(currentInsParams+16);\r\n                    const height = owner.getDouble(currentInsParams+24);\r\n                    const radii = owner.getDouble(currentInsParams+32);\r\n\r\n                    this.ctx.roundRect(x, y, width, height, radii);\r\n                }\r\n                    break;\r\n                \r\n                case D2DType.D2D_ELLIPSE:\r\n                {\r\n                    const x=owner.getDouble(currentInsParams);\r\n                    const y=owner.getDouble(currentInsParams+8);\r\n                    const radiusX=owner.getDouble(currentInsParams+16);\r\n                    const radiusY=owner.getDouble(currentInsParams+24);\r\n                    const rotation=owner.getDouble(currentInsParams+32);\r\n                    const startAngle=owner.getDouble(currentInsParams+40);\r\n                    const endAngle=owner.getDouble(currentInsParams+48);\r\n                    const counterClockwise= (owner.getLong(currentInsParams+56)!=0);\r\n\r\n                    this.ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterClockwise)\r\n                }\r\n                    break;\r\n                \r\n                case D2DType.D2D_QUADRATICCURVETO:\r\n                {\r\n                    const cpx = owner.getDouble(currentInsParams);\r\n                    const cpy = owner.getDouble(currentInsParams+8);\r\n                    const x = owner.getDouble(currentInsParams+16);\r\n                    const y = owner.getDouble(currentInsParams+24);\r\n\r\n                    this.ctx.quadraticCurveTo(cpx, cpy, x, y);\r\n                }\r\n                    break;\r\n                \r\n                case D2DType.D2D_SETLINEDASH:\r\n                {\r\n                    const segment_len = owner.getLong(currentInsParams);\r\n                    const seg_ptr = owner.getLong(currentInsParams+4);\r\n                    let segments = [];\r\n                    for (let i = 0; i < segment_len; i++) {\r\n                        segments[i] = owner.getDouble(seg_ptr + i*8);\r\n                    }\r\n                    this.ctx.setLineDash(segments);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_GETLINEDASH:\r\n                {\r\n                    const segments = this.ctx.getLineDash();\r\n\r\n                    const buffer_length = owner.getLong(currentInsParams);\r\n                    const buffer_ptr = owner.getLong(currentInsParams+4);\r\n                    const segment_length_ptr = currentInsParams+8;\r\n\r\n                    owner.setLong(segment_length_ptr, segments.length);\r\n                    if (segments.length > 0) {\r\n                        for (let i = 0; i < Math.min(segments.length, buffer_length); i++) {\r\n                            owner.setDouble(buffer_ptr + i*8, segments[i]);\r\n                        }\r\n                        if (segments.length > buffer_length) {\r\n                            console.log(\"warning: D2D_GETLINEDASH exceeded given max_length, truncating excess\");\r\n                        }\r\n                    }\r\n                }\r\n                    break;\r\n                \r\n                case D2DType.D2D_ARCTO:\r\n                {\r\n                    const x1 = owner.getDouble(currentInsParams);\r\n                    const y1 = owner.getDouble(currentInsParams+8);\r\n                    const x2 = owner.getDouble(currentInsParams+16);\r\n                    const y2 = owner.getDouble(currentInsParams+24);\r\n                    const radius = owner.getDouble(currentInsParams+32);\r\n\r\n                    this.ctx.arcTo(x1, y1, x2, y2, radius);\r\n                }\r\n                    break;\r\n                \r\n                case D2DType.D2D_GETLINEDASHLENGTH:\r\n                {\r\n                    owner.setLong(currentInsParams, this.ctx.getLineDash().length);\r\n                }\r\n                    break;\r\n                default:\r\n                    throw new Error (\"unimplemented or unknown Sequence Type in drawSeq: \"+type);\r\n            }\r\n            nextInsHdr=owner.getLong(currentInsHdr);  /* hdr->next */\r\n            if (nextInsHdr==0) {\r\n                if (currentInsHdr!=lastInsHdr) throw new Error(\"assert type error in twrcanvas, ins!=lastins\");\r\n                break;\r\n            }\r\n            currentInsHdr=nextInsHdr;\r\n            currentInsParams = currentInsHdr + insHdrSize;\r\n        }\r\n\r\n      if (this.cmdCompleteSignal) this.cmdCompleteSignal.signal();\r\n      //console.log(\"Canvas.drawSeq() completed  with instruction count of \", insCount);\r\n   }\r\n}\r\n\r\nexport class twrConsoleCanvasProxy implements IConsoleCanvasProxy {\r\n   canvasKeys: twrSharedCircularBuffer;\r\n   drawCompleteSignal:twrSignal;\r\n   props: ICanvasProps;\r\n   id:number;\r\n\r\n   constructor(params:TConsoleCanvasProxyParams) {\r\n      const [className, id, props, signalBuffer,  canvasKeysBuffer] = params;\r\n      this.drawCompleteSignal = new twrSignal(signalBuffer);\r\n      this.canvasKeys = new twrSharedCircularBuffer(canvasKeysBuffer);\r\n      this.props=props;\r\n      this.id=id;\r\n\r\n      //console.log(\"Create New twrCanvasProxy: \",this.props)\r\n\r\n   }\r\n\r\n   charIn() {  \r\n      //ctx.commit(); not avail in chrome\r\n\r\n      //postMessage([\"debug\", 'x']);\r\n      \r\n      return this.canvasKeys.readWait();  // wait for a key, then read it\r\n   }\r\n\r\n   inkey() {\r\n      if (this.canvasKeys.isEmpty())\r\n         return 0;\r\n      else\r\n         return this.charIn();    \r\n   }\r\n\r\n   // note that this implementation does not allow a property to change post creation of an instance of this class\r\n   getProp(propName:keyof ICanvasProps): number {\r\n      return this.props[propName];\r\n   }\r\n\r\n   drawSeq(ds:number) {\r\n      this.drawCompleteSignal.reset();\r\n      postMessage([\"canvas2d-drawseq\", [this.id, ds]]);\r\n      this.drawCompleteSignal.wait();\r\n   }\r\n}\r\n","//\n// This class implements a simple signal/wait mechanism\n// It is used by the WebWorker thread to block/wait, and the main JS thread to signal when to unblock\n//\nvar twrSignalState;\n(function (twrSignalState) {\n    twrSignalState[twrSignalState[\"WAITING\"] = 0] = \"WAITING\";\n    twrSignalState[twrSignalState[\"SIGNALED\"] = 1] = \"SIGNALED\";\n})(twrSignalState || (twrSignalState = {}));\n;\nexport class twrSignal {\n    sharedArray;\n    buf;\n    constructor(sa) {\n        if (typeof window !== 'undefined') { // this check only works if window valid\n            if (!crossOriginIsolated && !(window.location.protocol === 'file:'))\n                throw new Error(\"twrSignal constructor, crossOriginIsolated=\" + crossOriginIsolated + \". See SharedArrayBuffer docs.\");\n        }\n        if (sa)\n            this.sharedArray = sa;\n        else\n            this.sharedArray = new SharedArrayBuffer(4);\n        this.buf = new Int32Array(this.sharedArray);\n        this.buf[0] = twrSignalState.WAITING;\n    }\n    signal() {\n        this.buf[0] = twrSignalState.SIGNALED;\n        //console.log(\"about to signal\");\n        Atomics.notify(this.buf, 0);\n    }\n    wait() {\n        if (this.buf[0] == twrSignalState.WAITING) {\n            //console.log(\"waiting...\");\n            Atomics.wait(this.buf, 0, twrSignalState.WAITING);\n            //console.log(\"released...\");\n        }\n    }\n    isSignaled() {\n        return this.buf[0] == twrSignalState.SIGNALED;\n    }\n    reset() {\n        this.buf[0] = twrSignalState.WAITING;\n    }\n}\n//# sourceMappingURL=twrsignal.js.map","//\r\n// This class implements a simple signal/wait mechanism\r\n// It is used by the WebWorker thread to block/wait, and the main JS thread to signal when to unblock\r\n//\r\n\r\nenum twrSignalState {\r\n    WAITING=0,\r\n    SIGNALED=1\r\n};\r\n\r\nexport class twrSignal {\r\n\tsharedArray:SharedArrayBuffer;\r\n\tbuf:Int32Array;\r\n\r\n \tconstructor (sa?:SharedArrayBuffer) {\r\n        if (typeof window !== 'undefined') { // this check only works if window valid\r\n            if (!crossOriginIsolated && !(window.location.protocol === 'file:')) \r\n                throw new Error(\"twrSignal constructor, crossOriginIsolated=\"+crossOriginIsolated+\". See SharedArrayBuffer docs.\");\r\n        }\r\n        if (sa) this.sharedArray=sa;\r\n        else this.sharedArray=new SharedArrayBuffer(4);\r\n\t\tthis.buf=new Int32Array(this.sharedArray);\r\n        this.buf[0]=twrSignalState.WAITING;\r\n\t}\r\n\r\n\tsignal() {\r\n        this.buf[0]=twrSignalState.SIGNALED;  \r\n        //console.log(\"about to signal\");\r\n        Atomics.notify(this.buf, 0);   \r\n\t}\r\n\r\n    wait() {\r\n        if (this.buf[0]==twrSignalState.WAITING) {\r\n            //console.log(\"waiting...\");\r\n            Atomics.wait(this.buf, 0, twrSignalState.WAITING);\r\n            //console.log(\"released...\");\r\n\r\n        }\r\n\t}\r\n    isSignaled():boolean {\r\n        return this.buf[0]==twrSignalState.SIGNALED;\r\n    }\r\n\r\n    reset() {\r\n        this.buf[0]=twrSignalState.WAITING;\r\n    }\r\n}\r\n","import { twrSharedCircularBuffer } from \"./twrcircular.js\";\nimport { twrCodePageToUnicodeCodePoint, codePageUTF32 } from \"./twrlocale.js\";\nimport { IOTypes, keyDown } from \"./twrcon.js\";\nimport { twrConsoleRegistry } from \"./twrconreg.js\";\nconst TRS80_GRAPHIC_MARKER = 0xE000;\nconst TRS80_GRAPHIC_MARKER_MASK = 0xFF00;\nconst TRS80_GRAPHIC_CHAR_MASK = 0x003F; // would be 0xC0 if we included the graphics marker bit 0x80\n// Term Canvas have a size that will be set based on the character width x height.\n// The display size for a canvas is set in the HTML/JS like this:\n//    canvas.style.width = \"700px\";\n//    canvas.style.height = \"500px\";\nexport class twrConsoleTerminal {\n    element;\n    id;\n    ctx;\n    keys; // only created if getProxyParams is called \n    returnValue;\n    props;\n    size;\n    cellWidth;\n    cellHeight;\n    cellW1;\n    cellW2;\n    cellH1;\n    cellH2;\n    cellH3;\n    isCursorVisible;\n    videoMem;\n    foreColorMem;\n    backColorMem;\n    cpTranslate;\n    constructor(canvasElement, params = {}) {\n        const { foreColor = \"white\", backColor = \"black\", fontSize = 16, widthInChars = 80, heightInChars = 25 } = params;\n        this.element = canvasElement;\n        // canvasElement is where we will draw the terminal\n        if (!canvasElement.getContext)\n            throw new Error(\"canvasElement.getContext invalid\");\n        let c = canvasElement.getContext(\"2d\");\n        if (!c)\n            throw new Error(\"canvasElement.getContext('2d') failed\");\n        c.font = fontSize.toString() + \"px Courier New\";\n        c.textBaseline = \"top\";\n        const sampleText = \"          \";\n        //const sampleText=String.fromCharCode(2593).repeat(6);   // this shaded block is typically full width in a font\n        const tm = c.measureText(sampleText);\n        const charWidth = Math.ceil(tm.width / sampleText.length); // ceil rounds up (eg .9 -> 1)\n        let fM = c.measureText(\"X\");\n        const charHeight = Math.ceil(fM.fontBoundingBoxAscent + fM.fontBoundingBoxDescent);\n        canvasElement.width = charWidth * widthInChars;\n        canvasElement.height = charHeight * heightInChars;\n        const canvasHeight = canvasElement.height;\n        const canvasWidth = canvasElement.width;\n        //console.log(\"this.props.canvasHeight, this.props.canvasWidth\",this.props.canvasHeight,this.props.canvasWidth);\n        // reset after dims changed.  Not sure if ctx is needed to reset, but others do\n        let c2 = canvasElement.getContext(\"2d\");\n        if (!c2)\n            throw new Error(\"canvas 2D context not found in twrCanvas.constructor (2nd time)\");\n        this.ctx = c2;\n        this.ctx.font = fontSize.toString() + \"px Courier New\";\n        this.ctx.textBaseline = \"top\";\n        c2.fillStyle = backColor;\n        const backColorAsRGB = Number(\"0x\" + c2.fillStyle.slice(1));\n        c2.fillStyle = foreColor;\n        const foreColorAsRGB = Number(\"0x\" + c2.fillStyle.slice(1));\n        const cursorPos = 0;\n        const type = IOTypes.CHARWRITE | IOTypes.CHARREAD | IOTypes.ADDRESSABLE_DISPLAY;\n        this.props = { type, cursorPos, foreColorAsRGB, backColorAsRGB, fontSize, widthInChars, heightInChars, canvasHeight, canvasWidth, charWidth, charHeight };\n        this.isCursorVisible = false;\n        this.size = this.props.widthInChars * this.props.heightInChars;\n        this.videoMem = new Array(this.size);\n        this.foreColorMem = new Array(this.size);\n        this.backColorMem = new Array(this.size);\n        this.cellWidth = this.props.charWidth;\n        this.cellHeight = this.props.charHeight;\n        if (this.cellWidth <= 0)\n            throw new Error(\"invalid cellWidth\");\n        if (this.cellHeight <= 0)\n            throw new Error(\"invalid cellHeight\");\n        // Calc each cell separately to avoid rounding errors\n        this.cellW1 = Math.floor(this.cellWidth / 2);\n        this.cellW2 = this.cellWidth - this.cellW1;\n        this.cellH1 = Math.floor(this.cellHeight / 3);\n        this.cellH2 = this.cellH1;\n        this.cellH3 = this.cellHeight - this.cellH1 - this.cellH2;\n        this.cls();\n        this.cpTranslate = new twrCodePageToUnicodeCodePoint();\n        this.id = twrConsoleRegistry.registerConsole(this);\n    }\n    // ProxyParams are used as the constructor options to create the Proxy class as returned by getProxyClassName, \n    // in the twrModAsyncProxy WebWorker thread\n    getProxyParams() {\n        if (this.returnValue || this.keys)\n            throw new Error(\"internal error -- getProxyParams unexpectedly called twice.\");\n        // these are used to communicate with twrConsoleTerminalProxy (if it exists)\n        // tsconfig, lib must be set to 2017 or higher for SharedArrayBuffer usage\n        this.returnValue = new twrSharedCircularBuffer();\n        this.keys = new twrSharedCircularBuffer();\n        return [\"twrConsoleTerminalProxy\", this.id, this.returnValue.sharedArray, this.keys.sharedArray];\n    }\n    getProp(propName) {\n        return this.props[propName];\n    }\n    keyDown(ev) {\n        keyDown(this, ev);\n    }\n    // these messages are sent by twrConsoleTerminalProxy to cause functions to execute in the JS Main Thread\n    processMessage(msgType, data) {\n        const [id, ...params] = data;\n        if (id != this.id)\n            throw new Error(\"internal error\"); // should never happen\n        switch (msgType) {\n            case \"term-getprop\":\n                const [propName] = params;\n                const propVal = this.getProp(propName);\n                this.returnValue.write(propVal);\n                break;\n            case \"term-point\":\n                {\n                    const [x, y] = params;\n                    const r = this.point(x, y);\n                    this.returnValue.write(r ? 1 : 0); // wait for result, then read it\n                }\n                break;\n            case \"term-charout\":\n                {\n                    const [ch, codePage] = params;\n                    this.charOut(ch, codePage);\n                }\n                break;\n            case \"term-putstr\":\n                {\n                    const [str] = params;\n                    this.putStr(str);\n                }\n                break;\n            case \"term-cls\":\n                {\n                    this.cls();\n                }\n                break;\n            case \"term-setrange\":\n                {\n                    const [start, values] = params;\n                    this.setRange(start, values);\n                }\n                break;\n            case \"term-setc32\":\n                {\n                    const [location, char] = params;\n                    this.setC32(location, char);\n                }\n                break;\n            case \"term-setreset\":\n                {\n                    const [x, y, isset] = params;\n                    this.setReset(x, y, isset);\n                }\n                break;\n            case \"term-setcursor\":\n                {\n                    const [pos] = params;\n                    this.setCursor(pos);\n                }\n                break;\n            case \"term-setcursorxy\":\n                {\n                    const [x, y] = params;\n                    this.setCursorXY(x, y);\n                }\n                break;\n            case \"term-setcolors\":\n                {\n                    const [foreground, background] = params;\n                    this.setColors(foreground, background);\n                }\n                break;\n            case \"term-focus\":\n                {\n                    this.element.focus();\n                }\n                break;\n            default:\n                return false;\n        }\n        return true;\n    }\n    RGB_TO_RGBA(x) {\n        return ((x) << 8) | 0xFF; // JavaScript uses 32-bit signed integers for bitwise operations, which means the leftmost bit is the sign bit. \n    }\n    eraseLine() {\n        for (let i = this.props.cursorPos; i < Math.floor(this.props.cursorPos / this.props.widthInChars) * this.props.widthInChars + this.props.widthInChars; i++)\n            this.setC32(i, 32);\n    }\n    charOut(c, codePage) {\n        if (c == 13 || c == 10) // return\n         {\n            if (this.isCursorVisible)\n                this.setC32(this.props.cursorPos, 32);\n            this.props.cursorPos = Math.floor(this.props.cursorPos / this.props.widthInChars);\n            this.props.cursorPos = this.props.cursorPos * this.props.widthInChars;\n            this.props.cursorPos = this.props.cursorPos + this.props.widthInChars;\n            /* if return put us on a new line that isn't a scroll, erase the line */\n            if (this.props.cursorPos < this.size)\n                this.eraseLine();\n        }\n        else if (c == 8) // backspace\n         {\n            if (this.props.cursorPos > 0) {\n                if (this.isCursorVisible)\n                    this.setC32(this.props.cursorPos, 32);\n                this.props.cursorPos--;\n                this.setC32(this.props.cursorPos, 32);\n            }\n        }\n        else if (c == 0xE) // Turn on cursor\n         {\n            this.isCursorVisible = true;\n        }\n        else if (c == 0xF) // Turn off cursor\n         {\n            this.setC32(this.props.cursorPos, 32);\n            this.isCursorVisible = false;\n        }\n        else if (c == 24) /* backspace cursor*/ {\n            if (this.props.cursorPos > 0)\n                this.props.cursorPos--;\n        }\n        else if (c == 25) /* advance cursor*/ {\n            if (this.props.cursorPos < (this.size - 1))\n                this.props.cursorPos++;\n        }\n        else if (c == 26) /* cursor down one line */ {\n            if (this.props.cursorPos < this.props.widthInChars * (this.props.heightInChars - 1))\n                this.props.cursorPos += this.props.widthInChars;\n        }\n        else if (c == 27) /* cursor up one line */ {\n            if (this.props.cursorPos >= this.props.widthInChars)\n                this.props.cursorPos -= this.props.widthInChars;\n        }\n        else if (c == 28) /* home */ {\n            this.props.cursorPos = 0;\n        }\n        else if (c == 29) /* beginning of line */ {\n            this.props.cursorPos = (this.props.cursorPos / this.props.widthInChars) * this.props.widthInChars;\n        }\n        else if (c == 30) /* erase to end of line */ {\n            this.eraseLine();\n        }\n        else if (c == 31) /* erase to end of frame */ {\n            for (let i = this.props.cursorPos; i < this.size; i++)\n                this.setC32(i, 32);\n        }\n        else {\n            const c32 = this.cpTranslate.convert(c, codePage);\n            if (c32 != 0) {\n                this.setC32(this.props.cursorPos, c32);\n                this.props.cursorPos++;\n            }\n        }\n        // Do we need to scroll?\n        if (this.props.cursorPos == this.size) {\n            this.props.cursorPos = this.props.widthInChars * (this.props.heightInChars - 1);\n            for (let i = 0; i < (this.props.widthInChars * (this.props.heightInChars - 1)); i++) {\n                this.videoMem[i] = this.videoMem[i + this.props.widthInChars];\n                this.backColorMem[i] = this.backColorMem[i + this.props.widthInChars];\n                this.foreColorMem[i] = this.foreColorMem[i + this.props.widthInChars];\n            }\n            for (let i = 0; i < this.props.widthInChars; i++) {\n                this.videoMem[this.size - i - 1] = 32;\n                this.backColorMem[this.size - i - 1] = this.props.backColorAsRGB;\n                this.foreColorMem[this.size - i - 1] = this.props.foreColorAsRGB;\n            }\n            this.drawRange(0, this.size - 1);\n        }\n        if (this.isCursorVisible)\n            this.setC32(this.props.cursorPos, 9611); // 9611 is graphic block -- same cursor i use in class twrDiv\n        if (this.props.cursorPos >= this.size) {\n            throw new Error(\"twrTerm: assert: this.props.cursorPos >= this.size\");\n        }\n    }\n    //*************************************************\n    putStr(str) {\n        for (let i = 0; i < str.length; i++)\n            this.charOut(str.codePointAt(i) || 0, codePageUTF32);\n    }\n    //*************************************************\n    setC32(location, c32) {\n        if (!(location >= 0 && location < this.size))\n            throw new Error(\"Invalid location passed to setc32\");\n        this.videoMem[location] = c32;\n        this.backColorMem[location] = this.props.backColorAsRGB;\n        this.foreColorMem[location] = this.props.foreColorAsRGB;\n        // draw one before and one after to fix any character rendering overlap.  \n        // Can happen with anti-aliasing on graphic chars that fill the cell\n        let start = location - 1;\n        if (start < 0)\n            start = 0;\n        let end = location + 1;\n        if (end >= this.size)\n            end = this.size - 1;\n        this.drawRange(start, end);\n        // draw one line above and below as well to fix any character rendering overlap.  \n        // the block cursor typically can cause an issue\n        const startSave = start;\n        const endSave = end;\n        start = start - this.props.widthInChars;\n        end = end - this.props.widthInChars;\n        if (start < 0)\n            start = 0;\n        if (end < 0)\n            end = 0;\n        this.drawRange(start, end);\n        start = startSave + this.props.widthInChars;\n        end = endSave + this.props.widthInChars;\n        if (start >= this.size)\n            start = this.size - 1;\n        if (end >= this.size)\n            end = this.size - 1;\n        this.drawRange(start, end);\n    }\n    //*************************************************\n    cls() {\n        for (let i = 0; i < this.size; i++) {\n            this.videoMem[i] = 32;\n            this.backColorMem[i] = this.props.backColorAsRGB;\n            this.foreColorMem[i] = this.props.foreColorAsRGB;\n        }\n        this.props.cursorPos = 0;\n        this.isCursorVisible = false;\n        this.drawRange(0, this.size - 1);\n    }\n    setFillStyleRGB(color) {\n        // const cssColor= \"#\"+(\"00000000\" + color.toString(16)).slice(-8);  RGBA\n        const cssColor = `#${color.toString(16).padStart(6, '0')}`;\n        this.ctx.fillStyle = cssColor;\n    }\n    drawTrs80Graphic(offset, val, fgc, bgc) {\n        let x, y;\n        x = (offset % this.props.widthInChars) * this.cellWidth;\n        y = Math.floor(offset / this.props.widthInChars) * this.cellHeight;\n        this.setFillStyleRGB(bgc);\n        this.ctx.fillRect(x, y, this.cellWidth, this.cellHeight);\n        if (val == 32)\n            return;\n        this.setFillStyleRGB(fgc);\n        if (val & 1)\n            this.ctx.fillRect(x, y, this.cellW1, this.cellH1);\n        y = y + this.cellH1;\n        if (val & 4)\n            this.ctx.fillRect(x, y, this.cellW1, this.cellH2);\n        y = y + this.cellH2;\n        if (val & 16)\n            this.ctx.fillRect(x, y, this.cellW1, this.cellH3);\n        x = x + this.cellW1;\n        if (val & 32)\n            this.ctx.fillRect(x, y, this.cellW2, this.cellH3);\n        y = y - this.cellH2;\n        if (val & 8)\n            this.ctx.fillRect(x, y, this.cellW2, this.cellH2);\n        y = y - this.cellH1;\n        if (val & 2)\n            this.ctx.fillRect(x, y, this.cellW2, this.cellH1);\n    }\n    //**************************************************\n    drawCell(offset, value, fgc, bgc) {\n        if ((value & TRS80_GRAPHIC_MARKER_MASK) == TRS80_GRAPHIC_MARKER || value == 32) {\n            this.drawTrs80Graphic(offset, value & TRS80_GRAPHIC_CHAR_MASK, fgc, bgc);\n        }\n        else {\n            let x, y;\n            x = (offset % this.props.widthInChars) * this.cellWidth;\n            y = Math.floor(offset / this.props.widthInChars) * this.cellHeight;\n            this.setFillStyleRGB(bgc);\n            this.ctx.fillRect(x, y, this.cellWidth, this.cellHeight);\n            if (value != 32) {\n                this.setFillStyleRGB(fgc);\n                const txt = String.fromCodePoint(value);\n                this.ctx.fillText(txt, x, y);\n            }\n        }\n    }\n    //*************************************************\n    // !!TODO add ability to setRange colors\n    // !! should this take a bytearray?\n    // !! need to add \"getRange\" to match\n    setRange(start, values) {\n        let k = 0;\n        for (let i = start; i < start + values.length; i++) {\n            this.videoMem[i] = values[k++];\n        }\n        this.drawRange(start, start + values.length - 1);\n    }\n    drawRange(start, end) {\n        for (let i = start; i <= end; i++) {\n            this.drawCell(i, this.videoMem[i], this.foreColorMem[i], this.backColorMem[i]);\n        }\n    }\n    /*************************************************/\n    setReset(x, y, isset) {\n        const loc = Math.floor(x / 2) + this.props.widthInChars * Math.floor(y / 3);\n        const cellx = x % 2;\n        const celly = y % 3;\n        if (x < 0 || x > this.props.widthInChars * 2)\n            throw new Error(\"setReset: invalid x value\");\n        if (y < 0 || y > this.props.heightInChars * 3)\n            throw new Error(\"setReset: invalid y value\");\n        if (!((this.videoMem[loc] & TRS80_GRAPHIC_MARKER_MASK) == TRS80_GRAPHIC_MARKER)) {\n            this.videoMem[loc] = TRS80_GRAPHIC_MARKER; /* set to a cleared graphics value */\n            this.backColorMem[loc] = this.props.backColorAsRGB;\n            this.foreColorMem[loc] = this.props.foreColorAsRGB;\n        }\n        if (isset)\n            this.videoMem[loc] |= (1 << (celly * 2 + cellx));\n        else\n            this.videoMem[loc] &= ~(1 << (celly * 2 + cellx));\n        this.drawRange(loc, loc);\n    }\n    //*************************************************\n    point(x, y) {\n        const loc = Math.floor(x / 2) + this.props.widthInChars * Math.floor(y / 3);\n        const cellx = x % 2;\n        const celly = y % 3;\n        if (x < 0 || x > this.props.widthInChars * 2)\n            throw new Error(\"Point: invalid x value\");\n        if (y < 0 || y > this.props.heightInChars * 3)\n            throw new Error(\"Point: invalid y value\");\n        if (!((this.videoMem[loc] & TRS80_GRAPHIC_MARKER_MASK) == TRS80_GRAPHIC_MARKER))\n            return false; /* not a graphic cell, so false */\n        if (this.videoMem[loc] & (1 << (celly * 2 + cellx)))\n            return true;\n        else\n            return false;\n    }\n    //*************************************************\n    setCursor(location) {\n        if (location < 0 || location >= this.size)\n            throw new Error(\"setCursor: invalid location: \" + location);\n        this.props.cursorPos = location;\n    }\n    //*************************************************\n    setCursorXY(x, y) {\n        if (x < 0 || y < 0 || this.props.widthInChars * y + x >= this.size)\n            throw new Error(\"setCursorXY: invalid parameter(s)\");\n        this.setCursor(this.props.widthInChars * y + x);\n    }\n    //*************************************************\n    setColors(foreground, background) {\n        this.props.foreColorAsRGB = foreground;\n        this.props.backColorAsRGB = background;\n    }\n}\n//*************************************************\nexport class twrConsoleTerminalProxy {\n    keys;\n    returnValue;\n    id;\n    constructor(params) {\n        const [className, id, returnBuffer, keysBuffer] = params;\n        this.keys = new twrSharedCircularBuffer(keysBuffer);\n        this.returnValue = new twrSharedCircularBuffer(returnBuffer);\n        this.id = id;\n    }\n    getProp(propName) {\n        postMessage([\"term-getprop\", [this.id, propName]]);\n        return this.returnValue.readWait(); // wait for result, then read it\n    }\n    charIn() {\n        return this.keys.readWait(); // wait for a key, then read it\n    }\n    point(x, y) {\n        postMessage([\"term-point\", [this.id, x, y]]);\n        return this.returnValue.readWait() != 0; // wait for result, then read it\n    }\n    charOut(ch, codePoint) {\n        postMessage([\"term-charout\", [this.id, ch, codePoint]]);\n    }\n    putStr(str) {\n        postMessage([\"term-putstr\", [this.id, str]]);\n    }\n    cls() {\n        postMessage([\"term-cls\", [this.id]]);\n    }\n    setRange(start, values) {\n        postMessage([\"term-setrange\", [this.id, start, values]]);\n    }\n    setC32(location, char) {\n        postMessage([\"term-setc32\", [this.id, location, char]]);\n    }\n    setReset(x, y, isset) {\n        postMessage([\"term-setreset\", [this.id, x, y, isset]]);\n    }\n    setCursor(pos) {\n        postMessage([\"term-setcursor\", [this.id, pos]]);\n    }\n    setCursorXY(x, y) {\n        postMessage([\"term-setcursorxy\", [this.id, x, y]]);\n    }\n    setColors(foreground, background) {\n        postMessage([\"term-setcolors\", [this.id, foreground, background]]);\n    }\n    setFocus() {\n        postMessage([\"term-focus\", [this.id]]);\n    }\n}\n//# sourceMappingURL=twrconterm.js.map","import {twrSharedCircularBuffer} from \"./twrcircular.js\";\r\nimport {twrCodePageToUnicodeCodePoint, codePageUTF32} from \"./twrlocale.js\"\r\nimport {IConsoleTerminal, IConsoleTerminalProps, IConsoleTerminalParams, IConsoleTerminalProxy} from \"./twrcon.js\"\r\nimport {TConsoleTerminalProxyParams, IOTypes, keyDown} from \"./twrcon.js\"\r\nimport {twrConsoleRegistry} from \"./twrconreg.js\"\r\n\r\nconst TRS80_GRAPHIC_MARKER=0xE000;\r\nconst TRS80_GRAPHIC_MARKER_MASK=0xFF00;\r\nconst TRS80_GRAPHIC_CHAR_MASK=0x003F;    // would be 0xC0 if we included the graphics marker bit 0x80\r\n\r\n// Term Canvas have a size that will be set based on the character width x height.\r\n// The display size for a canvas is set in the HTML/JS like this:\r\n//    canvas.style.width = \"700px\";\r\n//    canvas.style.height = \"500px\";\r\n\r\n\r\nexport class twrConsoleTerminal implements IConsoleTerminal  {\r\n   element:HTMLElement;\r\n\tid:number;\r\n   ctx:CanvasRenderingContext2D;\r\n   keys?: twrSharedCircularBuffer;  // only created if getProxyParams is called \r\n   returnValue?: twrSharedCircularBuffer;\r\n   props:IConsoleTerminalProps;\r\n   size:number;\r\n   cellWidth:number;\r\n   cellHeight:number;\r\n   cellW1:number;\r\n   cellW2:number; \r\n   cellH1:number;\r\n   cellH2:number;\r\n   cellH3:number;\r\n   isCursorVisible:boolean;\r\n   videoMem: number[];\r\n   foreColorMem: number[];\r\n   backColorMem: number[];\r\n\tcpTranslate:twrCodePageToUnicodeCodePoint;\r\n\r\n\r\n    constructor (canvasElement:HTMLCanvasElement, params:IConsoleTerminalParams={}) {\r\n  \r\n      const {foreColor=\"white\", backColor=\"black\", fontSize=16, widthInChars=80, heightInChars=25} = params; \r\n\r\n      this.element=canvasElement;\r\n\r\n      // canvasElement is where we will draw the terminal\r\n      if (!canvasElement.getContext) throw new Error(\"canvasElement.getContext invalid\");\r\n      let c=canvasElement.getContext(\"2d\");\r\n      if (!c) throw new Error(\"canvasElement.getContext('2d') failed\");\r\n\r\n      c.font = fontSize.toString()+\"px Courier New\";\r\n      c.textBaseline=\"top\";\r\n      const sampleText=\"          \";\r\n      //const sampleText=String.fromCharCode(2593).repeat(6);   // this shaded block is typically full width in a font\r\n      const tm=c.measureText(sampleText);\r\n      const charWidth=Math.ceil(tm.width / sampleText.length);   // ceil rounds up (eg .9 -> 1)\r\n      let fM = c.measureText(\"X\"); \r\n      const charHeight = Math.ceil(fM.fontBoundingBoxAscent + fM.fontBoundingBoxDescent);\r\n\r\n      canvasElement.width=charWidth*widthInChars;\r\n      canvasElement.height=charHeight*heightInChars;\r\n\r\n      const canvasHeight=canvasElement.height;\r\n      const canvasWidth=canvasElement.width;\r\n      //console.log(\"this.props.canvasHeight, this.props.canvasWidth\",this.props.canvasHeight,this.props.canvasWidth);\r\n\r\n      // reset after dims changed.  Not sure if ctx is needed to reset, but others do\r\n      let c2=canvasElement.getContext(\"2d\");\r\n      if (!c2) throw new Error(\"canvas 2D context not found in twrCanvas.constructor (2nd time)\");\r\n      this.ctx=c2;\r\n      this.ctx.font = fontSize.toString()+\"px Courier New\";\r\n      this.ctx.textBaseline=\"top\";\r\n\r\n      c2.fillStyle=backColor;\r\n      const backColorAsRGB=Number(\"0x\"+c2.fillStyle.slice(1));\r\n\r\n      c2.fillStyle=foreColor;\r\n      const foreColorAsRGB=Number(\"0x\"+c2.fillStyle.slice(1));\r\n\r\n      const cursorPos=0;\r\n      const type=IOTypes.CHARWRITE|IOTypes.CHARREAD|IOTypes.ADDRESSABLE_DISPLAY;\r\n\r\n      this.props={type, cursorPos, foreColorAsRGB, backColorAsRGB, fontSize, widthInChars, heightInChars, canvasHeight, canvasWidth, charWidth, charHeight};\r\n\r\n      this.isCursorVisible=false;\r\n      this.size=this.props.widthInChars*this.props.heightInChars;\r\n      this.videoMem=new Array(this.size);\r\n      this.foreColorMem=new Array(this.size);\r\n      this.backColorMem=new Array(this.size);\r\n\r\n      this.cellWidth = this.props.charWidth;\r\n      this.cellHeight = this.props.charHeight;\r\n      if (this.cellWidth<=0) throw new Error(\"invalid cellWidth\");\r\n      if (this.cellHeight<=0) throw new Error(\"invalid cellHeight\");\r\n   \r\n      // Calc each cell separately to avoid rounding errors\r\n      this.cellW1 = Math.floor(this.cellWidth / 2);  \r\n      this.cellW2 = this.cellWidth - this.cellW1;  \r\n      this.cellH1 = Math.floor(this.cellHeight / 3);\r\n      this.cellH2 = this.cellH1;\r\n      this.cellH3 = this.cellHeight - this.cellH1 - this.cellH2;\r\n\r\n\t\tthis.cls();\r\n\r\n\t\tthis.cpTranslate=new twrCodePageToUnicodeCodePoint();\r\n\r\n\t\tthis.id=twrConsoleRegistry.registerConsole(this);\r\n\r\n   }\r\n\r\n   // ProxyParams are used as the constructor options to create the Proxy class as returned by getProxyClassName, \r\n   // in the twrModAsyncProxy WebWorker thread\r\n   getProxyParams() : TConsoleTerminalProxyParams {\r\n      if (this.returnValue || this.keys) throw new Error(\"internal error -- getProxyParams unexpectedly called twice.\");\r\n      // these are used to communicate with twrConsoleTerminalProxy (if it exists)\r\n      // tsconfig, lib must be set to 2017 or higher for SharedArrayBuffer usage\r\n      this.returnValue = new twrSharedCircularBuffer();  \r\n      this.keys = new twrSharedCircularBuffer();  \r\n      return [\"twrConsoleTerminalProxy\", this.id, this.returnValue.sharedArray, this.keys.sharedArray];\r\n  }\r\n\r\n   getProp(propName: string): number {\r\n      return this.props[propName];\r\n   }\r\n\r\n\tkeyDown(ev:KeyboardEvent)  {\r\n\t\tkeyDown(this, ev);\r\n\t}\r\n\r\n   // these messages are sent by twrConsoleTerminalProxy to cause functions to execute in the JS Main Thread\r\n   processMessage(msgType:string, data:[number, ...any[]]):boolean {\r\n\t\tconst [id, ...params] = data;\r\n      if (id!=this.id) throw new Error(\"internal error\");  // should never happen\r\n\r\n      switch (msgType) {\r\n         case \"term-getprop\":\r\n            const [propName] =  params;\r\n\t\t\t\tconst propVal=this.getProp(propName);\r\n            this.returnValue!.write(propVal);\r\n            break;\r\n\r\n         case \"term-point\":\r\n         {\r\n            const [x, y] =  params;\r\n            const r=this.point(x, y);\r\n            this.returnValue!.write(r?1:0);  // wait for result, then read it\r\n\r\n         }\r\n            break;\r\n\r\n         case \"term-charout\":\r\n         {\r\n            const [ch, codePage] =  params;\r\n            this.charOut(ch, codePage);\r\n         }\r\n            break;\r\n\r\n         case \"term-putstr\":\r\n         {\r\n            const [str] =  params;\r\n            this.putStr(str);\r\n         }\r\n            break;\r\n\r\n         case \"term-cls\":\r\n         {\r\n            this.cls();\r\n         }\r\n         break;\r\n\r\n         case \"term-setrange\":\r\n         {\r\n            const [start, values] =  params;\r\n            this.setRange(start, values);\r\n         }\r\n         break;\r\n\r\n         case \"term-setc32\":\r\n         {\r\n            const [location, char] =  params;\r\n            this.setC32(location, char);\r\n         }\r\n         break;\r\n\r\n         case \"term-setreset\":\r\n         {\r\n            const [x, y, isset] =  params;\r\n            this.setReset(x, y, isset);\r\n         }\r\n         break;\r\n\r\n         case \"term-setcursor\":\r\n         {\r\n            const [pos] =  params;\r\n            this.setCursor(pos);\r\n         }\r\n         break;\r\n\r\n         case \"term-setcursorxy\":\r\n         {\r\n            const [x, y] =  params;\r\n            this.setCursorXY(x, y);\r\n         }\r\n         break;\r\n\r\n         case \"term-setcolors\":\r\n         {\r\n            const [foreground, background] =  params;\r\n            this.setColors(foreground, background);\r\n         }\r\n         break;\r\n\r\n         case \"term-focus\":\r\n         {\r\n            this.element.focus();\r\n         }\r\n            break;\r\n\r\n\r\n         default:\r\n            return false;\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   private RGB_TO_RGBA(x:number) {\r\n      return  ((x)<<8) | 0xFF;  // JavaScript uses 32-bit signed integers for bitwise operations, which means the leftmost bit is the sign bit. \r\n   }\r\n\r\n   private eraseLine()\r\n   {\r\n      for (let i=this.props.cursorPos; i < Math.floor(this.props.cursorPos/this.props.widthInChars)*this.props.widthInChars+this.props.widthInChars; i++)\r\n         this.setC32(i, 32);\r\n   }\r\n      \r\n   charOut(c:number, codePage:number)\r\n   {\r\n      if (c==13 || c==10)\t// return\r\n      {\r\n         if (this.isCursorVisible)\r\n            this.setC32(this.props.cursorPos,32);\r\n         \r\n         this.props.cursorPos = Math.floor(this.props.cursorPos/this.props.widthInChars);\r\n         this.props.cursorPos = this.props.cursorPos*this.props.widthInChars;\r\n         this.props.cursorPos = this.props.cursorPos + this.props.widthInChars;\r\n         \r\n         /* if return put us on a new line that isn't a scroll, erase the line */\r\n         if (this.props.cursorPos < this.size)\t\r\n            this.eraseLine();\r\n      }\r\n      else if (c==8)\t// backspace\r\n      {\r\n         if (this.props.cursorPos > 0)\r\n         {\r\n            if (this.isCursorVisible)\r\n               this.setC32(this.props.cursorPos,32);\r\n            this.props.cursorPos--;\r\n            this.setC32(this.props.cursorPos,32);\r\n         }\r\n      }\r\n      else if (c==0xE)\t// Turn on cursor\r\n      {\r\n         this.isCursorVisible = true;\r\n      }\r\n      else if (c==0xF)\t// Turn off cursor\r\n      {\r\n         this.setC32(this.props.cursorPos,32);\r\n         this.isCursorVisible = false;\r\n      }\r\n      else if (c==24)\t/* backspace cursor*/\r\n      {\r\n         if (this.props.cursorPos > 0)\r\n            this.props.cursorPos--;\r\n      }\r\n      else if (c==25)\t/* advance cursor*/\r\n      {\r\n         if (this.props.cursorPos < (this.size-1))\r\n            this.props.cursorPos++;\r\n      }\r\n      else if (c==26)\t/* cursor down one line */\r\n      {\r\n         if (this.props.cursorPos < this.props.widthInChars*(this.props.heightInChars-1))\r\n            this.props.cursorPos+=this.props.widthInChars;\r\n      }\r\n      else if (c==27)\t/* cursor up one line */\r\n      {\r\n         if (this.props.cursorPos >= this.props.widthInChars)\r\n            this.props.cursorPos-=this.props.widthInChars;\r\n      }\r\n      else if (c==28)\t/* home */\r\n      {\r\n         this.props.cursorPos=0;\r\n      }\r\n      else if (c==29)\t/* beginning of line */\r\n      {\r\n         this.props.cursorPos=(this.props.cursorPos/this.props.widthInChars)*this.props.widthInChars;\r\n      }\r\n      else if (c==30)\t/* erase to end of line */\r\n      {\r\n         this.eraseLine();\r\n      }\r\n      else if (c==31)\t/* erase to end of frame */\r\n      {\r\n         for (let i=this.props.cursorPos; i < this.size; i++)\r\n            this.setC32(i, 32);\r\n      }\r\n      else\r\n      {\r\n         const c32=this.cpTranslate.convert(c, codePage);\r\n         if (c32!=0) {\r\n            this.setC32(this.props.cursorPos, c32);\r\n            this.props.cursorPos++;\r\n         }\r\n      }\r\n\r\n      // Do we need to scroll?\r\n      if (this.props.cursorPos == this.size)\t\r\n      {\r\n         this.props.cursorPos = this.props.widthInChars*(this.props.heightInChars-1);\r\n         for (let i=0; i < (this.props.widthInChars*(this.props.heightInChars-1)); i++) {\r\n            this.videoMem[i] = this.videoMem[i+this.props.widthInChars];\r\n            this.backColorMem[i] = this.backColorMem[i+this.props.widthInChars];\r\n            this.foreColorMem[i] = this.foreColorMem[i+this.props.widthInChars];\r\n         }\r\n\r\n         for (let i=0; i < this.props.widthInChars; i++) {\r\n            this.videoMem[this.size-i-1] = 32;\r\n            this.backColorMem[this.size-i-1] = this.props.backColorAsRGB;\r\n            this.foreColorMem[this.size-i-1] = this.props.foreColorAsRGB;\r\n         }\r\n\r\n         this.drawRange(0, this.size-1);\r\n      }\r\n\r\n      if (this.isCursorVisible)\r\n         this.setC32(this.props.cursorPos, 9611);  // 9611 is graphic block -- same cursor i use in class twrDiv\r\n\r\n      if (this.props.cursorPos >= this.size)\r\n      {\r\n         throw new Error(\"twrTerm: assert: this.props.cursorPos >= this.size\");\r\n      }\r\n   }\r\n\r\n   //*************************************************\r\n\r\n   putStr(str:string) {\r\n      for (let i=0; i < str.length; i++)\r\n         this.charOut(str.codePointAt(i)||0, codePageUTF32);\r\n   }\r\n\r\n   //*************************************************\r\n\r\n   setC32(location:number, c32:number) : void\r\n   {\r\n      if (!(location>=0 && location<this.size)) throw new Error(\"Invalid location passed to setc32\")\r\n\r\n      this.videoMem[location]=c32;\r\n      this.backColorMem[location]=this.props.backColorAsRGB;\r\n      this.foreColorMem[location]=this.props.foreColorAsRGB;\r\n      \r\n      // draw one before and one after to fix any character rendering overlap.  \r\n      // Can happen with anti-aliasing on graphic chars that fill the cell\r\n      let start=location-1;\r\n      if (start<0) start=0;\r\n      let end=location+1;\r\n      if (end >= this.size) end=this.size-1;\r\n      this.drawRange(start, end);\r\n\r\n      // draw one line above and below as well to fix any character rendering overlap.  \r\n      // the block cursor typically can cause an issue\r\n      const startSave=start;\r\n      const endSave=end;\r\n      start=start-this.props.widthInChars;\r\n      end=end-this.props.widthInChars;\r\n      if (start<0) start=0;\r\n      if (end<0) end=0;\r\n      this.drawRange(start, end);  \r\n\r\n      start=startSave+this.props.widthInChars;\r\n      end=endSave+this.props.widthInChars;\r\n      if (start >= this.size) start=this.size-1;\r\n      if (end >= this.size) end=this.size-1;\r\n      this.drawRange(start, end);    \r\n   }\r\n\r\n   //*************************************************\r\n\r\n   cls()\r\n   {\r\n      for (let i=0; i < this.size; i++) {\r\n         this.videoMem[i]=32;\r\n         this.backColorMem[i]=this.props.backColorAsRGB;\r\n         this.foreColorMem[i]=this.props.foreColorAsRGB;\r\n      }\r\n\r\n      this.props.cursorPos = 0;\r\n      this.isCursorVisible = false;\r\n\r\n      this.drawRange(0, this.size-1);\r\n   }\r\n\r\n   private setFillStyleRGB(color:number) {\r\n      // const cssColor= \"#\"+(\"00000000\" + color.toString(16)).slice(-8);  RGBA\r\n\t\tconst cssColor = `#${color.toString(16).padStart(6, '0')}`;\r\n      this.ctx.fillStyle = cssColor;\r\n   }\r\n\r\n   drawTrs80Graphic(offset:number, val:number, fgc:number, bgc:number)\r\n   {\r\n      let x, y;\r\n   \r\n      x = (offset%this.props.widthInChars)*this.cellWidth;\r\n      y = Math.floor(offset/this.props.widthInChars)*this.cellHeight;\r\n   \r\n      this.setFillStyleRGB(bgc);\r\n      this.ctx.fillRect(x, y, this.cellWidth, this.cellHeight);\r\n   \r\n      if (val == 32)\r\n         return;\r\n   \r\n      this.setFillStyleRGB(fgc);\r\n   \r\n      if (val&1)\r\n         this.ctx.fillRect(x, y, this.cellW1, this.cellH1);\r\n   \r\n      y=y+this.cellH1;\r\n   \r\n      if (val&4)\r\n         this.ctx.fillRect(x, y, this.cellW1, this.cellH2);\r\n   \r\n      y=y+this.cellH2;\r\n   \r\n      if (val&16)\r\n         this.ctx.fillRect(x, y, this.cellW1, this.cellH3);\r\n   \r\n      x=x+this.cellW1;\r\n   \r\n      if (val&32)\r\n         this.ctx.fillRect(x, y, this.cellW2, this.cellH3);\r\n   \r\n      y=y-this.cellH2;\r\n   \r\n      if (val&8)\r\n         this.ctx.fillRect(x, y, this.cellW2, this.cellH2);\r\n   \r\n      y=y-this.cellH1;\r\n   \r\n      if (val&2)\r\n         this.ctx.fillRect(x, y, this.cellW2, this.cellH1);\r\n   \r\n   } \r\n   \r\n   //**************************************************\r\n   \r\n   private drawCell(offset:number, value:number, fgc:number, bgc:number)\r\n   {\r\n      if ( (value&TRS80_GRAPHIC_MARKER_MASK)==TRS80_GRAPHIC_MARKER || value==32)\r\n      {\r\n         this.drawTrs80Graphic(offset, value&TRS80_GRAPHIC_CHAR_MASK, fgc, bgc);\r\n      }\r\n      else\r\n      {\r\n         let x, y;\r\n   \r\n         x = (offset%this.props.widthInChars)*this.cellWidth;\r\n         y = Math.floor(offset/this.props.widthInChars)*this.cellHeight;\r\n   \r\n         this.setFillStyleRGB(bgc);\r\n         this.ctx.fillRect(x, y, this.cellWidth, this.cellHeight);\r\n         if (value!=32) {\r\n            this.setFillStyleRGB(fgc);\r\n            const txt=String.fromCodePoint(value);\r\n            this.ctx.fillText(txt, x, y);\r\n         }\r\n      }\r\n   }\r\n   \r\n   //*************************************************\r\n   // !!TODO add ability to setRange colors\r\n   // !! should this take a bytearray?\r\n   // !! need to add \"getRange\" to match\r\n   setRange(start:number, values:[])\r\n   {\r\n      let k=0;\r\n      for (let i=start; i < start+values.length; i++) {\r\n         this.videoMem[i]=values[k++];\r\n      }\r\n      this.drawRange(start, start+values.length-1)\r\n   }\r\n\r\n   private drawRange(start:number, end:number)\r\n   {\r\n      for (let i=start; i <= end; i++) {\r\n         this.drawCell(i, this.videoMem[i], this.foreColorMem[i], this.backColorMem[i] );\r\n      }\r\n   }\r\n\r\n\r\n   /*************************************************/\r\n\r\n   setReset(x:number, y:number, isset:boolean) : void\r\n   {\r\n      const loc = Math.floor(x/2)+this.props.widthInChars*Math.floor(y/3);\r\n      const cellx = x%2;\r\n      const celly = y%3;\r\n\r\n      if (x<0 || x>this.props.widthInChars*2) throw new Error(\"setReset: invalid x value\");\r\n      if (y<0 || y>this.props.heightInChars*3) throw new Error(\"setReset: invalid y value\");\r\n\r\n      if (!((this.videoMem[loc]&TRS80_GRAPHIC_MARKER_MASK)==TRS80_GRAPHIC_MARKER)) {\r\n         this.videoMem[loc]= TRS80_GRAPHIC_MARKER;\t/* set to a cleared graphics value */\r\n         this.backColorMem[loc]=this.props.backColorAsRGB;\r\n         this.foreColorMem[loc]=this.props.foreColorAsRGB;\r\n      }\r\n\r\n      if (isset)\r\n         this.videoMem[loc]|= (1<<(celly*2+cellx));\r\n      else\r\n         this.videoMem[loc]&= ~(1<<(celly*2+cellx));\r\n\r\n      this.drawRange(loc, loc);\r\n   }\r\n\r\n   //*************************************************\r\n\r\n   point(x:number, y:number) : boolean\r\n   {\r\n      const loc = Math.floor(x/2)+this.props.widthInChars*Math.floor(y/3);\r\n      const cellx = x%2;\r\n      const celly = y%3;\r\n\r\n      if (x<0 || x>this.props.widthInChars*2) throw new Error(\"Point: invalid x value\");\r\n      if (y<0 || y>this.props.heightInChars*3) throw new Error(\"Point: invalid y value\");\r\n\r\n      if (!((this.videoMem[loc]&TRS80_GRAPHIC_MARKER_MASK)==TRS80_GRAPHIC_MARKER))\r\n         return false;\t/* not a graphic cell, so false */\r\n\r\n      if (this.videoMem[loc]&(1<<(celly*2+cellx)))\r\n         return true;\r\n      else \r\n         return false;\r\n   }\r\n\r\n\r\n   //*************************************************\r\n\r\n   setCursor(location:number) : void\r\n   {\r\n      if (location<0 || location>=this.size) throw new Error(\"setCursor: invalid location: \"+location);\r\n\r\n      this.props.cursorPos = location;\r\n   }\r\n\r\n   //*************************************************\r\n\r\n   setCursorXY(x:number, y:number) {\r\n      if (x<0 || y<0 || this.props.widthInChars*y+x >= this.size) throw new Error(\"setCursorXY: invalid parameter(s)\");\r\n      this.setCursor(this.props.widthInChars*y+x); \r\n   }\r\n\r\n   //*************************************************\r\n\r\n   setColors(foreground:number, background:number) : void \r\n   {\r\n      this.props.foreColorAsRGB=foreground;\r\n      this.props.backColorAsRGB=background;\r\n   }\r\n}\r\n\r\n//*************************************************\r\n\r\nexport class twrConsoleTerminalProxy implements IConsoleTerminalProxy {\r\n   keys: twrSharedCircularBuffer;\r\n   returnValue: twrSharedCircularBuffer;\r\n\tid:number;\r\n\r\n   constructor(params:TConsoleTerminalProxyParams) {\r\n       const [className, id, returnBuffer, keysBuffer] = params;\r\n       this.keys = new twrSharedCircularBuffer(keysBuffer);\r\n       this.returnValue = new twrSharedCircularBuffer(returnBuffer);\r\n\t\t this.id=id;\r\n   }\r\n\r\n   getProp(propName: string):number\r\n   { \r\n      postMessage([\"term-getprop\", [this.id, propName]]);\r\n      return this.returnValue.readWait();  // wait for result, then read it\r\n   }\r\n   \r\n   charIn() {  \r\n       return this.keys.readWait();  // wait for a key, then read it\r\n   }\r\n\r\n   point(x:number, y:number):boolean\r\n   { \r\n      postMessage([\"term-point\", [this.id, x, y]]);\r\n      return this.returnValue.readWait()!=0;  // wait for result, then read it\r\n   }\r\n   \r\n   charOut(ch:number, codePoint:number) {\r\n      postMessage([\"term-charout\", [this.id, ch, codePoint]]);\r\n   }\r\n\r\n   putStr(str:string):void\r\n   {\r\n      postMessage([\"term-putstr\", [this.id, str]]);\r\n   }\r\n\r\n   cls():void\r\n   { \r\n      postMessage([\"term-cls\", [this.id]]);\r\n   }\r\n\r\n   setRange(start:number, values:[]):void\r\n   { \r\n      postMessage([\"term-setrange\", [this.id, start, values]]);\r\n   }\r\n\r\n   setC32(location:number, char:number):void\r\n   { \r\n      postMessage([\"term-setc32\", [this.id, location, char]]);\r\n   }\r\n\r\n   setReset(x:number, y:number, isset:boolean):void\r\n   { \r\n      postMessage([\"term-setreset\", [this.id, x, y, isset]]);\r\n   }\r\n\r\n   setCursor(pos:number):void\r\n   { \r\n      postMessage([\"term-setcursor\", [this.id, pos]]);\r\n   }\r\n\r\n   setCursorXY(x:number, y:number):void\r\n   { \r\n      postMessage([\"term-setcursorxy\", [this.id, x, y]]);\r\n   }\r\n\r\n   setColors(foreground:number, background:number):void\r\n   {\r\n      postMessage([\"term-setcolors\", [this.id, foreground, background]]);\r\n   }\r\n\r\n   setFocus() {\r\n      postMessage([\"term-focus\", [this.id]]);\r\n   }\r\n\r\n}","import { IOTypes } from \"./twrcon.js\";\nimport { twrCodePageToUnicodeCodePoint, codePageUTF32 } from \"./twrlocale.js\";\nimport { twrConsoleRegistry } from \"./twrconreg.js\";\nexport class twrConsoleDebug {\n    logline = \"\";\n    element = undefined;\n    id;\n    cpTranslate;\n    constructor() {\n        this.id = twrConsoleRegistry.registerConsole(this);\n        this.cpTranslate = new twrCodePageToUnicodeCodePoint();\n    }\n    charOut(ch, codePage) {\n        const char = this.cpTranslate.convert(ch, codePage);\n        if (char == 10 || char == 0x03) { // ASCII 03 is End-of-Text, and is used here to indicate the preceding char should be printed\n            console.log(this.logline); // ideally without a linefeed, but there is no way to not have a LF with console.log API.\n            this.logline = \"\";\n        }\n        else {\n            this.logline = this.logline + String.fromCodePoint(char);\n            if (this.logline.length >= 300) {\n                console.log(this.logline);\n                this.logline = \"\";\n            }\n        }\n    }\n    getProp(propName) {\n        if (propName === \"type\")\n            return IOTypes.CHARWRITE;\n        console.log(\"twrConsoleDebug.getProp passed unknown property name: \", propName);\n        return 0;\n    }\n    getProxyParams() {\n        return [\"twrConsoleDebugProxy\", this.id];\n    }\n    keyDown(ev) {\n        throw new Error(\"twrConsoleDebug does not support character input\");\n    }\n    processMessage(msgType, data, callingModule) {\n        const [id, ...params] = data;\n        if (id != this.id)\n            throw new Error(\"internal error\"); // should never happen\n        switch (msgType) {\n            case \"debug-charout\":\n                {\n                    const [ch, codePage] = params;\n                    this.charOut(ch, codePage);\n                }\n                break;\n            case \"debug-putstr\":\n                {\n                    const [str] = params;\n                    this.putStr(str);\n                }\n                break;\n            default:\n                return false;\n        }\n        return true;\n    }\n    putStr(str) {\n        for (let i = 0; i < str.length; i++)\n            this.charOut(str.codePointAt(i) || 0, codePageUTF32);\n    }\n}\nexport class twrConsoleDebugProxy {\n    id;\n    constructor(params) {\n        this.id = params[1];\n    }\n    charIn() {\n        return 0;\n    }\n    setFocus() {\n    }\n    charOut(ch, codePoint) {\n        postMessage([\"debug-charout\", [this.id, ch, codePoint]]);\n    }\n    putStr(str) {\n        postMessage([\"debug-putstr\", [this.id, str]]);\n    }\n    getProp(propName) {\n        if (propName === \"type\")\n            return IOTypes.CHARWRITE;\n        console.log(\"twrConsoleDebugProxy.getProp passed unknown property name: \", propName);\n        return 0;\n    }\n}\n// ************************************************************************\n// debugLog doesn't currently wait for the message to log, it returns immediately.\n// I could move this to be in the twrWaitingCalls class\n//# sourceMappingURL=twrcondebug.js.map","\r\n\r\nimport {IConsoleStream, IConsoleStreamProxy, TConsoleDebugProxyParams, IOTypes} from \"./twrcon.js\"\r\nimport {twrCodePageToUnicodeCodePoint, codePageUTF32} from \"./twrlocale.js\"\r\nimport {twrConsoleRegistry} from \"./twrconreg.js\"\r\nimport {twrWasmModuleBase} from \"./twrmodbase.js\"\r\n\r\nexport class twrConsoleDebug implements IConsoleStream {\r\n\tlogline=\"\";\r\n\telement=undefined;\r\n\tid:number;\r\n\tcpTranslate:twrCodePageToUnicodeCodePoint;\r\n\r\n\tconstructor() {\r\n\t\tthis.id=twrConsoleRegistry.registerConsole(this);\r\n\t\tthis.cpTranslate=new twrCodePageToUnicodeCodePoint();\r\n\t}\r\n\r\n\tcharOut(ch:number, codePage:number) {\r\n      const char=this.cpTranslate.convert(ch, codePage);\r\n\r\n\t\tif (char==10 || char==0x03) {  // ASCII 03 is End-of-Text, and is used here to indicate the preceding char should be printed\r\n\t\t\tconsole.log(this.logline);\t// ideally without a linefeed, but there is no way to not have a LF with console.log API.\r\n\t\t\tthis.logline=\"\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.logline=this.logline+String.fromCodePoint(char);\r\n\t\t\tif (this.logline.length>=300) {\r\n\t\t\t\tconsole.log(this.logline);\r\n\t\t\t\tthis.logline=\"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetProp(propName: string):number {\r\n\t\tif (propName===\"type\") return IOTypes.CHARWRITE;  \r\n\t\tconsole.log(\"twrConsoleDebug.getProp passed unknown property name: \", propName)\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tgetProxyParams() : TConsoleDebugProxyParams {\r\n\t\treturn [\"twrConsoleDebugProxy\", this.id];\r\n\t}\r\n\r\n\tkeyDown(ev:KeyboardEvent)  {\r\n\t\tthrow new Error(\"twrConsoleDebug does not support character input\");\r\n\t}\r\n\r\n   processMessage(msgType:string, data:[number, ...any[]], callingModule:twrWasmModuleBase):boolean {\r\n\t\tconst [id, ...params] = data;\r\n      if (id!=this.id) throw new Error(\"internal error\");  // should never happen\r\n\r\n\t\tswitch (msgType) {\r\n\t\t\tcase \"debug-charout\":\r\n\t\t\t{\r\n\t\t\t\tconst [ch, codePage] =  params;\r\n\t\t\t\tthis.charOut(ch, codePage);\r\n\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"debug-putstr\":\r\n\t\t\t{\r\n\t\t\t\tconst [str] =  params;\r\n\t\t\t\tthis.putStr(str);\r\n\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tputStr(str:string) {\r\n\t\tfor (let i=0; i < str.length; i++)\r\n\t\t\tthis.charOut(str.codePointAt(i)||0, codePageUTF32);\r\n\t}\r\n}\r\n\r\n\r\nexport class twrConsoleDebugProxy implements IConsoleStreamProxy {\r\n\tid:number;\r\n\r\n\tconstructor(params:TConsoleDebugProxyParams) {\r\n\t\tthis.id=params[1];\r\n\t}\r\n\r\n\tcharIn() {  \r\n\t\treturn 0;\r\n\t}\r\n\r\n   setFocus() {\r\n   }\r\n\t\r\n\tcharOut(ch:number, codePoint:number) {\r\n\t\tpostMessage([\"debug-charout\", [this.id, ch, codePoint]]);\r\n\t}\r\n\r\n\tputStr(str:string):void\r\n\t{\r\n\t\tpostMessage([\"debug-putstr\", [this.id, str]]);\r\n\t}\r\n\r\n\tgetProp(propName: string) {\r\n\t\tif (propName===\"type\") return IOTypes.CHARWRITE;\r\n\t\tconsole.log(\"twrConsoleDebugProxy.getProp passed unknown property name: \", propName)\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\n\r\n// ************************************************************************\r\n// debugLog doesn't currently wait for the message to log, it returns immediately.\r\n// I could move this to be in the twrWaitingCalls class\r\n","// return ms since epoch as double\nexport function twrTimeEpochImpl() {\n    return Date.now();\n}\n//# sourceMappingURL=twrdate.js.map","// return ms since epoch as double\r\nexport function twrTimeEpochImpl() {\r\n\r\n    return Date.now();\r\n\r\n}\r\n\r\n","import { twrWasmModuleInJSMain } from \"./twrmodjsmain.js\";\nimport { twrWaitingCalls } from \"./twrwaitingcalls.js\";\nimport { keyDown } from \"./twrcon.js\";\nimport { twrConsoleRegistry } from \"./twrconreg.js\";\nexport class twrWasmModuleAsync extends twrWasmModuleInJSMain {\n    myWorker;\n    malloc;\n    loadWasmResolve;\n    loadWasmReject;\n    callCResolve;\n    callCReject;\n    initLW = false;\n    waitingcalls;\n    // d2dcanvas?:twrCanvas; - defined in twrWasmModuleInJSMain\n    // io:{[key:string]: IConsole}; - defined in twrWasmModuleInJSMain\n    constructor(opts) {\n        super(opts);\n        this.malloc = (size) => { throw new Error(\"Error - un-init malloc called.\"); };\n        if (!window.Worker)\n            throw new Error(\"This browser doesn't support web workers.\");\n        this.myWorker = new Worker(new URL('twrmodasyncproxy.js', import.meta.url), { type: \"module\" });\n        this.myWorker.onerror = (event) => {\n            console.log(\"this.myWorker.onerror (undefined message typically means Worker failed to load)\");\n            console.log(\"event.message: \" + event.message);\n            throw event;\n        };\n        this.myWorker.onmessage = this.processMsg.bind(this);\n        this.waitingcalls = new twrWaitingCalls(); // handle's calls that cross the worker thread - main js thread boundary\n    }\n    // overrides base implementation\n    async loadWasm(pathToLoad) {\n        if (this.initLW)\n            throw new Error(\"twrWasmAsyncModule::loadWasm can only be called once per twrWasmAsyncModule instance\");\n        this.initLW = true;\n        return new Promise((resolve, reject) => {\n            this.loadWasmResolve = resolve;\n            this.loadWasmReject = reject;\n            this.malloc = (size) => {\n                return this.callCImpl(\"malloc\", [size]);\n            };\n            // base class twrWasmModuleInJSMain member variables include:\n            // d2dcanvas:twrCanvas, io:{ [key:string]:IConsole }\n            // io.stdio & io.stderr are required to exist and be valid\n            // d2dcanvas is optional \n            // everything needed to create Proxy versions of all IConsoles, and create the proxy registry\n            let conProxyParams = [];\n            for (let i = 0; i < twrConsoleRegistry.consoles.length; i++) {\n                conProxyParams.push(twrConsoleRegistry.consoles[i].getProxyParams());\n            }\n            const allProxyParams = {\n                conProxyParams: conProxyParams,\n                ioNamesToID: this.ioNamesToID,\n                waitingCallsProxyParams: this.waitingcalls.getProxyParams(),\n            };\n            const urlToLoad = new URL(pathToLoad, document.URL);\n            const startMsg = { urlToLoad: urlToLoad.href, allProxyParams: allProxyParams };\n            this.myWorker.postMessage(['startup', startMsg]);\n        });\n    }\n    async callC(params) {\n        const cparams = await this.preCallC(params); // will also validate params[0]\n        const retval = await this.callCImpl(params[0], cparams);\n        await this.postCallC(cparams, params);\n        return retval;\n    }\n    async callCImpl(fname, cparams = []) {\n        return new Promise((resolve, reject) => {\n            this.callCResolve = resolve;\n            this.callCReject = reject;\n            this.myWorker.postMessage(['callC', fname, cparams]);\n        });\n    }\n    // this function is deprecated and here for backward compatibility\n    keyDownDiv(ev) {\n        let destinationCon;\n        if (this.io.stdio.element && this.io.stdio.element.id === 'twr_iodiv')\n            destinationCon = this.io.stdio;\n        else if (this.io.stderr.element && this.io.stderr.element.id === 'twr_iodiv')\n            destinationCon = this.io.stdio;\n        else\n            return;\n        keyDown(destinationCon, ev);\n    }\n    // this function is deprecated and here for backward compatibility\n    keyDownCanvas(ev) {\n        let destinationCon;\n        if (this.io.stdio.element && this.io.stdio.element.id === 'twr_iocanvas')\n            destinationCon = this.io.stdio;\n        else if (this.io.stderr.element && this.io.stderr.element.id === 'twr_iocanvas')\n            destinationCon = this.io.stdio;\n        else\n            return;\n        keyDown(destinationCon, ev);\n    }\n    processMsg(event) {\n        const msgType = event.data[0];\n        const d = event.data[1];\n        //console.log(\"twrWasmAsyncModule - got message: \"+event.data)\n        switch (msgType) {\n            case \"setmemory\":\n                this.memory = d;\n                if (!this.memory)\n                    throw new Error(\"unexpected error - undefined memory\");\n                this.mem8 = new Uint8Array(this.memory.buffer);\n                this.mem32 = new Uint32Array(this.memory.buffer);\n                this.memD = new Float64Array(this.memory.buffer);\n                //console.log(\"memory set\",this.mem8.length);\n                break;\n            case \"startupFail\":\n                if (this.loadWasmReject)\n                    this.loadWasmReject(d);\n                else\n                    throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined loadWasmReject)\");\n                break;\n            case \"startupOkay\":\n                if (this.loadWasmResolve)\n                    this.loadWasmResolve(undefined);\n                else\n                    throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined loadWasmResolve)\");\n                break;\n            case \"callCFail\":\n                if (this.callCReject)\n                    this.callCReject(d);\n                else\n                    throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined callCReject)\");\n                break;\n            case \"callCOkay\":\n                if (this.callCResolve)\n                    this.callCResolve(d);\n                else\n                    throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined callCResolve)\");\n                break;\n            default:\n                if (!this.waitingcalls)\n                    throw new Error(\"internal error: this.waitingcalls undefined.\");\n                if (this.waitingcalls.processMessage(msgType, d))\n                    break;\n                // here if a console  message\n                // console messages are an array with the first entry as the console ID\n                const con = twrConsoleRegistry.getConsole(d[0]);\n                if (con.processMessage(msgType, d, this))\n                    break;\n                throw new Error(\"twrWasmAsyncModule - unknown and unexpected msgType: \" + msgType);\n        }\n    }\n}\n//# sourceMappingURL=twrmodasync.js.map","import {IModOpts} from \"./twrmodbase.js\";\r\nimport {IAllProxyParams} from \"./twrmodasyncproxy.js\"\r\nimport {twrWasmModuleInJSMain} from \"./twrmodjsmain.js\"\r\nimport {twrWaitingCalls} from \"./twrwaitingcalls.js\"\r\nimport {IConsole, keyDown, TConsoleProxyParams} from \"./twrcon.js\";\r\nimport {twrConsoleRegistry} from \"./twrconreg.js\"\r\n\r\n// class twrWasmModuleAsync consist of two parts:\r\n//   twrWasmModuleAsync runs in the main JavaScript event loop\r\n//   twrWasmModuleAsyncProxy runs in a WebWorker thread\r\n//      - the wasm module is loaded by the webworker, and C calls into javascript are handed by proxy classes which call the 'main' class via a message\r\n//      - For example:\r\n//          twrConCharOut (exported from JavaScript to C) might call twrConsoleTerminalProxy.CharOut\r\n//          twrConsoleTerminalProxy.CharOut will send the message \"term-charout\".  \r\n//          Ths message is received by twrWasmModuleAsync.processMsg(), which dispatches a call to twrConsoleTerminal.CharOut().\r\n\r\nexport type TModAsyncProxyStartupMsg = {\r\n   urlToLoad: string,\r\n   allProxyParams: IAllProxyParams,\r\n};\r\n\r\n// Interface for the error event\r\ninterface WorkerErrorEvent extends ErrorEvent {\r\n   filename: string;\r\n   lineno: number;\r\n   colno: number;\r\n   message: string;\r\n   error: Error | null;\r\n}\r\n      \r\nexport class twrWasmModuleAsync extends twrWasmModuleInJSMain {\r\n   myWorker:Worker;\r\n   malloc:(size:number)=>Promise<number>;\r\n   loadWasmResolve?: (value: void) => void;\r\n   loadWasmReject?: (reason?: any) => void;\r\n   callCResolve?: (value: unknown) => void;\r\n   callCReject?: (reason?: any) => void;\r\n   initLW=false;\r\n   waitingcalls:twrWaitingCalls;\r\n   // d2dcanvas?:twrCanvas; - defined in twrWasmModuleInJSMain\r\n   // io:{[key:string]: IConsole}; - defined in twrWasmModuleInJSMain\r\n\r\n   constructor(opts?:IModOpts) {\r\n      super(opts);\r\n\r\n      this.malloc=(size:number)=>{throw new Error(\"Error - un-init malloc called.\")};\r\n\r\n      if (!window.Worker) throw new Error(\"This browser doesn't support web workers.\");\r\n      this.myWorker = new Worker(new URL('twrmodasyncproxy.js', import.meta.url), {type: \"module\" });\r\n      this.myWorker.onerror = (event: WorkerErrorEvent) => {\r\n         console.log(\"this.myWorker.onerror (undefined message typically means Worker failed to load)\");\r\n         console.log(\"event.message: \"+event.message)\r\n         throw event;\r\n      };\r\n      this.myWorker.onmessage= this.processMsg.bind(this);\r\n\r\n      this.waitingcalls=new twrWaitingCalls();  // handle's calls that cross the worker thread - main js thread boundary\r\n\r\n   }\r\n\r\n   // overrides base implementation\r\n   async loadWasm(pathToLoad:string) {\r\n      if (this.initLW) \tthrow new Error(\"twrWasmAsyncModule::loadWasm can only be called once per twrWasmAsyncModule instance\");\r\n      this.initLW=true;\r\n\r\n      return new Promise<void>((resolve, reject)=>{\r\n         this.loadWasmResolve=resolve;\r\n         this.loadWasmReject=reject;\r\n\r\n         this.malloc = (size:number) => {\r\n            return this.callCImpl(\"malloc\", [size]) as Promise<number>;\r\n         }\r\n\r\n         // base class twrWasmModuleInJSMain member variables include:\r\n         // d2dcanvas:twrCanvas, io:{ [key:string]:IConsole }\r\n         // io.stdio & io.stderr are required to exist and be valid\r\n         // d2dcanvas is optional \r\n         \r\n         // everything needed to create Proxy versions of all IConsoles, and create the proxy registry\r\n         let conProxyParams:TConsoleProxyParams[] = [];\r\n         for (let i=0; i<twrConsoleRegistry.consoles.length; i++) {\r\n            conProxyParams.push(twrConsoleRegistry.consoles[i].getProxyParams());\r\n         }\r\n\r\n         const allProxyParams={\r\n            conProxyParams: conProxyParams,\r\n            ioNamesToID: this.ioNamesToID,\r\n            waitingCallsProxyParams: this.waitingcalls.getProxyParams(),\r\n         };\r\n         const urlToLoad = new URL(pathToLoad, document.URL);\r\n         const startMsg:TModAsyncProxyStartupMsg={ urlToLoad: urlToLoad.href, allProxyParams: allProxyParams};\r\n         this.myWorker.postMessage(['startup', startMsg]);\r\n      });\r\n   }\r\n\r\n   async callC(params:[string, ...(string|number|bigint|Uint8Array)[]]) {\r\n      const cparams=await this.preCallC(params); // will also validate params[0]\r\n      const retval=await this.callCImpl(params[0], cparams);\r\n      await this.postCallC(cparams, params);\r\n      return retval;\r\n   }\t\r\n\r\n   async callCImpl(fname:string, cparams:(number|bigint)[]=[]) {\r\n      return new Promise((resolve, reject)=>{\r\n         this.callCResolve=resolve;\r\n         this.callCReject=reject;\r\n         this.myWorker.postMessage(['callC', fname, cparams]);\r\n      });\r\n   }\r\n   \r\n   // this function is deprecated and here for backward compatibility\r\n   keyDownDiv(ev:KeyboardEvent) {\r\n      let destinationCon:IConsole;\r\n      if (this.io.stdio.element && this.io.stdio.element.id==='twr_iodiv')\r\n         destinationCon=this.io.stdio;\r\n      else if (this.io.stderr.element && this.io.stderr.element.id==='twr_iodiv')\r\n         destinationCon=this.io.stdio;\r\n      else\r\n         return;\r\n\r\n      keyDown(destinationCon, ev);\r\n   }\r\n\r\n   // this function is deprecated and here for backward compatibility\r\n   keyDownCanvas(ev:KeyboardEvent) {\r\n      let destinationCon:IConsole;\r\n      if (this.io.stdio.element && this.io.stdio.element.id==='twr_iocanvas')\r\n         destinationCon=this.io.stdio;\r\n      else if (this.io.stderr.element && this.io.stderr.element.id==='twr_iocanvas')\r\n         destinationCon=this.io.stdio;\r\n      else\r\n         return;\r\n\r\n      keyDown(destinationCon, ev);\r\n   }\r\n\r\n   processMsg(event: MessageEvent) {\r\n      const msgType=event.data[0] as string;\r\n      const d=event.data[1];\r\n\r\n      //console.log(\"twrWasmAsyncModule - got message: \"+event.data)\r\n\r\n      switch (msgType) {\r\n         case \"setmemory\":\r\n            this.memory=d;\r\n            if (!this.memory) throw new Error(\"unexpected error - undefined memory\");\r\n            this.mem8 = new Uint8Array(this.memory.buffer);\r\n            this.mem32 = new Uint32Array(this.memory.buffer);\r\n            this.memD = new Float64Array(this.memory.buffer);\r\n            //console.log(\"memory set\",this.mem8.length);\r\n            break;\r\n\r\n         case \"startupFail\":\r\n            if (this.loadWasmReject)\r\n               this.loadWasmReject(d);\r\n            else\r\n               throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined loadWasmReject)\");\r\n            break;\r\n\r\n         case \"startupOkay\":\r\n\r\n            if (this.loadWasmResolve)\r\n               this.loadWasmResolve(undefined);\r\n            else\r\n               throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined loadWasmResolve)\");\r\n            break;\r\n\r\n         case \"callCFail\":\r\n            if (this.callCReject)\r\n               this.callCReject(d);\r\n            else\r\n               throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined callCReject)\");\r\n            break;\r\n\r\n         case \"callCOkay\":\r\n            if (this.callCResolve)\r\n               this.callCResolve(d);\r\n            else\r\n               throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined callCResolve)\");\r\n            break;\r\n\r\n         default:\r\n            if (!this.waitingcalls) throw new Error (\"internal error: this.waitingcalls undefined.\")\r\n            if (this.waitingcalls.processMessage(msgType, d)) break;\r\n            // here if a console  message\r\n            // console messages are an array with the first entry as the console ID\r\n            const con=twrConsoleRegistry.getConsole(d[0]);\r\n            if (con.processMessage(msgType, d, this)) break;\r\n            throw new Error(\"twrWasmAsyncModule - unknown and unexpected msgType: \"+msgType);\r\n      }\r\n   }\r\n}\r\n","import { twrSignal } from \"./twrsignal.js\";\n// This class is used in the  Main JS thread \nexport class twrWaitingCalls {\n    callCompleteSignal;\n    parameters;\n    constructor() {\n        this.callCompleteSignal = new twrSignal();\n        this.parameters = new Uint32Array(new SharedArrayBuffer(4));\n    }\n    startSleep(ms) {\n        setTimeout(() => {\n            this.callCompleteSignal.signal();\n        }, ms);\n    }\n    getProxyParams() {\n        return [this.callCompleteSignal.sharedArray, this.parameters.buffer];\n    }\n    processMessage(msgType, data) {\n        switch (msgType) {\n            case \"sleep\":\n                const [ms] = data;\n                this.startSleep(ms);\n                break;\n            default:\n                return false;\n        }\n        return true;\n    }\n}\n// This class is used in the worker thread \nexport class twrWaitingCallsProxy {\n    callCompleteSignal;\n    parameters;\n    constructor(params) {\n        this.callCompleteSignal = new twrSignal(params[0]);\n        this.parameters = new Uint32Array(params[1]);\n    }\n    sleep(ms) {\n        this.callCompleteSignal.reset();\n        postMessage([\"sleep\", [ms]]);\n        this.callCompleteSignal.wait();\n    }\n}\n//# sourceMappingURL=twrwaitingcalls.js.map","import { twrSignal } from \"./twrsignal.js\";\r\n\r\n// These classes are used to proxy a call across the worker thread - main thread boundary and wait for the result\r\n\r\nexport type TWaitingCallsProxyParams = [SharedArrayBuffer, SharedArrayBuffer];   // twrSignal, arguments \r\n\r\n// This class is used in the  Main JS thread \r\nexport class twrWaitingCalls {\r\n\tcallCompleteSignal:twrSignal;\r\n\tparameters:Uint32Array;\r\n\r\n\tconstructor() {\r\n\t\tthis.callCompleteSignal=new twrSignal();\r\n\t\tthis.parameters=new Uint32Array(new SharedArrayBuffer(4));\r\n\t}\r\n\r\n\tprivate startSleep(ms:number) {\r\n\r\n\t\tsetTimeout(()=>{\r\n\t\t\tthis.callCompleteSignal.signal();\r\n\t\t}, ms);\r\n\t\t\r\n\t}\r\n\r\n\tgetProxyParams():TWaitingCallsProxyParams {\r\n\t\treturn [this.callCompleteSignal.sharedArray, this.parameters.buffer as SharedArrayBuffer];\t\r\n\t}\r\n\r\n\tprocessMessage(msgType:string, data:any[]):boolean {\r\n\t\tswitch (msgType) {\r\n\t\t\tcase \"sleep\":\r\n\t\t\t\tconst [ms] =  data;\r\n\t\t\t\tthis.startSleep(ms);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\n// This class is used in the worker thread \r\nexport class twrWaitingCallsProxy {\r\n\tcallCompleteSignal:twrSignal;\r\n\tparameters:Uint32Array;\r\n\r\n\tconstructor(params:TWaitingCallsProxyParams) {\r\n\t\tthis.callCompleteSignal=new twrSignal(params[0]);\r\n\t\tthis.parameters=new Uint32Array(params[1]);\r\n\t}\r\n\r\n\tsleep(ms:number) {\r\n\t\tthis.callCompleteSignal.reset();\r\n\t\tpostMessage([\"sleep\", [ms]]);\r\n\t\tthis.callCompleteSignal.wait();\r\n\t}\r\n\r\n}\r\n","let workerURL = require('./helpers/get-worker-url');\nlet url = new __parcel__URL__(\"twrmodasyncproxy.c3081bc6.js\");\nmodule.exports = workerURL(url.toString(), url.origin, true);","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","twrWasmModule","twrWasmModuleAsync","twrConsoleDiv","twrConsoleTerminal","twrConsoleDebug","twrConsoleCanvas","$3c56311baef528c2$export$3298af74d75b595c","$1Yd7N","$5savl","$7qrGZ","$6MgDX","twrWasmModuleInJSMain","malloc","imports","cpTranslate","constructor","opts","size","twrCodePageToUnicodeCodePoint","conCall","funcName","jsid","args","con","twrConsoleRegistry","getConsole","f","twrTimeEpoch","twrTimeEpochImpl","twrTimeTmLocal","twrTimeTmLocalImpl","bind","twrUserLconv","twrUserLconvImpl","twrUserLanguage","twrUserLanguageImpl","twrRegExpTest1252","twrRegExpTest1252Impl","twrToLower1252","twrToLower1252Impl","twrToUpper1252","twrToUpper1252Impl","twrStrcoll","twrStrcollImpl","twrUnicodeCodePointToCodePage","twrUnicodeCodePointToCodePageImpl","convert","twrGetDtnames","twrGetDtnamesImpl","twrGetConIDFromName","nameIdx","name","getString","ioNamesToID","twrConCharOut","twrConCharIn","null","twrSetFocus","twrConGetProp","pn","twrConCls","twrConSetC32","twrConSetReset","twrConPoint","twrConSetCursor","twrConSetColors","twrConSetRange","chars","start","len","values","i","push","getLong","twrConPutStr","codePage","twrConDrawSeq","ds","twrCanvasCharIn","twrCanvasInkey","twrSleep","twrSin","Math","sin","twrCos","cos","twrTan","tan","twrFAbs","abs","twrACos","acos","twrASin","asin","twrATan","atan","twrExp","exp","twrFloor","floor","twrCeil","ceil","twrFMod","x","y","twrLog","log","twrPow","pow","twrSqrt","sqrt","twrTrunc","trunc","twrDtoa","floatUtil","dtoa","twrToFixed","toFixed","twrToExponential","toExponential","twrAtod","atod","twrFcvtS","fcvtS","loadWasm","pathToLoad","inval","$16f59354d99d4272$export$2366c14363f3adb5","$8wznr","$jhM3f","$eDJ4i","$a7Sa2","$9kgjF","twrWasmModuleBase","io","document","stdio","eiodiv","getElementById","eiocanvas","foreColor","forecolor","backColor","backcolor","fontSize","fontsize","widthInChars","windim","heightInChars","console","stderr","std2d","d2dcanvas","ed2dcanvas","keys","forEach","key","divLog","params","length","putStr","toString","charOut","codePageUTF32","$634cc10760be4c8e$export$b0aa7e35767ef6cf","$dRr3I","$4Jz48","element","CURSOR","String","fromCharCode","cursorOn","lastChar","extraBR","style","backgroundColor","color","font","registerConsole","isHtmlEntityAtEnd","str","entityPattern","test","removeHtmlEntityAtEnd","replace","ch","innerHTML","slice","chnum","p","getBoundingClientRect","window","scrollTo","height","focus","newchr","fromCodePoint","getProp","propName","IOTypes","CHARWRITE","CHARREAD","getProxyParams","twrSharedCircularBuffer","sharedArray","keyDown","ev","processMessage","msgType","data","codePointAt","$a17536f066adc156$export$a01cca24f011573a","buf","sa","crossOriginIsolated","location","protocol","SharedArrayBuffer","Int32Array","write","Atomics","notify","read","isEmpty","readWait","rdptr","wait","$568071407ca255c4$export$53f1026d7d1c23fb","$568071407ca255c4$export$29f202393adbf96","$568071407ca255c4$export$3d6ef5b62200d8d1","$568071407ca255c4$export$ddea6250b326d061","$568071407ca255c4$export$c7de3f2686797480","$568071407ca255c4$export$b1748e2af4950b56","$568071407ca255c4$export$99a2816c432302a9","$568071407ca255c4$export$6e12283a61625fd2","$568071407ca255c4$export$8644084c19ac418e","$568071407ca255c4$export$69111c4ea6e0c4a0","$568071407ca255c4$export$1619a0be8731b76a","$568071407ca255c4$export$b8cd0608a44dce64","$568071407ca255c4$export$2663d7470da86e92","$568071407ca255c4$export$a0bf9983b7d1ed7c","$568071407ca255c4$export$714291919e374cc0","$568071407ca255c4$export$6e74b5e725f469d6","decoderUTF8","TextDecoder","decoder1252","c","outstr","decode","Uint8Array","stream","$568071407ca255c4$var$cpTranslate","cp","$568071407ca255c4$var$noasyncCopyString","mod","outbuf","ru8","stringToU8","mem8","$568071407ca255c4$var$noasyncPutString","navigator","language","regexpStrIdx","regexp","RegExp","cstr","instr","normalize","toLocaleLowerCase","toLocaleUpperCase","lhs","rhs","lhStr","undefined","rhStr","collator","Intl","Collator","compare","tmIdx","epochSecs","d","Date","setLong","getSeconds","getMinutes","getHours","getDate","getMonth","getFullYear","getDay","$568071407ca255c4$var$getDayOfYear","date","diff","getTime","timeString","toLocaleTimeString","timeZoneName","includes","getTimezoneOffset","timeZone","split","pop","$568071407ca255c4$var$setAndPutString","idx","stridx","strIndex","lconvIdx","locDec","formattedNumber","formatter","NumberFormat","format","charAt","locSep","minimumFractionDigits","$568071407ca255c4$var$getLocalCurrencySymbol","dtnamesStructIdx","$568071407ca255c4$var$getLocalizedDayName","$568071407ca255c4$var$getLocalizedMonthNames","$568071407ca255c4$var$getLocalizedAM","morningDate","dayPeriodPart","formattedParts","DateTimeFormat","hour","hour12","formatToParts","find","part","type","value","$568071407ca255c4$var$getLocalizedPM","afternoonDate","weekdayType","setDate","weekday","monthType","month","$372690b1a012f88a$export$5d8b86200307417d","$372690b1a012f88a$export$d081dc64f99d208b","ADDRESSABLE_DISPLAY","CANVAS2D","EVENTS","destinationCon","r","$372690b1a012f88a$var$keyEventProcess","isComposing","metaKey","$4ef422d250ddf10b$export$401f32ea04a2dc08","consoles","getConsoleID","$e0a4e0dab7348a9e$export$c83a0a3bffe07399","$8k9qF","memory","mem32","memD","isAsyncProxy","Uint32Array","Float64Array","twrFloatUtil","response","fetch","ok","statusText","wasmBytes","arrayBuffer","instance","WebAssembly","instantiate","env","buffer","ArrayBuffer","postMessage","Promise","resolve","m","stack","twrInit","twr_wasm_init","callC","cparams","preCallC","retval","callCImpl","postCallC","fname","Array","ci","putString","URL","fetchAndPutURL","putArrayBuffer","u8","j","codePageUTF8","encoder","TextEncoder","encode","codePage1252","to1252","codePageASCII","toASCII","copyString","buffer_size","putU8","u8a","dest","ab","fnin","src","idx32","getDouble","idx64","setDouble","getShort","encodeFormat","indexOf","td","u8todecode","regularUint8Array","getU8Arr","rv","dataptr","getU32Arr","$60f78167b4604737$export$918ffb7e046a537b","strptr","upper","trimStart","toUpperCase","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","parseFloat","replaceAll","max_precision","toPrecision","decdigits","sizeInBytes","fracpart_numdigits","dec","sign","digits","decpos","isNaN","isFinite","intPart","fracPart","roundValStr","$aa87aad92858d6c6$export$e1daeed5216ed90a","D2DType","$aa87aad92858d6c6$var$D2DType","$3k1GP","ctx","props","cmdCompleteSignal","canvasKeys","isAsyncMod","precomputedObjects","getContext","textBaseline","canvasHeight","canvasWidth","width","twrSignal","callingModule","drawSeq","owner","nextInsHdr","currentInsHdr","lastInsHdr","currentInsParams","D2D_FILLRECT","w","h","fillRect","D2D_STROKERECT","strokeRect","D2D_FILLCODEPOINT","txt","fillText","D2D_FILLTEXT","strPointer","D2D_MEASURETEXT","tmidx","tm","measureText","actualBoundingBoxAscent","actualBoundingBoxDescent","actualBoundingBoxLeft","actualBoundingBoxRight","fontBoundingBoxAscent","fontBoundingBoxDescent","D2D_SETFONT","fontPointer","D2D_SETFILLSTYLERGBA","cssColor","fillStyle","D2D_SETSTROKESTYLERGBA","strokeStyle","D2D_SETFILLSTYLE","cssColorPointer","D2D_SETSTROKESTYLE","D2D_SETLINEWIDTH","lineWidth","D2D_MOVETO","moveTo","D2D_LINETO","lineTo","D2D_BEZIERTO","cp1x","cp1y","cp2x","cp2y","bezierCurveTo","D2D_BEGINPATH","beginPath","D2D_FILL","fill","D2D_SAVE","save","D2D_RESTORE","restore","D2D_STROKE","stroke","D2D_ARC","radius","startAngle","endAngle","counterClockwise","arc","D2D_IMAGEDATA","z","Uint8ClampedArray","ImageData","D2D_CREATERADIALGRADIENT","x0","y0","radius0","x1","y1","radius1","gradient","createRadialGradient","D2D_CREATELINEARGRADIENT","createLinearGradient","D2D_SETCOLORSTOP","pos","addColorStop","D2D_SETFILLSTYLEGRADIENT","D2D_RELEASEID","D2D_PUTIMAGEDATA","imgData","dx","dy","dirtyX","dirtyY","dirtyWidth","dirtyHeight","from","putImageData","D2D_CLOSEPATH","closePath","D2D_RESET","reset","D2D_CLEARRECT","clearRect","D2D_SCALE","scale","D2D_TRANSLATE","translate","D2D_ROTATE","angle","rotate","D2D_GETTRANSFORM","matrix_ptr","transform","getTransform","a","b","D2D_SETTRANSFORM","setTransform","D2D_RESETTRANSFORM","resetTransform","D2D_STROKETEXT","strokeText","D2D_ROUNDRECT","radii","roundRect","D2D_ELLIPSE","radiusX","radiusY","rotation","ellipse","D2D_QUADRATICCURVETO","cpx","cpy","quadraticCurveTo","D2D_SETLINEDASH","segment_len","seg_ptr","segments","setLineDash","D2D_GETLINEDASH","getLineDash","buffer_length","buffer_ptr","segment_length_ptr","min","D2D_ARCTO","x2","y2","arcTo","D2D_GETLINEDASHLENGTH","signal","$26b48ce2cdfbca9f$var$twrSignalState","twrSignalState","$26b48ce2cdfbca9f$export$e37a7b7b851b97f3","WAITING","SIGNALED","isSignaled","$75f49210bbda5451$export$3217cba298dc07f7","returnValue","cellWidth","cellHeight","cellW1","cellW2","cellH1","cellH2","cellH3","isCursorVisible","videoMem","foreColorMem","backColorMem","canvasElement","sampleText","charWidth","fM","charHeight","c2","backColorAsRGB","foreColorAsRGB","cursorPos","cls","propVal","point","setRange","char","setC32","isset","setReset","setCursor","setCursorXY","foreground","background","setColors","RGB_TO_RGBA","eraseLine","c32","drawRange","end","startSave","endSave","setFillStyleRGB","padStart","drawTrs80Graphic","offset","val","fgc","bgc","drawCell","k","loc","cellx","celly","$6ca2a3642a328c4c$export$e501d006d4cbf5f7","logline","$3f87b74122de4998$export$a952b8f8c62754b8","now","$0a8a936a2dc396bf$export$678fe6e36ab9a6ff","$eEBf6","myWorker","loadWasmResolve","loadWasmReject","callCResolve","callCReject","initLW","waitingcalls","Worker","onerror","event","message","onmessage","processMsg","twrWaitingCalls","reject","conProxyParams","allProxyParams","waitingCallsProxyParams","startMsg","urlToLoad","href","keyDownDiv","keyDownCanvas","$aab1b0b9b5c6c7e8$export$9e37856d1928d388","callCompleteSignal","parameters","startSleep","ms","setTimeout","$hoqmg","$a94a9fc609ab5168$var$url","url","origin","workerUrl","isESM","self","source","JSON","stringify","createObjectURL","Blob"],"version":3,"file":"lib-js.0f7166eb.js.map"}